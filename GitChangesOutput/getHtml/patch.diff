diff --git a/scripts/chg-ibuyconfig.js b/scripts/chg-ibuyconfig.js
index 7f892b168..3055a33a7 100644
--- a/scripts/chg-ibuyconfig.js
+++ b/scripts/chg-ibuyconfig.js
@@ -10,8 +10,8 @@ const ibuyAesKeyUat = 'f54d61b111f65f6282f7a868ee8884cb'
 const ibuyAesIvPrd = '5986969849664324'
 const ibuyAesIvUat = '6054670480370677'
 
-const ANDROID_WEB_VIEW_PATH = 'src-cordova/platforms/android/app/src/main/java/com/TSBCardApp/InAppWebViewPlugin/InAppWebViewActivity.java'
-const IOS_WEB_VIEW_PATH = 'src-cordova/platforms/ios/CardailyApp/Plugins/cordova-plugin-inappwebviewplugin/WKWebViewController.m'
+const ANDROID_WEB_VIEW_PATH = 'src-cordova/platforms/android/app/src/main/java/org/apache/cordova/inappbrowser/InAppBrowser.java'
+const IOS_WEB_VIEW_PATH = 'src-cordova/platforms/ios/CardailyApp/Plugins/cordova-plugin-inappbrowser-richartlife/CDVWKInAppBrowser.m'
 
 function updateWebViewKey(path, env, type) {
   var check = (path) => {
diff --git a/src-cordova/package.json b/src-cordova/package.json
index e1245bad8..4233816e9 100755
--- a/src-cordova/package.json
+++ b/src-cordova/package.json
@@ -44,8 +44,7 @@
     "cordova-plugin-googlemaps": "file:res/customPlugins/cordova-plugin-googlemaps-master",
     "cordova-plugin-googlemaps-sdk": "file:res/customPlugins/cordova-plugin-googlemaps-sdk-master",
     "cordova-plugin-idfa": "file:res/customPlugins/cordova-plugin-idfa",
-    "cordova-plugin-inappbrowser": "3.2.0",
-    "cordova-plugin-inappwebviewplugin": "file:res/customPlugins/cardaily-inappwebview",
+    "cordova-plugin-inappbrowser-richartlife": "file:res/customPlugins/cordova-plugin-inappbrowser-richartlife",
     "cordova-plugin-ionic-webview": "2.5.3",
     "cordova-plugin-keyboard": "1.2.0",
     "cordova-plugin-mfp": "8.0.2020101414",
@@ -132,7 +131,6 @@
       },
       "cordova-plugin-ios-detect-screenshot": {},
       "cordova-plugin-screenshotv2": {},
-      "cordova-plugin-inappwebviewplugin": {},
       "cordova-plugin-mfp-encrypt-utils": {},
       "cordova-plugin-networkinterface": {},
       "cordova-plugin-mfpdeviceid": {},
@@ -140,7 +138,6 @@
       "cordova-plugin-devoptionschecker": {},
       "cordova-plugin-keyboard": {},
       "cordova-plugin-statusbar": {},
-      "cordova-plugin-inappbrowser": {},
       "cordova-plugin-wkkeyboardfix": {},
       "cordova-plugin-ionic-webview": {},
       "cordova-plugin-fcm": {},
@@ -160,7 +157,8 @@
       "cardaily-arxanDetection": {},
       "cordova-plugin-mfp": {},
       "cordova-plugin-broadcastReceiver": {},
-      "cordova-plugin-splashscreen": {}
+      "cordova-plugin-splashscreen": {},
+      "cordova-plugin-inappbrowser-richartlife": {}
     },
     "platforms": [
       "android",
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/README.md b/src-cordova/res/customPlugins/cardaily-inappwebview/README.md
deleted file mode 100755
index 7b09d04df..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/README.md
+++ /dev/null
@@ -1,93 +0,0 @@
-# Cardaily-inAppWebview
-
----
-
-## Installation
-
-將檔案 clone 至與 cardailyapp 同一層資料夾：
-
-```shell
-
-$ git clone <repository-URL>
-$ cd cardaily-inappwebview
-```
-資料夾位置：
-
-```txt
-
-your-folder/
-  cardailyapp/
-  cardaily-inappwebview/
-```
-
-直接執行安裝腳本(適用 macOS)：
-
-```shell
-
-$ . ./install.sh
-```
-
-Building 過程中如果報錯先不用管他。
-
-待程序完成後，Android Studio 會自動開啟。
-照常執行 Refactory 的步驟。
-
----
-
-## Usage
-
-openUrl:
-
-```javascript
-cordova.plugins.InAppWebViewPlugin.openUrl(
-    function(success){}, 
-    function(failure){}, 
-    {title:'title String', url:'url String', keys:['key1','key2']});
-
-function(success) 
-    return 'detected url', or 'exit' means do nothing to close
-
-function(failure) 
-    return 'error message'
-
-{title:'title String', url:'url String', keys:['key1','key2']}
-title : web main title, will be replaced by web title.
-url : web url.
-keys : url start index array, for detect specific url.
-
-```
-
-openMall: 
-
-```javascript
-cordova.plugins.InAppWebViewPlugin.openUrl(
-    function(success){}, 
-    function(failure){}, 
-    {title:'title String', url:'url String', tokenid:'token', channel:'channel', appver:'1.0.0', action:''});
-
-function(success) {}
-
-    success example {url:'https://xxx/', action:'needLogin'}
-    url : 'redirect url'
-    action : 'needLogin', or 'exit' means do nothing to close
-
-success return action type:
-needLogin - returned url requires login
-deepLink - returned deeplink is used to process the next action
-
-function(failure) {}
-
-    return 'error message'
-
-{title:'title String', url:'url String', tokenid:'token', channel:'channel', appver:'1.0.0', action:'action_to_do'}
-title : web main title, will be replaced by web title
-url : web url
-tokenid : unique user identification, fill null if not login
-channel : identify which app to open Mall.
-appver : app version.
-action : action from which step. (ex: login)
-
-request action type :
-login - open url after login
-
-```
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/package.json b/src-cordova/res/customPlugins/cardaily-inappwebview/package.json
deleted file mode 100755
index 2e6539a04..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/package.json
+++ /dev/null
@@ -1,24 +0,0 @@
-{
-  "name": "cordova-plugin-inappwebviewplugin",
-  "version": "1.1.8",
-  "description": "",
-  "cordova": {
-    "id": "cordova-plugin-inappwebviewplugin",
-    "platforms": [
-      "android",
-      "ios"
-    ]
-  },
-  "keywords": [
-    "ecosystem:cordova",
-    "cordova-android",
-    "cordova-ios"
-  ],
-  "author": "",
-  "license": "ISC",
-  "repository": {
-    "type": "git",
-    "url": "git+https://simon_lee_17Life@bitbucket.org/17life_team/cardaily-inappwebview.git"
-  },
-  "homepage": "https://bitbucket.org/17life_team/cardaily-inappwebview#readme"
-}
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/scripts/apply-to-gradle.properties.js b/src-cordova/res/customPlugins/cardaily-inappwebview/scripts/apply-to-gradle.properties.js
deleted file mode 100755
index e7ae62ee9..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/scripts/apply-to-gradle.properties.js
+++ /dev/null
@@ -1,68 +0,0 @@
-var PLUGIN_NAME = "cordova-plugin-inappwebviewplugin";
-var enableAndroidX = "android.useAndroidX=true";
-var enableJetifier = "android.enableJetifier=true";
-var gradlePropertiesPath = "./platforms/android/gradle.properties";
-
-var deferral, fs, path;
-
-function log(message) {
-    console.log(PLUGIN_NAME + ": " + message);
-}
-
-function onError(error) {
-    log("ERROR: " + error);
-    deferral.resolve();
-}
-
-function run() {
-    try {
-        fs = require('fs');
-        path = require('path');
-    } catch (e) {
-        throw("Failed to load dependencies: " + e.toString());
-    }
-
-    var gradleProperties = fs.readFileSync(gradlePropertiesPath);
-
-    if (gradleProperties) {
-        var updatedGradleProperties = false;
-        gradleProperties = gradleProperties.toString();
-        if(!gradleProperties.match(enableAndroidX)){
-            gradleProperties += "\n" + enableAndroidX;
-            updatedGradleProperties = true;
-        }
-        if(!gradleProperties.match(enableJetifier)){
-            gradleProperties += "\n" + enableJetifier;
-            updatedGradleProperties = true;
-        }
-        if(updatedGradleProperties){
-            fs.writeFileSync(gradlePropertiesPath, gradleProperties, 'utf8');
-            log("Updated gradle.properties to enable AndroidX");
-        }
-    }else{
-        log("gradle.properties file not found!")
-    }
-    deferral.resolve();
-}
-
-function attempt(fn) {
-    return function () {
-        try {
-            fn.apply(this, arguments);
-        } catch (e) {
-            onError("EXCEPTION: " + e.toString());
-        }
-    }
-}
-
-module.exports = function (ctx) {
-    try{
-        deferral = require('q').defer();
-    }catch(e){
-        e.message = 'Unable to load node module dependency \'q\': '+e.message;
-        log(e.message);
-        throw e;
-    }
-    attempt(run)();
-    return deferral.promise;
-};
\ No newline at end of file
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/InAppWebViewActivity.java b/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/InAppWebViewActivity.java
deleted file mode 100755
index 793423ecc..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/InAppWebViewActivity.java
+++ /dev/null
@@ -1,888 +0,0 @@
-package com.TSBCardApp.InAppWebViewPlugin;
-
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.app.AppCompatActivity;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.net.http.SslCertificate;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Message;
-import android.text.TextUtils;
-import android.util.Base64;
-import android.util.Log;
-import android.view.View;
-import android.webkit.DownloadListener;
-import android.webkit.JavascriptInterface;
-import android.webkit.JsPromptResult;
-import android.webkit.JsResult;
-import android.webkit.MimeTypeMap;
-import android.webkit.URLUtil;
-import android.webkit.ValueCallback;
-import android.webkit.WebChromeClient;
-import android.webkit.WebSettings;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
-import java.io.ByteArrayInputStream;
-import java.io.UnsupportedEncodingException;
-import java.net.URISyntaxException;
-import java.security.GeneralSecurityException;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.Certificate;
-import java.security.cert.CertificateEncodingException;
-import java.security.cert.CertificateException;
-import java.security.cert.CertificateFactory;
-import java.security.cert.X509Certificate;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.TimeZone;
-import java.util.Locale;
-
-import javax.crypto.Cipher;
-import javax.crypto.spec.IvParameterSpec;
-import javax.crypto.spec.SecretKeySpec;
-
-public class InAppWebViewActivity extends AppCompatActivity {
-
-    public static final String JAVASCRIPT_INTERFACE_NAME = "android";
-    public static String KEY_TITLE = "title";
-    public static String KEY_URL = "url";
-    public static String KEY_TYPE = "type";
-    public static String KEY_TOKENINFO = "tokenInfo";
-    public static String KEY_SHOW_SHARING = "showSharing";
-    public static String TYPE_OPEN_URL = "openUrl";
-    public static String TYPE_OPEN_FAMILY_URL = "openFamilyUrl";
-    public static String TYPE_OPEN_AC_LINK_URL = "openAcLinkWebView";
-    public static String TYPE_OPEN_MALL = "openMall";
-
-    public static String KEY_KEYS = "keys";
-
-    public static String KEY_TOKENID = "tokenid";
-    public static String KEY_CHANNEL = "channel";
-    public static String KEY_APPVER = "appver";
-    public static String KEY_ACTION = "action";
-
-    public static String RESULT_ACTION = "resultAction";
-    public static String RESULT_ACTION_DETECTED_URL = "detectedUrl";
-    public static String RESULT_ACTION_NEED_LOGIN = "needLogin";
-    public static String RESULT_ACTION_DEEP_LINK = "deepLink";
-    public static String RESULT_DATA = "resultData";
-
-    public static String USER_AGENT_TYPE = "android_tsbank";
-    public static String LIFE_MARKET_URL = "https://www.buy123.com.tw";
-    // 首頁返回鍵關閉InAppWebview 目前只有RICHARTMART
-    public static Set<String> HOME_URL_FOR_CLOSE = new HashSet<String>();
-
-    private static final String AES_MODE = "AES/CBC/PKCS7Padding";
-    private static final String CHARSET = "UTF-8";
-    private static final String aes_key = "f54d61b111f65f6282f7a868ee8884cb";
-    private static final String aes_iv = "6054670480370677";
-
-    private static Boolean showSharing = false;
-
-    private static Set<String> fingerPrintSet = new HashSet<String>();
-    static{
-        //台新點
-        fingerPrintSet.add("2D:F9:FE:6E:E3:BF:87:5F:6A:CE:46:05:71:1D:57:BD:08:BB:70:63");
-        //MPIP 串接代登網站
-        fingerPrintSet.add("CF:A8:0A:8F:F6:73:D5:A5:9F:66:3F:68:66:24:94:3A:06:6C:11:37");
-        //台新銀行
-        fingerPrintSet.add("84:CA:D0:54:1F:8F:4D:AE:93:50:D7:91:DA:C7:78:42:B4:13:3E:77");
-        // 正式RM
-        HOME_URL_FOR_CLOSE.add("https://ktc.i-buy88.com/");
-        // 測試RM
-        HOME_URL_FOR_CLOSE.add("https://uat.ktc.i-buy88.com/");
-    }
-
-    private String title;
-    private String type;
-    private String url;
-    private String action;
-    private String tokenInfo;
-
-    /**
-     * open Url parameter
-     */
-    private String[] keys;
-
-    /**
-     * open Mall parameter
-     */
-    private String tokenid = "";
-    private String channel = "";
-    private String appver = "";
-
-    /**
-     * Flag for is Activity finishing
-     */
-    private boolean isFinished;
-
-    /**
-     * current page url
-     */
-    private String currentUrl;
-
-    public ValueCallback<Uri[]> mUploadMessageForAndroid5;
-    public final static int FILE_CHOOSER_RESULT_CODE_FOR_ANDROID_5 = 2;
-
-    private WebView webView;
-
-    private ImageView btnBack;
-    private ImageView btnForward;
-    private ImageView btnClose;
-    private ImageView btnShare;
-    private TextView tvTitle;
-
-    private int id_toolbar;
-    private int id_webView;
-    private int id_btnBack;
-    private int id_btnForward;
-    private int id_btnClose;
-    private int id_btnShare;
-    private int id_tvTitle;
-    private int id_prompt_dialog;
-    private int id_prompt_message_text;
-    private int id_prompt_input_field;
-
-    private boolean isRichartMartHome; // RM首頁 WebView按鈕新增特殊功能
-
-    private Button.OnClickListener clickListener = new View.OnClickListener() {
-        @Override
-        public void onClick(View view) {
-
-            if (webView == null) {
-                return;
-            }
-
-            int id = view.getId();
-            if (id == id_btnBack) {
-                if(isRichartMartHome) {
-                    onBackPressed();
-                } else if (webView.canGoBack()) {
-                    webView.goBack();
-                }
-            } else if (id == id_btnForward) {
-                if (webView.canGoForward()) {
-                    webView.goForward();
-                }
-            } else if (id == id_btnClose) {
-                onBackPressed();
-            } else if (id == id_btnShare) {
-                Intent sendIntent = new Intent();
-                sendIntent.setAction(Intent.ACTION_SEND);
-                sendIntent.putExtra(Intent.EXTRA_TEXT, webView.getUrl());
-                sendIntent.setType("text/plain");
-
-                Intent shareIntent = Intent.createChooser(sendIntent, null);
-                startActivity(shareIntent);
-            }
-        }
-    };
-
-    boolean isReload = false;
-
-    @SuppressLint("SetJavaScriptEnabled")
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(getResources().getIdentifier("activity_in_app_webview", "layout", getPackageName()));
-
-        id_toolbar = getResources().getIdentifier("toolbar", "id", getPackageName());
-        id_webView = getResources().getIdentifier("webView", "id", getPackageName());
-        id_btnBack = getResources().getIdentifier("btnBack", "id", getPackageName());
-        id_btnForward = getResources().getIdentifier("btnForward", "id", getPackageName());
-        id_btnClose = getResources().getIdentifier("btnClose", "id", getPackageName());
-        id_btnShare = getResources().getIdentifier("btnShare", "id", getPackageName());
-        id_tvTitle = getResources().getIdentifier("tvTitle", "id", getPackageName());
-
-        //for prompt dialog
-        id_prompt_dialog = getResources().getIdentifier("prompt_dialog", "layout", getPackageName());
-        id_prompt_message_text = getResources().getIdentifier("prompt_message_text", "id", getPackageName());
-        id_prompt_input_field = getResources().getIdentifier("prompt_input_field", "id", getPackageName());
-
-        //for prompt dialog
-        id_prompt_dialog = getResources().getIdentifier("prompt_dialog", "layout", getPackageName());
-        id_prompt_message_text = getResources().getIdentifier("prompt_message_text", "id", getPackageName());
-        id_prompt_input_field = getResources().getIdentifier("prompt_input_field", "id", getPackageName());
-
-        Intent intent = getIntent();
-
-        if (intent != null) {
-            if (intent.hasExtra(KEY_TITLE)) {
-                title = intent.getStringExtra(KEY_TITLE);
-            }
-
-            if (intent.hasExtra(KEY_TYPE)) {
-                type = intent.getStringExtra(KEY_TYPE);
-            }
-
-            if (intent.hasExtra(KEY_URL)) {
-                url = intent.getStringExtra(KEY_URL);
-            }
-
-            if (intent.hasExtra(KEY_KEYS)) {
-                keys = intent.getStringArrayExtra(KEY_KEYS);
-            }
-
-            if (intent.hasExtra(KEY_TOKENID)) {
-                tokenid = intent.getStringExtra(KEY_TOKENID);
-            }
-
-            if (intent.hasExtra(KEY_CHANNEL)) {
-                channel = intent.getStringExtra(KEY_CHANNEL);
-            }
-
-            if (intent.hasExtra(KEY_APPVER)) {
-                appver = intent.getStringExtra(KEY_APPVER);
-            }
-
-            if (intent.hasExtra(KEY_ACTION)) {
-                action = intent.getStringExtra(KEY_ACTION);
-            }
-
-            if(intent.hasExtra(KEY_TOKENINFO)){
-                tokenInfo = intent.getStringExtra(KEY_TOKENINFO);
-            }
-
-            if(intent.hasExtra(KEY_SHOW_SHARING)){
-                showSharing = intent.getBooleanExtra(KEY_SHOW_SHARING, false);
-            }
-
-        }
-
-        initToolBar();
-
-        webView = findViewById(id_webView);
-
-        WebSettings webSettings = webView.getSettings();
-        webSettings.setBuiltInZoomControls(true);
-        webSettings.setSupportZoom(true);
-        webSettings.setDisplayZoomControls(false);
-        webSettings.setJavaScriptEnabled(true);
-        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
-        webSettings.setDomStorageEnabled(true);
-        webSettings.setUseWideViewPort(true);
-        webSettings.setLoadWithOverviewMode(true);
-        webSettings.setGeolocationEnabled(true);
-        webSettings.setSupportMultipleWindows(true);
-        String userAgent = webSettings.getUserAgentString() + USER_AGENT_TYPE;
-        if (url != null && url.contains(LIFE_MARKET_URL)) {
-            webSettings.setUserAgentString(userAgent);
-        }
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
-        }
-        webView.setScrollBarStyle(View.SCROLLBARS_INSIDE_INSET);
-
-        if (type != null && (type.equals(TYPE_OPEN_MALL) || type.equals(TYPE_OPEN_FAMILY_URL) || type.equals(TYPE_OPEN_AC_LINK_URL))) {
-            webView.addJavascriptInterface(new JavaScriptInterface(), JAVASCRIPT_INTERFACE_NAME);
-        }
-
-        webView.setWebChromeClient(new WebChromeClient() {
-            @Override
-            public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message msg) {
-                // 20200824 外開分頁 會需要這端
-                WebView newWebView = new WebView(InAppWebViewActivity.this);
-                WebSettings webSettings = newWebView.getSettings();
-                webSettings.setJavaScriptEnabled(true);
-
-                // Other configuration comes here, such as setting the WebViewClient
-
-                final Dialog dialog = new Dialog(InAppWebViewActivity.this);
-                dialog.setContentView(newWebView);
-                dialog.show();
-
-                newWebView.setWebChromeClient(new WebChromeClient() {
-                    @Override
-                    public void onCloseWindow(WebView window) {
-                        dialog.dismiss();
-                    }
-                });
-
-                ((WebView.WebViewTransport)msg.obj).setWebView(newWebView);
-                msg.sendToTarget();
-                return true;
-            }
-
-            @Override
-            public void onProgressChanged(WebView view, int newProgress) {
-                if (type != null && (type.equals(TYPE_OPEN_MALL) || type.equals(TYPE_OPEN_FAMILY_URL) || type.equals(TYPE_OPEN_AC_LINK_URL))) {
-                    view.loadUrl("javascript:window.host_renewTokenInfo = () => window.android.renewTokenInfo();");
-                    view.loadUrl("javascript:window.host_login = (url) => window.android.login(url);");
-                    view.loadUrl("javascript:window.host_deeplink = (link)  => window.android.deepLink(link);");
-                    view.loadUrl("javascript:window.host_title = (link)  => window.android.showTitle(link);");
-                    view.loadUrl("javascript:window.host_externalUrl = (url)  => window.android.showExternalUrl(url);");
-                }
-                isRichartMartHome = false;
-                for(String home_url : HOME_URL_FOR_CLOSE){
-                    if(home_url.equals(view.getUrl())){
-                        isRichartMartHome = true;
-                        break;
-                    }
-                }
-                setButtonVisible();
-                super.onProgressChanged(view, newProgress);
-            }
-
-            @Override
-            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
-                if (!isFinished) {
-                    AlertDialog.Builder b = new AlertDialog.Builder(InAppWebViewActivity.this);
-                    b.setTitle("Alert");
-                    b.setMessage(message);
-                    b.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            result.confirm();
-                        }
-                    });
-                    b.setCancelable(false);
-                    b.create().show();
-                } else {
-                    finish();
-                }
-                return true;
-            }
-
-            @Override
-            public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {
-                if (!isFinished) {
-                    AlertDialog.Builder b = new AlertDialog.Builder(InAppWebViewActivity.this);
-                    b.setTitle("Confirm");
-                    b.setMessage(message);
-                    b.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            result.confirm();
-                        }
-                    });
-                    b.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            result.cancel();
-                        }
-                    });
-                    b.create().show();
-                } else {
-                    finish();
-                }
-                return true;
-            }
-
-            @Override
-            public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, final JsPromptResult result) {
-                if (!isFinished) {
-                    final View v = View.inflate(InAppWebViewActivity.this, id_prompt_dialog, null);
-                    ((TextView) v.findViewById(id_prompt_message_text)).setText(message);
-                    ((EditText) v.findViewById(id_prompt_input_field)).setText(defaultValue);
-                    AlertDialog.Builder b = new AlertDialog.Builder(InAppWebViewActivity.this);
-                    b.setTitle("Prompt");
-                    b.setView(v);
-                    b.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            String value = ((EditText) v.findViewById(id_prompt_input_field)).getText().toString();
-                            result.confirm(value);
-                        }
-                    });
-                    b.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            result.cancel();
-                        }
-                    });
-                    b.create().show();
-                } else {
-                    finish();
-                }
-                return true;
-            }
-
-            @Override
-            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {
-                openFileChooser(filePathCallback);
-                return true;
-            }
-
-            @Override
-            public void onReceivedTitle(WebView view, String titleNew) {
-                super.onReceivedTitle(view, titleNew);
-                // title 為空且 非url
-                if (TextUtils.isEmpty(title) && !URLUtil.isValidUrl(titleNew)) {
-                    setTitle(titleNew);
-                }
-            }
-        });
-
-        webView.setWebViewClient(new WebViewClient() {
-
-            @Override
-            public void onPageStarted(WebView view, String url, Bitmap favicon) {
-                currentUrl = url;
-                // 全家頁面需要開啟網頁後觸發此javascript
-                if (type != null && type.equals(TYPE_OPEN_FAMILY_URL) && type.equals(TYPE_OPEN_AC_LINK_URL)) {
-                    view.loadUrl("javascript:window.host_deeplink = (link)  => window.android.deepLink(link);");
-                }
-                super.onPageStarted(view, url, favicon);
-            }
-
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                if (keys != null) {
-                    for(int i=0;i<keys.length;i++) {
-                        if (url.toLowerCase(Locale.ENGLISH).startsWith(keys[i].toLowerCase())) {
-                            Intent intent = new Intent();
-                            intent.putExtra(RESULT_ACTION, RESULT_ACTION_DETECTED_URL);
-                            intent.putExtra(RESULT_DATA, url);
-                            setResult(RESULT_OK, intent);
-                            finish();
-                            return true;
-                        }
-                    }
-                }else if(url.toLowerCase(Locale.ENGLISH).startsWith("intent:")){ // for商周內部另開app時新增
-
-                    Intent intent = null;
-                    try {
-                        intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
-                        String sParam = "tw.com.taishinbank.ccapp";
-
-                        // Verify that the intent will resolve to an activity
-                        if (intent.resolveActivity(getPackageManager()) != null) {
-                            view.getContext().startActivity(intent);
-                        }else{
-                            // no app can handle this intent,so try to search this app in google play store
-                            String[] paramArr = url.split(";");
-                            for(String param:paramArr){
-                                if(param.startsWith("package=")){
-                                    sParam = param.split("package=")[1];
-                                    break;
-                                }
-                            }
-
-                            try{
-                                // Open app with Google Play app
-                                intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id="+sParam));
-                                startActivity(intent);
-                            }catch (android.content.ActivityNotFoundException anfe){
-                                Log.e("InAppWebViewActivity","can't open google play store",anfe);
-                                anfe.printStackTrace();
-                            }
-
-                        }
-                    } catch (URISyntaxException e) {
-                        Log.e("InAppWebViewActivity","open intent url fail",e);
-                        e.printStackTrace();
-                    }
-
-                    return true;
-                } else if(url.contains("RichartLife/download.html") || url.contains("CARDaily/CARDailydownload.html")){
-                    Uri uri = Uri.parse(url);
-                    String[] s = url.split("\\?");
-                    Intent intent = null;
-                    if(s.length > 1){
-                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://wallet.taishinbank.com.tw/CARDaily/CARDailydownload.html?" + s[1]));
-                    } else{
-                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://wallet.taishinbank.com.tw/CARDaily/CARDailydownload.html"));
-                    }
-                    startActivity(intent);
-                    return true;
-                }
-                return super.shouldOverrideUrlLoading(view, url);
-            }
-
-            @Override
-            public void onPageFinished(WebView view, String url) {
-                String certFinger = getCertFinger(view.getCertificate());
-                boolean checkCert=fingerPrintSet.contains(certFinger);
-                if(!checkCert){
-                    Log.d("InAppWebViewActivity","Unknow Certificate!!");
-                }
-                if (type != null && type.equals(TYPE_OPEN_MALL) &&!TextUtils.isEmpty(action) && action.equals("login")) {
-                    String encryptString = tokenInfo;
-                    final String javaScript = "javascript:host_login_callback('"  + encryptString  + "')";
-                    webView.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            webView.loadUrl(javaScript);
-                        }
-                    });
-                }
-                super.onPageFinished(view, url);
-            }
-
-            public String getCertFinger(SslCertificate sslCert){
-                Bundle bundle = SslCertificate.saveState(sslCert);
-                X509Certificate x509Certificate;
-
-                // 404 bundle應該會為空，會造成閃退，初步先這樣改，後續有空可以再調整作法
-                if(bundle == null){
-                    return null;
-                }
-
-                byte[] bytes = bundle.getByteArray("x509-certificate");
-                if (bytes == null) {
-                    x509Certificate = null;
-                } else {
-                    try {
-                        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
-                        Certificate cert = certFactory.generateCertificate(new ByteArrayInputStream(bytes));
-                        x509Certificate = (X509Certificate) cert;
-                    } catch (CertificateException e) {
-                        x509Certificate = null;
-                    }
-                }
-                String certFinger = null;
-                if(x509Certificate != null){
-                    try {
-                        MessageDigest md = MessageDigest.getInstance("SHA1");
-                        byte[] publicKey = md.digest(x509Certificate.getEncoded());
-                        certFinger = byte2HexFormatted(publicKey);
-                    } catch (NoSuchAlgorithmException e1) {
-                        e1.printStackTrace();
-                    } catch (CertificateEncodingException e) {
-                        e.printStackTrace();
-                    }
-                }
-                return certFinger;
-            }
-
-            public String byte2HexFormatted(byte[] arr) {
-                StringBuilder str = new StringBuilder(arr.length * 2);
-                for (int i = 0; i < arr.length; i++) {
-                    String h = Integer.toHexString(arr[i]);
-                    int l = h.length();
-                    if (l == 1) h = "0" + h;
-                    if (l > 2) h = h.substring(l - 2, l);
-                    str.append(h.toUpperCase());
-                    if (i < (arr.length - 1)) str.append(':');
-                }
-                return str.toString();
-            }
-        });
-
-        webView.setDownloadListener(new DownloadListener() {
-            @Override
-            public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {
-                Uri uri = Uri.parse(url);
-                Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-                intent.setDataAndType(Uri.parse(url), getMimeType(url));
-                startActivity(intent);
-                if (webView.canGoBack()) {
-                    webView.goBack();
-                } else {
-                    if (type != null && (type.equals(TYPE_OPEN_URL) || type.equals(TYPE_OPEN_FAMILY_URL) || type.equals(TYPE_OPEN_AC_LINK_URL))) {
-                        finish();
-                    }
-                }
-            }
-        });
-
-        if (!TextUtils.isEmpty(url)) {
-            webView.loadUrl(url);
-        }
-
-        setButtonVisible();
-
-    }
-
-    public static String getMimeType(String url) {
-        try {
-            String type = null;
-            String extension = url.substring(url.lastIndexOf(".") + 1);
-            if (extension != null) {
-                type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
-            }
-            return type;
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    private void openFileChooser(ValueCallback<Uri[]> filePathCallback) {
-        mUploadMessageForAndroid5 = filePathCallback;
-        Intent contentSelectionIntent = new Intent(Intent.ACTION_GET_CONTENT);
-        contentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);
-        contentSelectionIntent.setType("image/*");
-
-        Intent chooserIntent = new Intent(Intent.ACTION_CHOOSER);
-        chooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);
-        chooserIntent.putExtra(Intent.EXTRA_TITLE, "Image Chooser");
-
-        startActivityForResult(chooserIntent, FILE_CHOOSER_RESULT_CODE_FOR_ANDROID_5);
-    }
-
-    @Override
-    public void onBackPressed() {
-        Intent intent = new Intent();
-        if (!TextUtils.isEmpty(type)) {
-            if (type.equals(TYPE_OPEN_URL) || type.equals((TYPE_OPEN_FAMILY_URL)) || type.equals(TYPE_OPEN_AC_LINK_URL)) {
-                intent.putExtra(RESULT_ACTION, RESULT_ACTION_DETECTED_URL);
-            } else if (type.equals(TYPE_OPEN_MALL)) {
-                intent.putExtra(RESULT_ACTION, RESULT_ACTION_NEED_LOGIN);
-            }
-        }
-        setResult(RESULT_OK, intent);
-        super.onBackPressed();
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (type != null && type.equals(TYPE_OPEN_MALL)) {
-            tokenid = null;
-            String encryptString = getEncryptTokenInfo();
-            final String javaScript = "javascript:host_renewTokenInfo_callback('"  + encryptString + "')";
-            webView.post(new Runnable() {
-                @Override
-                public void run() {
-                    webView.loadUrl(javaScript);
-                }
-            });
-        }
-        super.onDestroy();
-    }
-
-    @Override
-    public void finish() {
-        isFinished = true;
-        webView.post(new Runnable() {
-            @Override
-            public void run() {
-                webView.setWebChromeClient(null);
-                webView.setWebViewClient(null);
-            }
-        });
-        super.finish();
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (requestCode == FILE_CHOOSER_RESULT_CODE_FOR_ANDROID_5 && data != null) {
-                Uri result = data.getData();
-                if (null == mUploadMessageForAndroid5) {
-                    return;
-                }
-
-                if (result != null) {
-                    mUploadMessageForAndroid5.onReceiveValue(new Uri[]{result});
-                } else {
-                    mUploadMessageForAndroid5.onReceiveValue(new Uri[]{});
-                }
-
-                mUploadMessageForAndroid5 = null;
-            } else {
-                super.onActivityResult(requestCode, resultCode, data);
-            }
-        } else {
-            super.onActivityResult(requestCode, resultCode, data);
-        }
-
-    }
-
-    private void initToolBar() {
-
-        setSupportActionBar(findViewById(id_toolbar));
-
-        tvTitle = findViewById(id_tvTitle);
-        btnBack = findViewById(id_btnBack);
-        btnForward = findViewById(id_btnForward);
-        btnClose = findViewById(id_btnClose);
-        btnShare = findViewById(id_btnShare);
-
-        // RichartMart 關閉分享功能
-        if(showSharing) {
-            btnShare.setVisibility(View.INVISIBLE);
-        } else {
-            btnShare.setOnClickListener(clickListener);
-        }
-
-        btnBack.setOnClickListener(clickListener);
-        btnForward.setOnClickListener(clickListener);
-        btnClose.setOnClickListener(clickListener);
-
-        setTitle(title);
-
-    }
-
-    private void setTitle(String title) {
-        if (!TextUtils.isEmpty(title)) {
-            tvTitle.setText(title);
-        } else {
-            tvTitle.setText("");
-        }
-    }
-
-    private void setButtonVisible() {
-        try {
-            if (webView != null && webView.canGoBack()) {
-                btnBack.setEnabled(true);
-                btnBack.setAlpha(1f);
-            } else {
-                if (isRichartMartHome) {
-                    btnBack.setEnabled(true);
-                    btnBack.setAlpha(1f);
-                } else {
-                    btnBack.setEnabled(false);
-                    btnBack.setAlpha(0.3f);
-                }
-            }
-
-            if (webView != null && webView.canGoForward()) {
-                btnForward.setEnabled(true);
-                btnForward.setAlpha(1f);
-            } else {
-                btnForward.setEnabled(false);
-                btnForward.setAlpha(0.3f);
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    public class JavaScriptInterface {
-
-        @JavascriptInterface
-        public void login(String url){
-            if (tokenid == null || "null".equals(tokenid)) {
-                Intent intent = new Intent();
-                intent.putExtra(RESULT_DATA, (TextUtils.isEmpty(url) || url.equals("undefined"))?currentUrl:url);
-                intent.putExtra(RESULT_ACTION, RESULT_ACTION_NEED_LOGIN);
-                setResult(RESULT_OK, intent);
-                finish();
-            } else {
-                String encryptString = tokenInfo;
-                final String javaScript = "javascript:host_login_callback('"  + encryptString  + "')";
-                webView.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        webView.loadUrl(javaScript);
-                    }
-                });
-            }
-        }
-
-        @JavascriptInterface
-        public void renewTokenInfo(){
-            String encryptString = tokenInfo;
-            final String javaScript = "javascript:host_renewTokenInfo_callback('"  + encryptString + "')";
-            webView.post(new Runnable() {
-                @Override
-                public void run() {
-                    webView.loadUrl(javaScript);
-                }
-            });
-        }
-
-        @JavascriptInterface
-        public void deepLink(String link){
-            Intent intent = new Intent();
-            intent.putExtra(RESULT_DATA, link);
-            intent.putExtra(RESULT_ACTION, RESULT_ACTION_DEEP_LINK);
-            setResult(RESULT_OK, intent);
-            finish();
-        }
-
-        @JavascriptInterface
-        public void showTitle(String title){
-            runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    setTitle(title);
-                }
-            });
-        }
-
-
-        @JavascriptInterface
-        public void showExternalUrl(String url){
-            try {
-                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-                startActivity(browserIntent);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
-
-    }
-
-    private String getEncryptTokenInfo() {
-        Gson gson = new GsonBuilder().serializeNulls().create();
-        String json = gson.toJson(getTokenInfo());
-        String encryptString = "";
-        try {
-            encryptString = encryptSpecifiedKeyIv(aes_key, aes_iv, json);
-        } catch (GeneralSecurityException e) {
-            e.printStackTrace();
-            encryptString = "";
-        }
-        return encryptString;
-    }
-
-    private TokenInfo getTokenInfo() {
-        TokenInfo tokenInfo = new TokenInfo();
-        tokenInfo.setTokenid("null".equals(tokenid)?null:tokenid);
-        Date currentTime = Calendar.getInstance().getTime();
-        Calendar calendar = Calendar.getInstance();
-        calendar.setTime(currentTime);
-        calendar.add(Calendar.HOUR, 10);
-        tokenInfo.setExpiredtime(dateToIso8601String(calendar.getTime()));
-        tokenInfo.setChannel(channel);
-        tokenInfo.setAppver(appver);
-        tokenInfo.setOs("android");
-        return tokenInfo;
-    }
-
-    private String dateToIso8601String(Date date) {
-        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
-        sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
-        return sdf.format(date);
-    }
-
-    private String encryptSpecifiedKeyIv(final String secretKey, String iv, String sourceData)
-            throws GeneralSecurityException {
-        try {
-            final SecretKeySpec key = generateKey(secretKey);
-
-            byte[] cipherText = encrypt(key, iv.getBytes(), sourceData.getBytes(CHARSET));
-
-            return Base64.encodeToString(cipherText, Base64.NO_WRAP);
-        } catch (UnsupportedEncodingException e) {
-            throw new GeneralSecurityException(e);
-        }
-    }
-
-    private SecretKeySpec generateKey(final String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {
-        byte[] bytes = key.getBytes(CHARSET);
-        return new SecretKeySpec(bytes, "AES");
-    }
-
-    private byte[] encrypt(final SecretKeySpec key, final byte[] iv, final byte[] message)
-            throws GeneralSecurityException {
-        final Cipher cipher = Cipher.getInstance(AES_MODE);
-        IvParameterSpec ivSpec = new IvParameterSpec(iv);
-        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);
-        return cipher.doFinal(message);
-    }
-
-}
\ No newline at end of file
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/InAppWebViewPlugin.java b/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/InAppWebViewPlugin.java
deleted file mode 100755
index 948111089..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/InAppWebViewPlugin.java
+++ /dev/null
@@ -1,208 +0,0 @@
-package com.TSBCardApp.InAppWebViewPlugin;
-
-import android.content.Context;
-import android.content.Intent;
-import android.text.TextUtils;
-
-import org.apache.cordova.CordovaPlugin;
-import org.apache.cordova.CallbackContext;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * This class echoes a string called from JavaScript.
- */
-public class InAppWebViewPlugin extends CordovaPlugin {
-
-    final static int reqCode = 1;
-    final static int RESULT_OK = -1;
-
-    CallbackContext callbackContext;
-
-    @Override
-    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
-        this.callbackContext = callbackContext;
-        try {
-            if (action.equals("openUrl")) {
-                JSONObject jsonObject = (JSONObject) args.get(0);
-                String title = jsonObject.getString("title");
-                String url = jsonObject.getString("url");
-                JSONArray keysArray = jsonObject.getJSONArray("keys");
-                Boolean showSharing = jsonObject.getBoolean("showSharing");
-
-                String[] keys = null;
-                if (keysArray != null && keysArray.length() > 0) {
-                    int size = keysArray.length();
-                    keys = new String[size];
-                    for(int i = 0; i < size; i++){
-                        keys[i] = keysArray.getString(i);
-                    }
-                }
-                this.openWebUrl(title, url, keys, callbackContext, showSharing);
-                return true;
-            } else if (action.equals("openFamilyUrl")) {
-                JSONObject jsonObject = (JSONObject) args.get(0);
-                String title = jsonObject.getString("title");
-                String url = jsonObject.getString("url");
-                JSONArray keysArray = jsonObject.getJSONArray("keys");
-
-                String[] keys = null;
-                if (keysArray != null && keysArray.length() > 0) {
-                    int size = keysArray.length();
-                    keys = new String[size];
-                    for (int i = 0; i < size; i++) {
-                        keys[i] = keysArray.getString(i);
-                    }
-                }
-                this.openFamilyUrl(title, url, keys, callbackContext);
-                return true;
-            } else if (action.equals("openAcLinkWebView")) {
-                JSONObject jsonObject = (JSONObject) args.get(0);
-                String title = jsonObject.getString("title");
-                String url = jsonObject.getString("url");
-                JSONArray keysArray = jsonObject.getJSONArray("keys");
-
-                String[] keys = null;
-                if (keysArray != null && keysArray.length() > 0) {
-                    int size = keysArray.length();
-                    keys = new String[size];
-                    for (int i = 0; i < size; i++) {
-                        keys[i] = keysArray.getString(i);
-                    }
-                }
-                this.openAcLinkWebView(title, url, keys, callbackContext);
-                return true;
-            } else if (action.equals("openMall")) {
-                JSONObject jsonObject = (JSONObject) args.get(0);
-                String title = jsonObject.has("title")?jsonObject.getString("title"):"";
-                String url = jsonObject.has("url")?jsonObject.getString("url"):"";
-                String tokenid = jsonObject.has("tokenid")?jsonObject.getString("tokenid"):"";
-                String channel = jsonObject.has("channel")?jsonObject.getString("channel"):"";
-                String appver = jsonObject.has("appver")?jsonObject.getString("appver"):"";
-                String fromAction = jsonObject.has("action")?jsonObject.getString("action"):"";
-                String tokenInfo = jsonObject.has("tokenInfo")?jsonObject.getString("tokenInfo"):"";
-                this.openMallUrl(title, url, tokenid, channel, appver, fromAction, tokenInfo, callbackContext);
-                return true;
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        
-        return false;
-    }
-
-    private void openWebUrl(String title, String url, String[] keys, CallbackContext callbackContext, Boolean showSharing) {
-        if (url != null && url.length() > 0) {
-            Context context = cordova.getActivity().getApplicationContext();
-            Intent intent = new Intent(context, InAppWebViewActivity.class);
-            intent.putExtra(InAppWebViewActivity.KEY_TITLE, title);
-            intent.putExtra(InAppWebViewActivity.KEY_URL, url);
-            intent.putExtra(InAppWebViewActivity.KEY_TYPE, InAppWebViewActivity.TYPE_OPEN_URL);
-            intent.putExtra(InAppWebViewActivity.KEY_SHOW_SHARING, showSharing);
-            if (keys != null) {
-                intent.putExtra(InAppWebViewActivity.KEY_KEYS, keys);
-            }
-            this.cordova.startActivityForResult(this, intent, reqCode);
-        } else {
-            if (callbackContext != null) {
-                callbackContext.error("Expected one non-empty string argument.");
-            }
-        }
-    }
-
-    private void openFamilyUrl(String title, String url, String[] keys, CallbackContext callbackContext) {
-        if (url != null && url.length() > 0) {
-            Context context = cordova.getActivity().getApplicationContext();
-            Intent intent = new Intent(context, InAppWebViewActivity.class);
-            intent.putExtra(InAppWebViewActivity.KEY_TITLE, title);
-            intent.putExtra(InAppWebViewActivity.KEY_URL, url);
-            intent.putExtra(InAppWebViewActivity.KEY_TYPE, InAppWebViewActivity.TYPE_OPEN_FAMILY_URL);
-            if (keys != null) {
-                intent.putExtra(InAppWebViewActivity.KEY_KEYS, keys);
-            }
-            this.cordova.startActivityForResult(this, intent, reqCode);
-        } else {
-            if (callbackContext != null) {
-                callbackContext.error("Expected one non-empty string argument.");
-            }
-        }
-    }
-
-    private void openAcLinkWebView(String title, String url, String[] keys, CallbackContext callbackContext) {
-        if (url != null && url.length() > 0) {
-            Context context = cordova.getActivity().getApplicationContext();
-            Intent intent = new Intent(context, InAppWebViewActivity.class);
-            intent.putExtra(InAppWebViewActivity.KEY_TITLE, title);
-            intent.putExtra(InAppWebViewActivity.KEY_URL, url);
-            intent.putExtra(InAppWebViewActivity.KEY_TYPE, InAppWebViewActivity.TYPE_OPEN_AC_LINK_URL);
-            if (keys != null) {
-                intent.putExtra(InAppWebViewActivity.KEY_KEYS, keys);
-            }
-            this.cordova.startActivityForResult(this, intent, reqCode);
-        } else {
-            if (callbackContext != null) {
-                callbackContext.error("Expected one non-empty string argument.");
-            }
-        }
-    }
-
-    private void openMallUrl(String title, String url, String tokenid ,String channel ,String appver, String fromAction, String tokenInfo, CallbackContext callbackContext) {
-        if (url != null && url.length() > 0) {
-            Context context = cordova.getActivity().getApplicationContext();
-            Intent intent = new Intent(context, InAppWebViewActivity.class);
-            intent.putExtra(InAppWebViewActivity.KEY_TITLE, title);
-            intent.putExtra(InAppWebViewActivity.KEY_URL, url);
-            intent.putExtra(InAppWebViewActivity.KEY_TYPE, InAppWebViewActivity.TYPE_OPEN_MALL);
-            intent.putExtra(InAppWebViewActivity.KEY_TOKENID, tokenid);
-            intent.putExtra(InAppWebViewActivity.KEY_CHANNEL, channel);
-            intent.putExtra(InAppWebViewActivity.KEY_APPVER, appver);
-            intent.putExtra(InAppWebViewActivity.KEY_ACTION, fromAction);
-            intent.putExtra(InAppWebViewActivity.KEY_TOKENINFO, tokenInfo);
-            intent.putExtra(InAppWebViewActivity.KEY_SHOW_SHARING, true);
-
-            this.cordova.startActivityForResult(this, intent, reqCode);
-        } else {
-            if (callbackContext != null) {
-                callbackContext.error("Expected one non-empty string argument.");
-            }
-        }
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
-        if (resultCode == RESULT_OK) {
-            if(requestCode==reqCode) {
-                if (callbackContext != null && intent != null){
-                    String data = intent.hasExtra(InAppWebViewActivity.RESULT_DATA)?intent.getStringExtra(InAppWebViewActivity.RESULT_DATA):"";
-                    String action = intent.hasExtra(InAppWebViewActivity.RESULT_ACTION)?intent.getStringExtra(InAppWebViewActivity.RESULT_ACTION):"";
-                    if (action.equals(InAppWebViewActivity.RESULT_ACTION_DETECTED_URL)) {
-                        if (!TextUtils.isEmpty(data)) {
-                            callbackContext.success(data);
-                        } else {
-                            callbackContext.success("exit");
-                        }
-                        return;
-                    } else if (action.equals(InAppWebViewActivity.RESULT_ACTION_NEED_LOGIN) || action.equals(InAppWebViewActivity.RESULT_ACTION_DEEP_LINK)) {
-                        JSONObject jsonObject = new JSONObject();
-                        try {
-                            if (!TextUtils.isEmpty(data)) {
-                                jsonObject.put("url", data);
-                                jsonObject.put("action", action);
-                            } else {
-                                jsonObject.put("url", "");
-                                jsonObject.put("action", "exit");
-                            }
-                        } catch (JSONException e) {
-                            e.printStackTrace();
-                        }
-                        callbackContext.success(jsonObject);
-                        return;
-                    }
-                }
-            }
-        }
-    }
-
-}
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/layout/prompt_dialog.xml b/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/layout/prompt_dialog.xml
deleted file mode 100755
index 306bec2f7..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/layout/prompt_dialog.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical">
-
-    <TextView
-        android:id="@+id/prompt_message_text"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content" />
-
-    <EditText
-        android:id="@+id/prompt_input_field"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:minWidth="250dp"
-        android:selectAllOnFocus="true"
-        android:scrollHorizontally="true"/>
-        
-</LinearLayout>
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.h b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.h
deleted file mode 100755
index 039aae775..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.h
+++ /dev/null
@@ -1,27 +0,0 @@
-//
-//  BlankViewController.h
-//  HelloCordova
-//
-//  Created by 李柏軒 on 2019/12/2.
-//
-
-
-#import "WKWebViewController.h"
-
-@interface BlankViewController : UIViewController
-
-@property (strong, nonatomic) NSString *titleString;
-@property (strong, nonatomic) NSString *url;  //要顯示的網頁連結
-@property (strong, nonatomic) NSString *fromWhatPage;  //來自什麼頁面的ID
-@property (strong, nonatomic) NSArray *keysArray; //關鍵字陣列
-
-@property (strong, nonatomic) NSString *tokenid;
-@property (strong, nonatomic) NSString *channel;
-@property (strong, nonatomic) NSString *appver;
-@property (strong, nonatomic) NSString *action;
-@property (strong, nonatomic) NSString *tokenInfo;
-@property (assign, nonatomic) BOOL showSharing; // 是否為RichartMart
-
-@property (copy, nonatomic) WebViewCallback block;
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.m b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.m
deleted file mode 100755
index 3eb904bc2..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.m
+++ /dev/null
@@ -1,62 +0,0 @@
-//
-//  BlankViewController.m
-//  HelloCordova
-//
-//  Created by 李柏軒 on 2019/12/2.
-//
-
-#import <Foundation/Foundation.h>
-#import "BlankViewController.h"
-
-
-@interface BlankViewController() {
-    BOOL hasOpened;
-}
-
-@end
-
-@implementation BlankViewController
-
--(id)init {
-     if (self = [super init])  {
-       self.showSharing = NO;
-     }
-     return self;
-}
-
-- (void)viewDidAppear:(BOOL)animated{
-    
-    if(!hasOpened){
-        
-        hasOpened = YES;
-    
-        WKWebViewController *wkWebViewController = [[WKWebViewController alloc] initWithNibName:@"WKWebViewController" bundle:nil];
-
-        wkWebViewController.titleString = self.titleString;
-        wkWebViewController.url = self.url;
-        wkWebViewController.tokenid = self.tokenid;
-        wkWebViewController.channel = self.channel;
-        wkWebViewController.appver = self.appver;
-        wkWebViewController.action = self.action;
-        wkWebViewController.tokenInfo = self.tokenInfo;
-        wkWebViewController.showSharing = self.showSharing;
-               
-        wkWebViewController.modalPresentationStyle = UIModalPresentationFullScreen;
-
-        wkWebViewController.block = ^(NSString *data, NSString *action) {
-            self.block(data, action);
-        };
-        
-        [self.navigationController pushViewController:wkWebViewController animated:NO];
-        
-    }else{
-        
-        hasOpened = NO;
-        [self dismissViewControllerAnimated:NO completion:^{
-            
-        }];
-        
-    }
-}
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.xib b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.xib
deleted file mode 100755
index d77b18cea..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/BlankViewController.xib
+++ /dev/null
@@ -1,37 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="15505" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES">
-    <device id="retina6_1" orientation="portrait" appearance="light"/>
-    <dependencies>
-        <deployment identifier="iOS"/>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="15510"/>
-        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
-        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
-    </dependencies>
-    <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="BlankViewController">
-            <connections>
-                <outlet property="view" destination="iN0-l3-epB" id="c2Q-HO-jWv"/>
-            </connections>
-        </placeholder>
-        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
-        <view contentMode="scaleToFill" id="iN0-l3-epB">
-            <rect key="frame" x="0.0" y="0.0" width="414" height="896"/>
-            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
-            <subviews>
-                <label hidden="YES" opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="關閉頁面中..." textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="SEj-X5-LQ9">
-                    <rect key="frame" x="136.5" y="438.5" width="141" height="29"/>
-                    <fontDescription key="fontDescription" type="system" pointSize="24"/>
-                    <color key="textColor" cocoaTouchSystemColor="groupTableViewBackgroundColor"/>
-                    <nil key="highlightedColor"/>
-                </label>
-            </subviews>
-            <color key="backgroundColor" white="0.0" alpha="0.0" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
-            <constraints>
-                <constraint firstItem="SEj-X5-LQ9" firstAttribute="centerX" secondItem="vUN-kp-3ea" secondAttribute="centerX" id="erc-Mt-As9"/>
-                <constraint firstItem="SEj-X5-LQ9" firstAttribute="centerY" secondItem="vUN-kp-3ea" secondAttribute="centerY" id="s5v-5Z-71f"/>
-            </constraints>
-            <viewLayoutGuide key="safeArea" id="vUN-kp-3ea"/>
-            <point key="canvasLocation" x="132" y="127"/>
-        </view>
-    </objects>
-</document>
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CertObj.h b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CertObj.h
deleted file mode 100755
index 2fe43f910..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CertObj.h
+++ /dev/null
@@ -1,11 +0,0 @@
-//定義以 @interface 起頭,後接類別名稱
-//冒號表示繼承, NSObject 是 Objective-C 中所有物件的起源
-@interface CertObj : NSObject
-
-@property (weak, nonatomic) NSString *name;
-@property (weak, nonatomic) NSString *dueDate;
-@property (weak, nonatomic) NSString *url;
-@property (weak, nonatomic) NSString *fp;
-
-//結尾一定要有@end
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CertObj.m b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CertObj.m
deleted file mode 100755
index 6c15b7633..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CertObj.m
+++ /dev/null
@@ -1,9 +0,0 @@
-#import "CertObj.h"
-
-
-
-@implementation CertObj
-
-@end
-
-
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/InAppWebViewPlugin.m b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/InAppWebViewPlugin.m
deleted file mode 100755
index de2ab46ec..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/InAppWebViewPlugin.m
+++ /dev/null
@@ -1,168 +0,0 @@
-/********* InAppWebViewPlugin.m Cordova Plugin Implementation *******/
-
-#import <Cordova/CDV.h>
-#import "WKWebViewController.h"
-#import "BlankViewController.h"
-#import "MyNavigationController.h"
-
-@interface InAppWebViewPlugin : CDVPlugin {
-  // Member variables go here.
-}
-
-- (void)openUrl:(CDVInvokedUrlCommand*)command;
-@end
-
-@implementation InAppWebViewPlugin
-
-
-- (void)openUrl:(CDVInvokedUrlCommand*)command
-{
-
-    __block CDVPluginResult* pluginResult = nil;
-    NSMutableDictionary* orgKeyValue = [command.arguments objectAtIndex:0];
-    
-    NSString *url = [orgKeyValue objectForKey:@"url"];
-    
-    if(url != nil && url.length > 0){
-        UIViewController *fromVC = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
-        BlankViewController *blankViewController = [[BlankViewController alloc] initWithNibName:@"BlankViewController" bundle:nil];
-        blankViewController.titleString = [orgKeyValue objectForKey:@"title"];
-        blankViewController.url = [orgKeyValue objectForKey:@"url"];
-        blankViewController.keysArray = [orgKeyValue objectForKey:@"keys"];
-        blankViewController.modalPresentationStyle = UIModalPresentationFullScreen;
-        blankViewController.showSharing = [[orgKeyValue objectForKey:@"showSharing"] boolValue];
-        
-        NSLog(@"openurl send parameters => titleString:%@, url:%@, keysArray:%@", [orgKeyValue objectForKey:@"title"], [orgKeyValue objectForKey:@"url"], [orgKeyValue objectForKey:@"keys"]);
-        
-        blankViewController.block = ^(NSString* data, NSString* action){
-            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:@{@"url":data}];
-            [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-          NSLog(@"openurl callback url:%@, action %@", data, action);
-        };
-        
-        MyNavigationController *nav = [[MyNavigationController alloc] initWithRootViewController:blankViewController];
-        nav.modalPresentationStyle = UIModalPresentationFullScreen;
-        
-        [fromVC presentViewController:nav animated:NO completion:nil];
-    }else{
-        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@"Expected one non-empty string argument."];
-        [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-    }
-    
-}
-
-- (void)openFamilyUrl:(CDVInvokedUrlCommand*)command
-{
-
-    __block CDVPluginResult* pluginResult = nil;
-    NSMutableDictionary* orgKeyValue = [command.arguments objectAtIndex:0];
-    
-    NSString *url = [orgKeyValue objectForKey:@"url"];
-    
-    if(url != nil && url.length > 0){
-        UIViewController *fromVC = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
-        BlankViewController *blankViewController = [[BlankViewController alloc] initWithNibName:@"BlankViewController" bundle:nil];
-        blankViewController.titleString = [orgKeyValue objectForKey:@"title"];
-        blankViewController.url = [orgKeyValue objectForKey:@"url"];
-        blankViewController.keysArray = [orgKeyValue objectForKey:@"keys"];
-        blankViewController.modalPresentationStyle = UIModalPresentationFullScreen;
-        
-        NSLog(@"openFamilyurl send parameters => titleString:%@, url:%@, keysArray:%@", [orgKeyValue objectForKey:@"title"], [orgKeyValue objectForKey:@"url"], [orgKeyValue objectForKey:@"keys"]);
-        
-        blankViewController.block = ^(NSString* data, NSString* action){
-            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:@{@"url":data}];
-            [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-          NSLog(@"openFamilyurl callback url:%@, action %@", data, action);
-        };
-        
-        MyNavigationController *nav = [[MyNavigationController alloc] initWithRootViewController:blankViewController];
-        nav.modalPresentationStyle = UIModalPresentationFullScreen;
-        
-        [fromVC presentViewController:nav animated:NO completion:nil];
-    }else{
-        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@"Expected one non-empty string argument."];
-        [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-    }
-    
-}
-
-- (void)openAcLinkWebView:(CDVInvokedUrlCommand*)command
-{
-
-    __block CDVPluginResult* pluginResult = nil;
-    NSMutableDictionary* orgKeyValue = [command.arguments objectAtIndex:0];
-    
-    NSString *url = [orgKeyValue objectForKey:@"url"];
-    
-    if(url != nil && url.length > 0){
-        UIViewController *fromVC = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
-        BlankViewController *blankViewController = [[BlankViewController alloc] initWithNibName:@"BlankViewController" bundle:nil];
-        blankViewController.titleString = [orgKeyValue objectForKey:@"title"];
-        blankViewController.url = [orgKeyValue objectForKey:@"url"];
-        blankViewController.keysArray = [orgKeyValue objectForKey:@"keys"];
-        blankViewController.modalPresentationStyle = UIModalPresentationFullScreen;
-        
-        NSLog(@"openAcLinkWebView send parameters => titleString:%@, url:%@, keysArray:%@", [orgKeyValue objectForKey:@"title"], [orgKeyValue objectForKey:@"url"], [orgKeyValue objectForKey:@"keys"]);
-        
-        blankViewController.block = ^(NSString* data, NSString* action){
-            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:@{@"url":data}];
-            [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-          NSLog(@"openAcLinkWebView callback url:%@, action %@", data, action);
-        };
-        
-        MyNavigationController *nav = [[MyNavigationController alloc] initWithRootViewController:blankViewController];
-        nav.modalPresentationStyle = UIModalPresentationFullScreen;
-        
-        [fromVC presentViewController:nav animated:NO completion:nil];
-    }else{
-        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@"Expected one non-empty string argument."];
-        [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-    }
-    
-}
-
--(void)openMall:(CDVInvokedUrlCommand*)command
-{
-    __block CDVPluginResult* pluginResult = nil;
-    NSMutableDictionary* orgKeyValue = [command.arguments objectAtIndex:0];
-
-    NSString *url = [orgKeyValue objectForKey:@"url"];
-    
-    if(url != nil && url.length > 0){
-        UIViewController *fromVC = [[[[UIApplication sharedApplication] delegate] window] rootViewController];
-        BlankViewController *blankViewController = [[BlankViewController alloc] initWithNibName:@"BlankViewController" bundle:nil];
-
-        blankViewController.titleString = [orgKeyValue objectForKey:@"title"];
-        blankViewController.url = [orgKeyValue objectForKey:@"url"];
-        blankViewController.tokenid = [orgKeyValue objectForKey:@"tokenid"];
-        blankViewController.channel = [orgKeyValue objectForKey:@"channel"];
-        blankViewController.appver = [orgKeyValue objectForKey:@"appver"];
-        blankViewController.action = [orgKeyValue objectForKey:@"action"];
-        blankViewController.tokenInfo = [orgKeyValue objectForKey:@"tokenInfo"];
-        blankViewController.showSharing = YES;
-        
-        NSLog(@"openMall send parameters => title:%@, url:%@, tokenid:%@, channel:%@, appver:%@,  action:%@, tokenInfo:%@", [orgKeyValue objectForKey:@"title"], [orgKeyValue objectForKey:@"url"], [orgKeyValue objectForKey:@"tokenid"], [orgKeyValue objectForKey:@"channel"], [orgKeyValue objectForKey:@"appver"], [orgKeyValue objectForKey:@"action"], [orgKeyValue objectForKey:@"tokenInfo"]);
-        
-        blankViewController.modalPresentationStyle = UIModalPresentationFullScreen;
-
-        blankViewController.block = ^(NSString* data, NSString* action){
-    
-            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:@{@"url":data, @"action":action}];
-        
-            [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-            NSLog(@"openMall callback url:%@, action %@", data, action);
-           };
-        
-        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:blankViewController];
-        nav.modalPresentationStyle = UIModalPresentationFullScreen;
-        
-        [fromVC presentViewController:nav animated:NO completion:nil];
-    }else{
-        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@"Expected one non-empty string argument."];
-        [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
-    }
-    
-
-}
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/MyNavigationController.h b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/MyNavigationController.h
deleted file mode 100755
index 1c8fb3b48..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/MyNavigationController.h
+++ /dev/null
@@ -1,13 +0,0 @@
-//
-//  MyNavigationController.h
-//  HelloCordova
-//
-//  Created by 李柏軒 on 2020/1/8.
-//
-
-
-@interface MyNavigationController : UINavigationController
-
-
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/MyNavigationController.m b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/MyNavigationController.m
deleted file mode 100755
index a6b3327ff..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/MyNavigationController.m
+++ /dev/null
@@ -1,35 +0,0 @@
-//
-//  MyNavigationController.m
-//  HelloCordova
-//
-//  Created by 李柏軒 on 2020/1/8.
-//
-
-#import <Foundation/Foundation.h>
-#import "MyNavigationController.h"
-
-@implementation MyNavigationController
-
-- (NSUInteger)supportedInterfaceOrientations
-{
-    if([self.topViewController respondsToSelector:@selector(supportedInterfaceOrientationsForThisContorller)])
-    {
-        return(NSInteger)[self.topViewController performSelector:@selector(supportedInterfaceOrientationsForThisContorller) withObject:nil];
-    }
-    return UIInterfaceOrientationPortrait;
-}
-
-- (BOOL)shouldAutorotate
-{
-    if([self.visibleViewController respondsToSelector:@selector(shouldAutorotateNow)])
-    {
-        BOOL autoRotate = (BOOL)[self.visibleViewController
-                            performSelector:@selector(shouldAutorotateNow)
-                            withObject:nil];
-        return autoRotate;
-
-    }
-    return NO;
-}
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.h b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.h
deleted file mode 100755
index 618e007f3..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.h
+++ /dev/null
@@ -1,52 +0,0 @@
-//
-//  WKWebViewController.h
-//  TSBCardAppTSBCardAppIphone
-//
-//  Created by 李柏軒 on 2019/9/16.
-//
-
-
-typedef void (^WebViewCallback)(NSString * data, NSString * action);
-
-static NSString *RESULT_ACTION = @"resultAction";
-static NSString *RESULT_ACTION_DETECTED_URL = @"detectedUrl";
-static NSString *RESULT_ACTION_NEED_LOGIN = @"needLogin";
-static NSString *RESULT_ACTION_DEEP_LINK = @"deepLink";
-static NSString *RESULT_ACTION_EXIT = @"exit";
-static NSString *RESULT_DATA = @"resultData";
-
-
-@interface WKWebViewController : UIViewController
-
-
-@property (weak, nonatomic) IBOutlet UIView *webviewContainerView;
-@property (weak, nonatomic) IBOutlet UIImageView *backImageView;
-@property (weak, nonatomic) IBOutlet UIButton *backButton;
-@property (weak, nonatomic) IBOutlet UIImageView *forwardImageView;
-@property (weak, nonatomic) IBOutlet UIButton *forwardButton;
-@property (weak, nonatomic) IBOutlet UIButton *closeButton;
-@property (weak, nonatomic) IBOutlet UIImageView *closseImageView;
-@property (weak, nonatomic) IBOutlet UIButton *shareButton;
-@property (weak, nonatomic) IBOutlet UIImageView *shareImageView;
-@property (weak, nonatomic) IBOutlet UILabel *titleLabel;
-
-
-@property (strong, nonatomic) NSString *titleString;
-@property (strong, nonatomic) NSString *url;  //要顯示的網頁連結
-@property (strong, nonatomic) NSString *fromWhatPage;  //來自什麼頁面的ID
-@property (strong, nonatomic) NSArray *keysArray; //關鍵字陣列
-@property (assign, nonatomic) BOOL isRichartMartHome; // RM首頁 WebView按鈕新增特殊功能
-@property (assign, nonatomic) BOOL showSharing; // RM頁面
-
-@property (strong, nonatomic) NSString *tokenid;
-@property (strong, nonatomic) NSString *channel;
-@property (strong, nonatomic) NSString *appver;
-@property (strong, nonatomic) NSString *action;
-@property (strong, nonatomic) NSString *tokenInfo;
-
-@property (copy, nonatomic) WebViewCallback block;
-
--(void) closeWKWebView;
-
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.m b/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.m
deleted file mode 100755
index 3584301ff..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.m
+++ /dev/null
@@ -1,812 +0,0 @@
-//
-//  WKWebViewController.m
-//  TSBCardAppTSBCardAppIphone
-//
-//  Created by 李柏軒 on 2019/9/16.
-//
-
-#import <Foundation/Foundation.h>
-#import <CommonCrypto/CommonCryptor.h>
-#import "WKWebViewController.h"
-#import "CertObj.h"
-#import <CommonCrypto/CommonDigest.h>
-#import <WebKit/WebKit.h>
-#import "CustomUIAlertController.h"
-
-static NSString* key = @"f54d61b111f65f6282f7a868ee8884cb";
-static NSString* iv = @"6054670480370677";
-static NSString* appStore = @"apps.apple.com"; // appStore外開連結的domain
-static NSString* linePay = @"web-pay.line.me"; // Line外開連結的domain
-static NSArray* homeUrlForClose = nil;
-
-
-
-@interface WKWebViewController()<WKUIDelegate,WKNavigationDelegate,WKScriptMessageHandler,UINavigationControllerDelegate>
-{
-    WKWebView *webView;
-    BOOL alreadySet;
-    
-    NSString *pastPageURL; //前一頁的URL
-    int totalPastPage; //目前總共經過了幾頁
-    int nowPosition; //目前在那一頁的位置
-    BOOL isGoingForward; //點擊forwardButton
-    BOOL isGoingBack; //點擊backButton
-    int backAndForwardCount; //統計退回和前進的次數
-    
-    bool isClosingPage;
-}
-@end
-
-
-@implementation WKWebViewController
-
-//MARK: - life cycle
-
-
-- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion{
-    
-    if(self.presentedViewController){
-        [super dismissViewControllerAnimated:flag completion:completion];
-    }
-    
-}
-
-- (void)viewDidLoad{
-    homeUrlForClose = [NSArray arrayWithObjects: @"https://ktc.i-buy88.com/", @"https://uat.ktc.i-buy88.com/", nil];
-    [self initData];
-    [self initLayout];
-
-}
-
-- (void)viewDidLayoutSubviews{
-          NSLog(@"viewDidLayoutSubviews");
-    if(!alreadySet){
-    
-        alreadySet = YES;
-        
-        [[self navigationController] setNavigationBarHidden:YES animated:NO];
-       
-        WKPreferences *preference = [[WKPreferences alloc] init];
-        preference.javaScriptEnabled = YES;
-        preference.javaScriptCanOpenWindowsAutomatically = YES;
-       
-        NSString *jsOne = @"function host_login(link){ window.webkit.messageHandlers.host_login_interface.postMessage(link); } ";
-        NSString *jsTwo = @"function host_renewTokenInfo(){ window.webkit.messageHandlers.host_renewTokenInfo_interface.postMessage(''); }";
-        NSString *jsThree = @"function host_deeplink(link){ window.webkit.messageHandlers.host_deeplink_interface.postMessage(link); }";
-        NSString *jsFour = @"function host_title(link){ window.webkit.messageHandlers.host_title_interface.postMessage(link); }";
-        NSString *jsFive = @"function host_externalUrl(link){ window.webkit.messageHandlers.host_externalUrl_interface.postMessage(link); }";
-        
-        WKUserScript *scriptOne = [[WKUserScript alloc] initWithSource:jsOne injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
-        WKUserScript *scriptTwo = [[WKUserScript alloc] initWithSource:jsTwo injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
-        WKUserScript *scriptThree = [[WKUserScript alloc] initWithSource:jsThree injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
-        WKUserScript *scriptFour = [[WKUserScript alloc] initWithSource:jsFour injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
-        WKUserScript *scriptFive = [[WKUserScript alloc] initWithSource:jsFive injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
-       
-        WKWebViewConfiguration *webViewConfiguration = [[WKWebViewConfiguration alloc] init];
-        
-        [webViewConfiguration.userContentController addScriptMessageHandler:self name:@"host_login_interface"];
-        [webViewConfiguration.userContentController addScriptMessageHandler:self name:@"host_renewTokenInfo_interface"];
-        [webViewConfiguration.userContentController addScriptMessageHandler:self name:@"host_deeplink_interface"];
-        [webViewConfiguration.userContentController addScriptMessageHandler:self name:@"host_title_interface"];
-        [webViewConfiguration.userContentController addScriptMessageHandler:self name:@"host_externalUrl_interface"];
-        
-        [webViewConfiguration.userContentController addUserScript:scriptOne];
-        [webViewConfiguration.userContentController addUserScript:scriptTwo];
-        [webViewConfiguration.userContentController addUserScript:scriptThree];
-        [webViewConfiguration.userContentController addUserScript:scriptFour];
-        [webViewConfiguration.userContentController addUserScript:scriptFive];
-        
-        CGFloat wkh;
-        CGFloat wkw;
-        if (@available(iOS 11.0, *)) {
-            wkh = self.webviewContainerView.safeAreaLayoutGuide.layoutFrame.size.height;
-            wkw = self.webviewContainerView.safeAreaLayoutGuide.layoutFrame.size.width;
-        } else {
-            wkh = self.webviewContainerView.frame.size.height;
-            wkw = self.webviewContainerView.frame.size.width;
-        }
-        
-        webViewConfiguration.preferences = preference;
-        
-        webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 0, wkw, wkh) configuration:webViewConfiguration];
-        webView.backgroundColor = [UIColor colorWithRed:244/255.0 green:244/255.0 blue:244/255.0 alpha:1];
-
-        //禁止WKWebview計算內邊距,使WKWebview和WKContentView同樣的展示區域
-        if (@available(iOS 11.0, *)) {
-            webView.scrollView.contentInsetAdjustmentBehavior =     UIScrollViewContentInsetAdjustmentNever;
-        }
-
-        [webView setOpaque:NO];
-        [self.webviewContainerView addSubview:webView];
-       
-        webView.navigationDelegate = self;
-        webView.UIDelegate = self;
-        
-        [webView addObserver:self forKeyPath:@"title" options:NSKeyValueObservingOptionNew context:NULL];
-        [webView addObserver:self forKeyPath:@"URL" options:NSKeyValueObservingOptionNew context:NULL];
-        
-        
-        
-        NSSet *websiteDataTypes;
-        
-        if (@available(iOS 11.3, *)) {
-            websiteDataTypes = [NSSet setWithArray:@[   WKWebsiteDataTypeDiskCache,
-                                                        WKWebsiteDataTypeOfflineWebApplicationCache,
-                                                        WKWebsiteDataTypeMemoryCache,
-                                                        // WKWebsiteDataTypeLocalStorage,
-                                                        WKWebsiteDataTypeCookies,
-                                                        WKWebsiteDataTypeSessionStorage,
-                                                        WKWebsiteDataTypeIndexedDBDatabases,
-                                                        WKWebsiteDataTypeWebSQLDatabases,
-                                                        WKWebsiteDataTypeFetchCache, //(iOS 11.3, *)
-                                                        WKWebsiteDataTypeServiceWorkerRegistrations, //(iOS 11.3, *)
-                                ]];
-        } else {
-            // Fallback on earlier versions
-            websiteDataTypes = [NSSet setWithArray:@[   WKWebsiteDataTypeDiskCache,
-                                                               WKWebsiteDataTypeOfflineWebApplicationCache,
-                                                               WKWebsiteDataTypeMemoryCache,
-                                                            //    WKWebsiteDataTypeLocalStorage,
-                                                               WKWebsiteDataTypeCookies,
-                                                               WKWebsiteDataTypeSessionStorage,
-                                                               WKWebsiteDataTypeIndexedDBDatabases,
-                                                               WKWebsiteDataTypeWebSQLDatabases,
-                                       ]];
-        }
-        
-        NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0];
-        // Execute
-        // 這裡會將websiteDataTypes裡提到的暫存都清除掉
-        [[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^{
-            //done
-            [webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:self.url]]];
-        }];
-        
-        
-        
-    }
-}
-
-
-
-- (void)viewWillAppear:(BOOL)animated{
-    if(webView != nil){
-        [webView addObserver:self forKeyPath:@"title" options:NSKeyValueObservingOptionNew context:NULL];
-    }
-}
-
-
-//-(void)viewDidDisappear:(BOOL)animated{
-//    [webView removeObserver:self forKeyPath:@"title"];
-//
-//      [webView evaluateJavaScript:@"host_logout()" completionHandler:^(id _Nullable response, NSError * _Nullable error) {
-//                if(error != nil){
-//                     NSLog(@"value: %@ error: %@", response, error);
-//                 }
-//      }];
-//}
-
-- (void)viewWillDisappear:(BOOL)animated{
-    [webView removeObserver:self forKeyPath:@"title"];
-
-    if(isClosingPage){
-        NSString *parameter = [NSString stringWithFormat:@"host_renewTokenInfo_callback('%@')", self.tokenInfo];
-               [webView evaluateJavaScript:parameter completionHandler:^(id _Nullable response, NSError * _Nullable error) {
-                         if(error != nil){
-                              NSLog(@"value: %@ error: %@", response, error);
-                          }
-        }];
-    }
-     
-}
-
-//KVO 去監測WKWebview的網頁標題
--(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context{
-     if ([keyPath isEqualToString:@"title"]) {
-         if (object == webView) {
-             if (self.titleLabel.text == nil || [@"" isEqualToString: self.titleLabel.text]) {
-                 self.titleLabel.text = webView.title;
-             }
-         }
-      }
-     else if([keyPath isEqualToString:@"URL"] && object == webView){
-        NSLog(@"now url : %@", webView.URL.absoluteURL.absoluteString);
-
-        if([webView.URL.absoluteURL.absoluteString containsString:@"https://www.buy123.com.tw"]){
-            [webView evaluateJavaScript:@"navigator.userAgent" completionHandler:^(id _Nullable response, NSError * _Nullable error) {
-                if(error != nil){
-                    NSLog(@"value: %@ error: %@", response, error);
-                }
-                
-                NSString* userAgent = response;
-                NSLog(@"now userAgent : %@", userAgent);
-                webView.customUserAgent = [userAgent stringByAppendingString:@"ios_tsbank"];
-            }];
-        }
-        self.isRichartMartHome = NO;
-        for (NSString* homeUrl in homeUrlForClose) {
-            if([webView.URL.absoluteURL.absoluteString isEqualToString:homeUrl]){
-                self.isRichartMartHome = YES;
-                break;
-            }
-        }
-
-        if (self.url == nil || [@" " isEqualToString: self.url]) {
-            self.url = webView.URL.absoluteURL.absoluteString;
-        }
-
-         if(pastPageURL == nil){
-             pastPageURL = webView.URL.absoluteURL.absoluteString;
-         }
-         
-         // 讓首次進入RM首頁時也可開啟關閉按鈕功能
-         if(self.isRichartMartHome && [pastPageURL isEqualToString:webView.URL.absoluteURL.absoluteString]){
-             [self setButtonEnable:YES button:self.backButton];
-             [self setImageViewAlpha:YES canGoForward:NO];
-         }
-         
-         // RM頁面隱藏分享按鈕
-         if(self.showSharing){
-             self.shareButton.enabled = NO;
-             [self.shareImageView setAlpha:0];
-         }
-         
-         if(![pastPageURL isEqualToString:webView.URL.absoluteURL.absoluteString]){
-             pastPageURL = webView.URL.absoluteURL.absoluteString;
-             
-             BOOL canGoBack = NO;
-             BOOL canGoForward = NO;
-             
-             
-            if(isGoingBack){
-                backAndForwardCount--;
-            }
-            if(isGoingForward){
-                backAndForwardCount++;
-            }
-             
-             if(!isGoingForward && !isGoingBack){
-                 totalPastPage++;
-             }
-             
-             if(isGoingBack){
-                nowPosition--;
-             }else{
-                nowPosition++;
-             }
-        
-             if(nowPosition == 0){
-                 if(self.isRichartMartHome){
-                     canGoBack = YES;
-                     [self setButtonEnable:YES button:self.backButton];
-                 } else {
-                     canGoBack = NO;
-                     [self setButtonEnable:NO button:self.backButton];
-                 }
-             }else{
-                 canGoBack = YES;
-                [self setButtonEnable:YES button:self.backButton];
-             }
-             
-             if((totalPastPage > nowPosition)){
-                 if(backAndForwardCount < 0  && (isGoingBack || isGoingForward)){
-                    canGoForward = YES;
-                    [self setButtonEnable:YES button:self.forwardButton];
-                 }else{
-                    backAndForwardCount = 0;
-                    canGoForward = NO;
-                    [self setButtonEnable:NO button:self.forwardButton];
-                 }
-             }else{
-                 canGoForward = NO;
-                 [self setButtonEnable:NO button:self.forwardButton];
-             }
-             
-             [self setImageViewAlpha:canGoBack canGoForward:canGoForward];
-             
-             if(isGoingBack){
-                 isGoingBack = NO;
-             }
-             if(isGoingForward){
-                 isGoingForward = NO;
-            }
-         }
-     }
-
-}
-
-//MARK: - init
-
-
--(void)initData{
-    
-    self.titleLabel.text = self.titleString;
-    
-    self.navigationController.delegate = self;
-}
-
--(void)initLayout{
-
-    [self setButtonEnable:NO button:self.backButton];
-    [self setButtonEnable:NO button:self.forwardButton];
-    [self setImageViewAlpha:NO canGoForward:NO];
-    
-}
-
-//MARK: - clickEvent
-
-
-
--(IBAction)backButton_Clicked:(id)sender{
-    
-    if (nowPosition == 0 && self.isRichartMartHome) {
-        [self closeWKWebView];
-    } else {
-        isGoingBack = YES;isGoingBack = YES;
-        [webView goBack];
-    }
-}
-
--(IBAction)forwardButton_Clicked:(id)sender{
-    isGoingForward = YES;
-    [webView goForward];
-}
-
--(IBAction)closeButtonTap:(id)sender{
-    [self closeWKWebView];
-}
-
--(IBAction)shareButtonTap:(id)sender{
-    NSURL *shareUrl = webView.URL;
-    UIActivityViewController *activityViewController = [[UIActivityViewController alloc] initWithActivityItems:@[shareUrl] applicationActivities:nil];
-    [self presentViewController:activityViewController animated:YES completion:^{}];
-}
-
--(void) closeWKWebView {
-    //__weak __typeof(self) weakSelf = self;
-    __block NSString *urlGet = self.url;
-    
-    isClosingPage = YES;
-    [self.navigationController popViewControllerAnimated:NO];
-    self.block(urlGet, RESULT_ACTION_EXIT);
-
-}
-
-
-//MARK: - WKUIDelegate
-
-- (WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures{
-  
-    if (!navigationAction.targetFrame.isMainFrame) {
-
-       [webView loadRequest:navigationAction.request];
-    }
-
-    return nil;
-}
-
-//MARK: - WKNavigationDelegate
-
-- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler{
-
-   // NSLog(@"decidePolicyForNavigationAction canGoBack:%d, canGoForward:%d",webView.canGoBack, webView.canGoForward);
-//    [self setButtonEnable:webView.canGoBack button:self.backButton];
-//    [self setButtonEnable:webView.canGoForward button:self.forwardButton];
-//
-//    [self setImageViewAlpha:webView.canGoBack canGoForward:webView.canGoForward];
-    
-    UIApplication *app = [UIApplication sharedApplication];
-    NSURL *url = navigationAction.request.URL;
-    //外開連結至appStore / linePay
-    if ([url.absoluteString containsString:appStore] || [url.absoluteString containsString:linePay]) {
-        if ([app canOpenURL:url])
-        {
-            [app openURL:url options:@{} completionHandler:nil];
-            decisionHandler(WKNavigationActionPolicyCancel);
-            return;
-        }
-    } else if([url.absoluteString containsString:@"RichartLife/download.html"] || [url.absoluteString containsString:@"CARDaily/CARDailydownload.html"]){
-        [app openURL:url options:@{} completionHandler:nil];
-        decisionHandler(WKNavigationActionPolicyCancel);
-        [self closeWKWebView];
-        return;
-    }
-    
-    self.url = [navigationAction.request.URL absoluteString];
-    NSString *urlGet = self.url;
-    if(self.keysArray != nil){
-        for(int i = 0 ; i < self.keysArray.count ; i++){
-            if([[self.url lowercaseString] hasPrefix:[self.keysArray[i] lowercaseString]]){
-                 isClosingPage = YES;
-                [self.navigationController popViewControllerAnimated:NO];
-                self.block(urlGet, RESULT_ACTION_DETECTED_URL);
-               
-                decisionHandler(WKNavigationActionPolicyCancel);
-                return;
-            }
-        }
-    }
-    
-    decisionHandler(WKNavigationActionPolicyAllow);
-    
-}
-
-
-
-- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation{
-//    NSLog(@"didStartProvisionalNavigation canGoBack:%d, canGoForward:%d",webView.canGoBack, webView.canGoForward);
-//
-//    [self setButtonEnable:webView.canGoBack button:self.backButton];
-//    [self setButtonEnable:webView.canGoForward button:self.forwardButton];
-//
-//    [self setImageViewAlpha:webView.canGoBack canGoForward:webView.canGoForward];
-}
-
-- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation{
-    
-//    NSLog(@"didFinishNavigation canGoBack:%d, canGoForward:%d",webView.canGoBack, webView.canGoForward);
-//
-//    [self setButtonEnable:webView.canGoBack button:self.backButton];
-//    [self setButtonEnable:webView.canGoForward button:self.forwardButton];
-    
-    if([self.action isEqualToString:@"login"]){//代表是登入回來
-       
-        [webView evaluateJavaScript:[NSString stringWithFormat:@"host_login_callback(\"%@\")", [self aesEncrypt:[self getJSONString:[self getDict:NO]] key:key iv:iv]] completionHandler:^(id _Nullable response, NSError * _Nullable error) {
-                   if(error != nil){
-                       NSLog(@"value: %@ error: %@", response, error);
-                   }
-        }];
-        
-    }
-    
-//    [self setImageViewAlpha:webView.canGoBack canGoForward:webView.canGoForward];
-
-}
-
-- (void)webView:(WKWebView *)webView didFailNavigation:(WKNavigation *)navigation withError:(NSError *)error{
-    
-//    NSLog(@"didFailNavigation canGoBack:%d, canGoForward:%d",webView.canGoBack, webView.canGoForward);
-//
-//    [self setButtonEnable:webView.canGoBack button:self.backButton];
-//    [self setButtonEnable:webView.canGoForward button:self.forwardButton];
-//
-//    [self setImageViewAlpha:webView.canGoBack canGoForward:webView.canGoForward];
-}
-
-
-- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message {
-    
-    if([message.name isEqualToString:@"host_login_interface"]){
-        
-        if(self.tokenid != nil && ![self.tokenid isEqual:[NSNull null]] && ![self.tokenid isEqualToString:@""]){
-            [webView evaluateJavaScript:[NSString stringWithFormat:@"host_login_callback(\"%@\")", self.tokenInfo] completionHandler:^(id _Nullable response, NSError * _Nullable error) {
-                                            if(error != nil){
-                                                NSLog(@"value: %@ error: %@", response, error);
-                }
-            }];
-        }else{
-            NSString *urlGet = @"";
-                       
-            urlGet = [NSString stringWithFormat:@"%@", message.body];
-           
-            if([urlGet isEqualToString:@""] || [urlGet isEqualToString:@"undefined"]){
-                urlGet = self.url;
-            }
-           
-            isClosingPage = YES;
-            [self.navigationController popViewControllerAnimated:NO];
-            self.block(urlGet, RESULT_ACTION_NEED_LOGIN);
-        }
-        
-    }else if([message.name isEqualToString:@"host_renewTokenInfo_interface"]){
-        NSString *parameter = [NSString stringWithFormat:@"host_renewTokenInfo_callback('%@')", self.tokenInfo];
-        [webView evaluateJavaScript:parameter completionHandler:^(id _Nullable response, NSError * _Nullable error) {
-                  if(error != nil){
-                       NSLog(@"value: %@ error: %@", response, error);
-                   }
-        }];
-    }else if([message.name isEqualToString:@"host_deeplink_interface"]){
-        NSString *urlGet = [NSString stringWithFormat:@"%@", message.body];
-        isClosingPage = YES;
-        [self.navigationController popViewControllerAnimated:NO];
-        self.block(urlGet, RESULT_ACTION_DEEP_LINK);
-    }else if([message.name isEqualToString:@"host_title_interface"]){
-        self.title =  message.body;
-    }else if([message.name isEqualToString:@"host_externalUrl_interface"]){
-        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:message.body] options:@{} completionHandler:nil];
-    }
-    
-}
-
--(void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler{
-    
-    CustomUIAlertController *alert = [CustomUIAlertController alertControllerWithTitle:@"提示" message:message preferredStyle:UIAlertControllerStyleAlert];
-    [alert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
-        completionHandler();
-    }]];
-    
-    
-       if (self.isBeingDismissed) {
-           completionHandler();
-       } else {
-           [self presentViewController:alert animated:YES completion:nil];
-       }
-    
-}
-
-//MARK: - private method
-
--(void)setButtonEnable:(BOOL)enable button:(UIButton*)button{
-    
-    if(enable){
-        [button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
-    }else{
-        [button setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal];
-    }
-    
-    [button setEnabled:enable];
-    
-}
-
--(void)setImageViewAlpha:(BOOL)canGoBack canGoForward:(BOOL)canGoForward{
-    
-    if(canGoBack){
-        [self.backImageView setAlpha:1.0];
-    }else{
-        [self.backImageView setAlpha:0.3];
-    }
-    
-    if(canGoForward){
-        [self.forwardImageView setAlpha:1.0];
-    }else{
-        [self.forwardImageView setAlpha:0.3];
-    }
-    
-}
-
-
--(NSString*)getJSONString:(NSMutableDictionary*)dict{
-    NSError *error;
-    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:0 error:&error];
-    if (jsonData.length > 0 && !error)
-    {
-        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
-        return jsonString;
-    }
-    
-    return @"";
-}
-
--(NSMutableDictionary*)getDict:(BOOL)keepTokenIDNull{
-    NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];
-    
-    if(self.tokenid == nil || keepTokenIDNull == YES){
-        [dict setObject:[NSNull null] forKey:@"tokenid"];
-    }else{
-        [dict setObject:self.tokenid forKey:@"tokenid"];
-    }
-    
-    NSString *dateTime = [self dateToIso8601String:[NSDate date]];
-    
-    [dict setObject:[self dateToIso8601String:[NSDate date]] forKey:@"expiredtime"];
-    
-   if(self.channel != nil){
-        [dict setObject:self.channel forKey:@"channel"];
-    }else{
-        [dict setObject:@"" forKey:@"channel"];
-    }
-    
-    if(self.appver != nil){
-        [dict setObject:self.appver forKey:@"appver"];
-    }else{
-        [dict setObject:@"" forKey: @"appver"];
-    }
-    
-    [dict setObject:@"ios" forKey:@"os"];
-    
-    return dict;
-}
-
--(NSString*)dateToIso8601String:(NSDate*)date{
-    
-    NSTimeInterval secondsInEightHours = 10 * 60 * 60;
-    NSDate *dateEightHoursAhead = [date dateByAddingTimeInterval:secondsInEightHours];
-    
-    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
-    [formatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZZ"];
-    
-    [formatter setTimeZone:[NSTimeZone timeZoneWithName:@"GMT"]];
-    
-    return [formatter stringFromDate:dateEightHoursAhead];
-}
-
-
-
-
--(NSString*)aesEncrypt:(NSString*)sourceString key:(NSString*)key iv:(NSString*)iv{
-    if(key != nil){
-        NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
-        NSData *data = [sourceString dataUsingEncoding:NSUTF8StringEncoding];
-        NSMutableData *cryptData = [NSMutableData dataWithLength:data.length + kCCKeySizeAES256];
-
-        size_t numBytesEncrypted = 0;
-        
-  
-        CCCryptorStatus cryptStatus = CCCrypt((unsigned int)kCCEncrypt,
-                                              (unsigned int)kCCAlgorithmAES,
-                                              (unsigned int)kCCOptionPKCS7Padding,
-                                              [keyData bytes],
-                                              kCCKeySizeAES256,
-                                              (const unsigned char *)[iv UTF8String],   //重要！！！ 要以const unsigned char格式傳入
-                                              [data bytes],
-                                              data.length,
-                                              cryptData.mutableBytes,
-                                              cryptData.length,
-                                              &numBytesEncrypted);
-        
-        if(cryptStatus == kCCSuccess){
-            cryptData.length = (int)numBytesEncrypted;
-         //   NSData *resultData = [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
-            NSString *base64cryptString = [cryptData base64EncodedStringWithOptions:0];
-            return base64cryptString;
-        }else{
-            return nil;
-        }
-    }
-    
-    return nil;
-}
-
-
-//MARK: - UINavigationControllerDelegate
-
-
-
-- (UIInterfaceOrientationMask)navigationControllerSupportedInterfaceOrientations:(UINavigationController *)navigationController{
-    return UIInterfaceOrientationMaskPortrait;
-}
-
-- (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler{
-        NSString *authenticationMethod = [[challenge protectionSpace] authenticationMethod];
-        NSString* host = challenge.protectionSpace.host;
-    
-
-        if ([authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
-            SecTrustRef trustRef = [[challenge protectionSpace] serverTrust];
-            SecTrustEvaluate(trustRef, NULL);
-            
-            CFIndex count = 1;
-
-            for (CFIndex i = 0; i < count; i++)
-            {
-                SecCertificateRef certRef = SecTrustGetCertificateAtIndex(trustRef, i);
-                NSString* fingerprint = [self getFingerprint:certRef]; //憑證的fingerprint
-                NSString *url = host; //憑證的url 目前只比對dns
-                NSString *nowUrl = webView.URL.absoluteURL.host;
-                
-          
-                // now url == 存在app端的 但fp錯誤-->退出webview
-                if (![self isFingerprintTrusted: fingerprint compareUrl:url]) {
-                    
-                    CustomUIAlertController* alert = [CustomUIAlertController alertControllerWithTitle:@"系統訊息"
-                                                   message:@"憑證過期，請洽客服。"
-                                                   preferredStyle:UIAlertControllerStyleAlert];
-                     
-                   UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"確定" style:UIAlertActionStyleDefault
-                   handler:^(UIAlertAction * action) {
-                       [self closeWKWebView];
-                   }];
-                    
-                    [alert addAction:defaultAction];
-                    [self presentViewController:alert animated:YES completion:nil];
-            
-                    break;
-                }
-            }
-            
-
-            completionHandler (NSURLSessionAuthChallengeUseCredential, [NSURLCredential credentialForTrust:trustRef]);
-            
-        }
-    
-    
-}
-
-//以下參考至cordova-plugin-sslcertificatechecker
-
-- (NSString*) getFingerprint: (SecCertificateRef) cert {
-    NSData* certData = (__bridge NSData*) SecCertificateCopyData(cert);
-    unsigned char digest[CC_SHA256_DIGEST_LENGTH];
-    CC_SHA256(certData.bytes, (CC_LONG)certData.length, digest);//int
-    NSMutableString *fingerprint = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];//3
-    for (int i = 0; i < CC_SHA256_DIGEST_LENGTH; ++i) {
-        [fingerprint appendFormat:@"%02x ", digest[i]];
-    }
-
-
-    return [fingerprint stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
-}
-
-//傳入 從憑證取出的fingerprint 與 從憑證取出的url
-- (BOOL) isFingerprintTrusted: (NSString*)fingerprint compareUrl:(NSString*)compareUrl{
-    //從dict取出預存的fingerprint
-    NSString *fp = [self getFingerPrintDict][compareUrl];
-
-    if (fp == nil || fp == NULL) {
-        return YES;
-    }
-    
-    if ([fingerprint caseInsensitiveCompare: fp] == NSOrderedSame) {
-        return YES;
-    } else{
-        return NO;
-    }
-}
-
--(NSDictionary *) getFingerPrintDict{
-    CertObj *certObj1 = [CertObj new];
-    certObj1.name = @"Official website";
-    certObj1.dueDate = @"2022/1/15";
-    certObj1.url = @"www.taishinbank.com.tw";
-    certObj1.fp = @"C9 F9 02 3F D3 9B 0B 49 84 BA 0A 65 78 69 36 07 48 57 41 F5 BF A2 C2 D3 45 E2 1C E9 2F F8 45 77";
-
-    CertObj *certObj2 = [CertObj new];
-    certObj2.name = @"行銷平台/登錄網站";
-    certObj2.dueDate = @"2022/1/3";
-    certObj2.url = @"mkp.taishinbank.com.tw";
-    certObj2.fp = @"69 3e 96 8b b6 6b bc 2a 51 1a 10 33 c2 12 f0 fd 43 8a ea d4 f2 dc 04 ac c9 c0 cd 8c 13 66 13 a0";
-
-    CertObj *certObj3 = [CertObj new];
-    certObj3.name = @"CDN";
-    certObj3.dueDate = @"2021/8/11";
-    certObj3.url = @"mkp-tsbank.cdn.hinet.net";
-    certObj3.fp = @"F3 37 8D 4C B1 BE F1 D7 45 E7 99 0A DD F4 6B 7F 60 0E AE 7F 87 BD 2E 27 C5 6A F8 DB 3E D3 12 D2";
-
-    CertObj *certObj4 = [CertObj new];
-    certObj4.name = @"TRP";
-    certObj4.dueDate = @"2022/1/31";
-    certObj4.url = @"reward.taishinbank.com.tw";
-    certObj4.fp = @"E9 C5 2F 49 12 D6 A1 9F F3 6F 80 41 A6 7D 30 59 C4 BF 1D 99 F5 E3 62 01 7B AB A3 DD 50 AF EC BD";
-
-//    20210224目前app無使用，有啟用時再開放
-//    CertObj *certObj5 = [CertObj new];
-//    certObj5.name = @"TRP";
-//    certObj5.dueDate = @"確認中";
-//    certObj5.url = @"points.taishin.com";
-//    certObj5.fp = @"AD 88 53 8A 12 A4 12 CA B4 4D EE 33 D2 CD 8F 25 13 85 96 AF 47 FD 2C 19 1B A3 FF C3 6F 26 8C 94";
-
-    CertObj *certObj6 = [CertObj new];
-    certObj6.name = @"RM";
-    certObj6.dueDate = @"2021/11/3";
-    certObj6.url = @"ktc.i-buy88.com";
-    certObj6.fp = @"34 2a 09 f5 9a 67 c3 03 49 55 d3 40 15 27 db f1 fe 55 41 44 91 ee bc 66 45 62 25 dc 67 b4 f3 6c";
-    
-    CertObj *certObj7 = [CertObj new];
-    certObj7.name = @"行銷平台/登錄網站";
-    certObj7.dueDate = @"2022/2/24";
-    certObj7.url = @"mkpcard.taishinbank.com.tw";
-    certObj7.fp = @"26 32 15 2F 8D 88 B1 77 2B 89 04 5E EB 90 94 5D B9 17 4F CF F5 41 66 33 4B 57 74 58 3C 3B ED BC";
-
-// www.taishinbank.com.tw=官網 2022/1/15+
-// mkp.taishinbank.com.tw=行銷平台/登錄網站 2022/1/3
-// mkp-tsbank.cdn.hinet.net = > CDN 2021/8/11-
-// reward.taishinbak.com.tw = TRP 2022/1/31-
-// points.taishin.com => TRP(確認中)
-// ktc.i-buy88.com=> RM 2021/11/3w
-// mkpcard.taishinbank.com.tw=行銷平台/登錄網站 2022/2/24
-
-
-    //這邊記得 certObj5
-    NSArray *certs = @[certObj1,certObj2,certObj3,certObj4,certObj6,certObj7];
-
-    
-    NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];
-    for (int i =0 ; i < [certs count]; i++) {
-        [dict setValue:((CertObj*)[certs objectAtIndex:i]).fp forKey:((CertObj*)[certs objectAtIndex:i]).url];
-    }
-
-    
-    return dict;
-}
-
-@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/www/InAppWebViewPlugin.js b/src-cordova/res/customPlugins/cardaily-inappwebview/www/InAppWebViewPlugin.js
deleted file mode 100755
index 69352ef27..000000000
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/www/InAppWebViewPlugin.js
+++ /dev/null
@@ -1,17 +0,0 @@
-var exec = require('cordova/exec');
-
-exports.openUrl = function (success, error, arg0) {
-    exec(success, error, 'InAppWebViewPlugin', 'openUrl', [arg0]);
-};
-
-exports.openFamilyUrl = function (success, error, arg0) {
-    exec(success, error, 'InAppWebViewPlugin', 'openFamilyUrl', [arg0]);
-};
-
-exports.openAcLinkWebView = function (success, error, arg0) {
-    exec(success, error, 'InAppWebViewPlugin', 'openAcLinkWebView', [arg0]);
-};
-
-exports.openMall = function (success, error, arg0) {
-    exec(success, error, 'InAppWebViewPlugin', 'openMall', [arg0]);
-};
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.appveyor.yml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.appveyor.yml
new file mode 100644
index 000000000..aa88b4146
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.appveyor.yml
@@ -0,0 +1,34 @@
+# appveyor file
+# http://www.appveyor.com/docs/appveyor-yml
+
+max_jobs: 1
+
+shallow_clone: true
+
+init:
+  - git config --global core.autocrlf true
+
+image:
+  - Visual Studio 2017
+
+environment:
+  matrix:
+    - nodejs_version: "10"
+    - nodejs_version: "12"
+    - nodejs_version: "14"
+
+platform:
+  - x86
+  - x64
+
+install:
+  - ps: Install-Product node $env:nodejs_version
+  - node --version
+  - npm install -g cordova-paramedic@https://github.com/apache/cordova-paramedic.git
+  - npm install -g cordova
+  - npm install
+
+build: off
+
+test_script:
+  - cordova-paramedic --config pr\windows-10-store --plugin . --justBuild
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.asf.yaml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.asf.yaml
new file mode 100644
index 000000000..29a6c7cb8
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.asf.yaml
@@ -0,0 +1,22 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+# 
+#   http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+notifications:
+  commits:              commits@cordova.apache.org
+  issues:               issues@cordova.apache.org
+  pullrequests_status:  issues@cordova.apache.org
+  pullrequests_comment: issues@cordova.apache.org
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.eslintrc.yml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.eslintrc.yml
new file mode 100644
index 000000000..17277f7fb
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.eslintrc.yml
@@ -0,0 +1,23 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+root: true
+extends: '@cordova/eslint-config/browser'
+
+overrides:
+    - files: [tests/**/*.js]
+      extends: '@cordova/eslint-config/node-tests'
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.gitattributes b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.gitattributes
new file mode 100644
index 000000000..dfbd1e548
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.gitattributes
@@ -0,0 +1,26 @@
+* text eol=lf
+
+#
+## These files are binary and should be left untouched
+#
+
+# (binary is a macro for -text -diff)
+*.png binary
+*.jpg binary
+*.jpeg binary
+*.gif binary
+*.ico binary
+*.mov binary
+*.mp4 binary
+*.mp3 binary
+*.flv binary
+*.fla binary
+*.swf binary
+*.gz binary
+*.zip binary
+*.7z binary
+*.ttf binary
+*.eot binary
+*.woff binary
+*.pyc binary
+*.pdf binary
\ No newline at end of file
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.gitignore b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.gitignore
new file mode 100644
index 000000000..f63dbbf71
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.gitignore
@@ -0,0 +1,24 @@
+﻿#If ignorance is bliss, then somebody knock the smile off my face
+
+*.csproj.user
+*.suo
+*.cache
+Thumbs.db
+*.DS_Store
+
+*.bak
+*.cache
+*.log
+*.swp
+*.user
+*.idea
+
+node_modules
+
+
+
+
+
+
+
+
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.npmignore b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.npmignore
new file mode 100644
index 000000000..45e3c3866
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.npmignore
@@ -0,0 +1,3 @@
+.*
+appveyor.yml
+tests
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.travis.yml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.travis.yml
new file mode 100644
index 000000000..8c2d3c115
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/.travis.yml
@@ -0,0 +1,118 @@
+# This Travis configuration file is built after a Cordova Paramedic
+# specific template with minimal modifications and adaptations:
+# https://github.com/apache/cordova-paramedic/blob/master/.travis.yml
+
+sudo: false
+
+addons:
+  jwt:
+    # SAUCE_ACCESS_KEY
+    secure: TZ88IEvAw1bsWPWxvDzXdpi2NK0i3PN4hG15+vDpIt6wXGVPknjxuXWJeLj7TqBpAIvP7XDfS8ZvHVPLe7fe8oOchZPLuiDw9VVIk6cnHjE6wpoavdGc/1mDJ3Bi4PDcHwRUr5ng5spYQqqlTwcECkH/q7iPgudiFM6rlOlGRyA=
+
+env:
+  global:
+    - SAUCE_USERNAME=snay
+    - TRAVIS_NODE_VERSION=12
+    - ANDROID_API_LEVEL=29
+    - ANDROID_BUILD_TOOLS_VERSION=29.0.2
+
+language: node_js
+node_js: 14
+
+# yaml anchor/alias: https://medium.com/@tommyvn/travis-yml-dry-with-anchors-8b6a3ac1b027
+
+_ios: &_ios
+  os: osx
+  osx_image: xcode11.6
+
+_android: &_android
+  language: android
+  os: linux
+  jdk: oraclejdk8
+  android:
+    components:
+      - tools
+      - build-tools-$ANDROID_BUILD_TOOLS_VERSION
+      - android-$ANDROID_API_LEVEL
+    licenses:
+      - "android-sdk-preview-license-.+"
+      - "android-sdk-license-.+"
+      - "google-gdk-license-.+"
+
+matrix:
+  include:
+    # local tests, without saucelabs
+    - env: PLATFORM=local/browser
+      <<: *_ios
+    - env: PLATFORM=local/ios-10.0
+      <<: *_ios
+
+    # many tests with saucelabs
+    - env: PLATFORM=browser-chrome
+    - env: PLATFORM=browser-firefox
+    - env: PLATFORM=browser-safari
+    - env: PLATFORM=browser-edge
+
+    - env: PLATFORM=ios-11.3
+      <<: *_ios
+    - env: PLATFORM=ios-12.0
+      <<: *_ios
+
+    - env: PLATFORM=android-5.1
+      <<: *_android
+    - env: PLATFORM=android-6.0
+      <<: *_android
+    - env: PLATFORM=android-7.0
+      <<: *_android
+    - env: PLATFORM=android-7.1
+      <<: *_android
+    - env: PLATFORM=android-8.0
+      <<: *_android
+    - env: PLATFORM=android-8.1
+      <<: *_android
+    - env: PLATFORM=android-9.0
+      <<: *_android
+
+before_install:
+  # manually install Node for `language: android`
+  - if [[ "$PLATFORM" =~ android ]]; then nvm install $TRAVIS_NODE_VERSION; fi
+  - node --version
+  - if [[ "$PLATFORM" =~ android ]]; then gradle --version; fi
+  - if [[ "$PLATFORM" =~ ios ]]; then npm install -g ios-deploy; fi
+  - npm install -g cordova
+  # install paramedic if not running on paramedic repo
+  - if ! [[ "$TRAVIS_REPO_SLUG" =~ cordova-paramedic ]]; then npm install -g github:apache/cordova-paramedic; fi
+
+install:
+  - npm install
+
+before_script:
+  - |
+    if [[ "$TRAVIS_REPO_SLUG" =~ cordova-paramedic ]]; then 
+      # when used in the cordova-paramedic repo
+      TEST_COMMAND="npm run eslint"
+      PARAMEDIC_PLUGIN_TO_TEST="./spec/testable-plugin/"
+      PARAMEDIC_COMMAND="node main.js"
+    else 
+      # when used in any other (plugin) repo
+      TEST_COMMAND="npm test"
+      PARAMEDIC_PLUGIN_TO_TEST=$(pwd)
+      PARAMEDIC_COMMAND="cordova-paramedic"
+    fi
+  - PARAMEDIC_BUILDNAME=travis-$TRAVIS_REPO_SLUG-$TRAVIS_JOB_NUMBER
+  - |
+    echo "Variables now are set to:"
+    echo "TEST_COMMAND=$TEST_COMMAND"
+    echo "ADDITIONAL_TESTS=$ADDITIONAL_TESTS"
+    echo "PARAMEDIC_COMMAND=$PARAMEDIC_COMMAND"
+    echo "PLATFORM=$PLATFORM"
+    echo "PARAMEDIC_PLUGIN_TO_TEST=$PARAMEDIC_PLUGIN_TO_TEST"
+    echo "PARAMEDIC_BUILDNAME=$PARAMEDIC_BUILDNAME"
+script:
+  - $TEST_COMMAND
+  - |
+    if [[ "$ADDITIONAL_TESTS_DIR" != "" ]]; then
+      cd $ADDITIONAL_TESTS_DIR && npm install && npm test;
+    else
+      $PARAMEDIC_COMMAND --config ./pr/$PLATFORM --plugin $PARAMEDIC_PLUGIN_TO_TEST --buildName $PARAMEDIC_BUILDNAME;
+    fi
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/CONTRIBUTING.md b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/CONTRIBUTING.md
new file mode 100644
index 000000000..21a93d72a
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/CONTRIBUTING.md
@@ -0,0 +1,37 @@
+<!--
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+#  KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+-->
+
+# Contributing to Apache Cordova
+
+Anyone can contribute to Cordova. And we need your contributions.
+
+There are multiple ways to contribute: report bugs, improve the docs, and
+contribute code.
+  
+For instructions on this, start with the
+[contribution overview](http://cordova.apache.org/contribute/).
+
+The details are explained there, but the important items are:
+ - Check for Github issues that corresponds to your contribution and link or create them if necessary.
+ - Run the tests so your patch doesn't break existing functionality.
+
+We look forward to your contributions!
+
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/LICENSE b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/LICENSE
new file mode 100644
index 000000000..7a4a3ea24
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/LICENSE
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
\ No newline at end of file
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/NOTICE b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/NOTICE
new file mode 100644
index 000000000..8ec56a524
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/NOTICE
@@ -0,0 +1,5 @@
+Apache Cordova
+Copyright 2012 The Apache Software Foundation
+
+This product includes software developed at
+The Apache Software Foundation (http://www.apache.org/).
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/README.md b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/README.md
new file mode 100644
index 000000000..c30e17eed
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/README.md
@@ -0,0 +1,721 @@
+---
+title: Inappbrowser
+description: Open an in-app browser window.
+---
+<!--
+# license: Licensed to the Apache Software Foundation (ASF) under one
+#         or more contributor license agreements.  See the NOTICE file
+#         distributed with this work for additional information
+#         regarding copyright ownership.  The ASF licenses this file
+#         to you under the Apache License, Version 2.0 (the
+#         "License"); you may not use this file except in compliance
+#         with the License.  You may obtain a copy of the License at
+#
+#           http://www.apache.org/licenses/LICENSE-2.0
+#
+#         Unless required by applicable law or agreed to in writing,
+#         software distributed under the License is distributed on an
+#         "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+#         KIND, either express or implied.  See the License for the
+#         specific language governing permissions and limitations
+#         under the License.
+-->
+
+|AppVeyor|Travis CI|
+|:-:|:-:|
+|[![Build status](https://ci.appveyor.com/api/projects/status/github/apache/cordova-plugin-inappbrowser?branch=master)](https://ci.appveyor.com/project/ApacheSoftwareFoundation/cordova-plugin-inappbrowser)|[![Build Status](https://travis-ci.org/apache/cordova-plugin-inappbrowser.svg?branch=master)](https://travis-ci.org/apache/cordova-plugin-inappbrowser)|
+
+# cordova-plugin-inappbrowser
+
+You can show helpful articles, videos, and web resources inside of your app. Users can view web pages without leaving your app.
+
+> To get a few ideas, check out the [sample](#sample) at the bottom of this page or go straight to the [reference](#reference) content.
+
+This plugin provides a web browser view that displays when calling `cordova.InAppBrowser.open()`.
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+
+### `window.open`
+
+The `cordova.InAppBrowser.open()` function is defined to be a drop-in replacement
+for the `window.open()` function.  Existing `window.open()` calls can use the
+InAppBrowser window, by replacing window.open:
+
+    window.open = cordova.InAppBrowser.open;
+
+If you change the browsers `window.open` function this way, it can have unintended side
+effects (especially if this plugin is included only as a dependency of another
+plugin).
+
+The InAppBrowser window behaves like a standard web browser,
+and can't access Cordova APIs. For this reason, the InAppBrowser is recommended
+if you need to load third-party (untrusted) content, instead of loading that
+into the main Cordova webview. The InAppBrowser is not subject to the
+whitelist, nor is opening links in the system browser.
+
+The InAppBrowser provides by default its own GUI controls for the user (back,
+forward, done).
+
+## Installation
+
+    cordova plugin add cordova-plugin-inappbrowser
+
+If you want all page loads in your app to go through the InAppBrowser, you can
+simply hook `window.open` during initialization.  For example:
+
+    document.addEventListener("deviceready", onDeviceReady, false);
+    function onDeviceReady() {
+        window.open = cordova.InAppBrowser.open;
+    }
+
+### Preferences
+
+#### <b>config.xml</b>
+- <b>InAppBrowserStatusBarStyle [iOS only]</b>: (string, options 'lightcontent', 'darkcontent' or 'default'. Defaults to 'default') set text color style for iOS. 'lightcontent' is intended for use on dark backgrounds. 'darkcontent' is only available since iOS 13 and intended for use on light backgrounds.
+```
+<preference name="InAppBrowserStatusBarStyle" value="lightcontent" />
+```
+
+## cordova.InAppBrowser.open
+
+Opens a URL in a new `InAppBrowser` instance, the current browser
+instance, or the system browser.
+
+    var ref = cordova.InAppBrowser.open(url, target, options);
+
+- __ref__: Reference to the `InAppBrowser` window when the target is set to `'_blank'`. _(InAppBrowser)_
+
+- __url__: The URL to load _(String)_. Call `encodeURI()` on this if the URL contains Unicode characters.
+
+- __target__: The target in which to load the URL, an optional parameter that defaults to `_self`. _(String)_
+
+    - `_self`: Opens in the Cordova WebView if the URL is in the white list, otherwise it opens in the `InAppBrowser`.
+    - `_blank`: Opens in the `InAppBrowser`.
+    - `_system`: Opens in the system's web browser.
+
+- __options__: Options for the `InAppBrowser`. Optional, defaulting to: `location=yes`. _(String)_
+
+    The `options` string must not contain any blank space, and each feature's name/value pairs must be separated by a comma. Feature names are case insensitive.
+
+    All platforms support:
+
+    - __location__: Set to `yes` or `no` to turn the `InAppBrowser`'s location bar on or off.
+
+    Android supports these additional options:
+
+    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.
+    - __beforeload__: set to enable the `beforeload` event to modify which pages are actually loaded in the browser. Accepted values are `get` to intercept only GET requests, `post` to intercept on POST requests or `yes` to intercept both GET & POST requests. Note that POST requests are not currently supported and will be ignored (if you set `beforeload=post` it will raise an error).
+    - __clearcache__: set to `yes` to have the browser's cookie cache cleared before the new window is opened
+    - __clearsessioncache__: set to `yes` to have the session cookie cache cleared before the new window is opened
+    - __closebuttoncaption__: set to a string to use as the close button's caption instead of a X. Note that you need to localize this value yourself.
+    - __closebuttoncolor__: set to a valid hex color string, for example: `#00ff00`, and it will change the
+    close button color from default, regardless of being a text or default X. Only has effect if user has location set to `yes`.
+    - __footer__: set to `yes` to show a close button in the footer similar to the iOS __Done__ button. 
+    The close button will appear the same as for the header hence use __closebuttoncaption__ and __closebuttoncolor__ to set its properties.
+    - __footercolor__: set to a valid hex color string, for example `#00ff00` or `#CC00ff00` (`#aarrggbb`) , and it will change the footer color from default.
+    Only has effect if user has __footer__ set to `yes`.
+    - __hardwareback__: set to `yes` to use the hardware back button to navigate backwards through the `InAppBrowser`'s history. If there is no previous page, the `InAppBrowser` will close.  The default value is `yes`, so you must set it to `no` if you want the back button to simply close the InAppBrowser.
+    - __hidenavigationbuttons__: set to `yes` to hide the navigation buttons on the location toolbar, only has effect if user has location set to `yes`. The default value is `no`.
+    - __hideurlbar__: set to `yes` to hide the url bar on the location toolbar, only has effect if user has location set to `yes`. The default value is `no`.
+    - __navigationbuttoncolor__: set to a valid hex color string, for example: `#00ff00`, and it will change the color of both navigation buttons from default. Only has effect if user has location set to `yes` and not hidenavigationbuttons set to `yes`.
+    - __toolbarcolor__: set to a valid hex color string, for example: `#00ff00`, and it will change the color the toolbar from default. Only has effect if user has location set to `yes`.
+    - __lefttoright__: Set to `yes` to swap positions of the navigation buttons and the close button. Specifically, navigation buttons go to the right and close button to the left. Default value is `no`.
+    - __zoom__: set to `yes` to show Android browser's zoom controls, set to `no` to hide them.  Default value is `yes`.
+    - __mediaPlaybackRequiresUserAction__: Set to `yes` to prevent HTML5 audio or video from autoplaying (defaults to `no`).
+    - __shouldPauseOnSuspend__: Set to `yes` to make InAppBrowser WebView to pause/resume with the app to stop background audio (this may be required to avoid Google Play issues like described in [CB-11013](https://issues.apache.org/jira/browse/CB-11013)).
+    - __useWideViewPort__: Sets whether the WebView should enable support for the "viewport" HTML meta tag or should use a wide viewport. When the value of the setting is `no`, the layout width is always set to the width of the WebView control in device-independent (CSS) pixels. When the value is `yes` and the page contains the viewport meta tag, the value of the width specified in the tag is used. If the page does not contain the tag or does not provide a width, then a wide viewport will be used. (defaults to `yes`).
+    - __fullscreen__: Sets whether the InappBrowser WebView is displayed fullscreen or not. In fullscreen mode, the status bar is hidden. Default value is `yes`.
+
+    iOS supports these additional options:
+
+    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.
+    - __beforeload__: set to enable the `beforeload` event to modify which pages are actually loaded in the browser. Accepted values are `get` to intercept only GET requests, `post` to intercept on POST requests or `yes` to intercept both GET & POST requests. Note that POST requests are not currently supported and will be ignored (if you set `beforeload=post` it will raise an error).
+    - __clearcache__: set to `yes` to have the browser's cookie cache cleared before the new window is opened
+    - __clearsessioncache__: set to `yes` to have the session cookie cache cleared before the new window is opened. For WKWebView, requires iOS 11+ on target device.
+    - __cleardata__: set to `yes` to have the browser's entire local storage cleared (cookies, HTML5 local storage, IndexedDB, etc.) before the new window is opened
+    - __closebuttoncolor__: set as a valid hex color string, for example: `#00ff00`, to change from the default __Done__ button's color. Only applicable if toolbar is not disabled.
+    - __closebuttoncaption__: set to a string to use as the __Done__ button's caption. Note that you need to localize this value yourself.
+    - __disallowoverscroll__: Set to `yes` or `no` (default is `no`). Turns on/off the the bounce of the WKWebView's UIScrollView.
+    - __hidenavigationbuttons__:  set to `yes` or `no` to turn the toolbar navigation buttons on or off (defaults to `no`). Only applicable if toolbar is not disabled.
+    - __navigationbuttoncolor__:  set as a valid hex color string, for example: `#00ff00`, to change from the default color. Only applicable if navigation buttons are visible.
+    - __toolbar__:  set to `yes` or `no` to turn the toolbar on or off for the InAppBrowser (defaults to `yes`)
+    - __toolbarcolor__: set as a valid hex color string, for example: `#00ff00`, to change from the default color of the toolbar. Only applicable if toolbar is not disabled.
+    - __toolbartranslucent__:  set to `yes` or `no` to make the toolbar translucent(semi-transparent)  (defaults to `yes`). Only applicable if toolbar is not disabled.
+    - __lefttoright__: Set to `yes` to swap positions of the navigation buttons and the close button. Specifically, close button goes to the right and navigation buttons to the left.
+    - __enableViewportScale__:  Set to `yes` or `no` to prevent viewport scaling through a meta tag (defaults to `no`).
+    - __mediaPlaybackRequiresUserAction__: Set to `yes` to prevent HTML5 audio or video from autoplaying (defaults to `no`).
+    - __allowInlineMediaPlayback__: Set to `yes` or `no` to allow in-line HTML5 media playback, displaying within the browser window rather than a device-specific playback interface. The HTML's `video` element must also include the `webkit-playsinline` attribute (defaults to `no`).
+    - __presentationstyle__:  Set to `pagesheet`, `formsheet` or `fullscreen` to set the [presentation style](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle) (defaults to `fullscreen`).
+    - __transitionstyle__: Set to `fliphorizontal`, `crossdissolve` or `coververtical` to set the [transition style](https://developer.apple.com/documentation/uikit/uimodaltransitionstyle) (defaults to `coververtical`).
+    - __toolbarposition__: Set to `top` or `bottom` (default is `bottom`). Causes the toolbar to be at the top or bottom of the window.
+    - __hidespinner__: Set to `yes` or `no` to change the visibility of the loading indicator (defaults to `no`).
+
+    Windows supports these additional options:
+
+    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.
+    - __hardwareback__: works the same way as on Android platform.
+    - __fullscreen__: set to `yes` to create the browser control without a border around it. Please note that if __location=no__ is also specified, there will be no control presented to user to close IAB window.
+
+
+### Supported Platforms
+
+- Android
+- Browser
+- iOS
+- OSX
+- Windows
+
+### Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+    var ref2 = cordova.InAppBrowser.open(encodeURI('http://ja.m.wikipedia.org/wiki/ハングル'), '_blank', 'location=yes');
+
+### OSX Quirks
+
+At the moment the only supported target in OSX is `_system`.
+
+`_blank` and `_self` targets are not yet implemented and are ignored silently. Pull requests and patches to get these to work are greatly appreciated.
+
+### iOS Quirks
+
+Since the introduction of iPadOS 13, iPads try to adapt their content mode / user agent for the optimal browsing experience. This may result in iPads having their user agent set to Macintosh, making it hard to detect them as mobile devices using user agent string sniffing. You can change this with the `PreferredContentMode` preference in `config.xml`.
+
+```xml
+<preference name="PreferredContentMode" value="mobile" />
+```
+
+The example above forces the user agent to contain `iPad`. The other option is to use the value `desktop` to turn the user agent to `Macintosh`.
+
+### Browser Quirks
+
+- Plugin is implemented via iframe,
+
+- Navigation history (`back` and `forward` buttons in LocationBar) is not implemented.
+
+## InAppBrowser
+
+The object returned from a call to `cordova.InAppBrowser.open` when the target is set to `'_blank'`.
+
+### Methods
+
+- addEventListener
+- removeEventListener
+- close
+- show
+- hide
+- executeScript
+- insertCSS
+
+## InAppBrowser.addEventListener
+
+> Adds a listener for an event from the `InAppBrowser`. (Only available when the target is set to `'_blank'`)
+
+    ref.addEventListener(eventname, callback);
+
+- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_
+
+- __eventname__: the event to listen for _(String)_
+
+  - __loadstart__: event fires when the `InAppBrowser` starts to load a URL.
+  - __loadstop__: event fires when the `InAppBrowser` finishes loading a URL.
+  - __loaderror__: event fires when the `InAppBrowser` encounters an error when loading a URL.
+  - __exit__: event fires when the `InAppBrowser` window is closed.
+  - __beforeload__: event fires when the `InAppBrowser` decides whether to load an URL or not (only with option `beforeload` set).
+  - __message__: event fires when the `InAppBrowser` receives a message posted from the page loaded inside the `InAppBrowser` Webview.
+
+- __callback__: the function that executes when the event fires. The function is passed an `InAppBrowserEvent` object as a parameter.
+
+## Example
+
+```javascript
+
+var inAppBrowserRef;
+
+function showHelp(url) {
+
+    var target = "_blank";
+
+    var options = "location=yes,hidden=yes,beforeload=yes";
+
+    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);
+
+    inAppBrowserRef.addEventListener('loadstart', loadStartCallBack);
+
+    inAppBrowserRef.addEventListener('loadstop', loadStopCallBack);
+
+    inAppBrowserRef.addEventListener('loaderror', loadErrorCallBack);
+
+    inAppBrowserRef.addEventListener('beforeload', beforeloadCallBack);
+
+    inAppBrowserRef.addEventListener('message', messageCallBack);
+}
+
+function loadStartCallBack() {
+
+    $('#status-message').text("loading please wait ...");
+
+}
+
+function loadStopCallBack() {
+
+    if (inAppBrowserRef != undefined) {
+
+        inAppBrowserRef.insertCSS({ code: "body{font-size: 25px;}" });
+
+        inAppBrowserRef.executeScript({ code: "\
+            var message = 'this is the message';\
+            var messageObj = {my_message: message};\
+            var stringifiedMessageObj = JSON.stringify(messageObj);\
+            webkit.messageHandlers.cordova_iab.postMessage(stringifiedMessageObj);"
+        });
+
+        $('#status-message').text("");
+
+        inAppBrowserRef.show();
+    }
+
+}
+
+function loadErrorCallBack(params) {
+
+    $('#status-message').text("");
+
+    var scriptErrorMesssage =
+       "alert('Sorry we cannot open that page. Message from the server is : "
+       + params.message + "');"
+
+    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);
+
+    inAppBrowserRef.close();
+
+    inAppBrowserRef = undefined;
+
+}
+
+function executeScriptCallBack(params) {
+
+    if (params[0] == null) {
+
+        $('#status-message').text(
+           "Sorry we couldn't open that page. Message from the server is : '"
+           + params.message + "'");
+    }
+
+}
+
+function beforeloadCallBack(params, callback) {
+
+    if (params.url.startsWith("http://www.example.com/")) {
+
+        // Load this URL in the inAppBrowser.
+        callback(params.url);
+    } else {
+
+        // The callback is not invoked, so the page will not be loaded.
+        $('#status-message').text("This browser only opens pages on http://www.example.com/");
+    }
+
+}
+
+function messageCallBack(params){
+    $('#status-message').text("message received: "+params.data.my_message);
+}
+
+```
+
+### InAppBrowserEvent Properties
+
+- __type__: the eventname, either `loadstart`, `loadstop`, `loaderror`, `message` or `exit`. _(String)_
+
+- __url__: the URL that was loaded. _(String)_
+
+- __code__: the error code, only in the case of `loaderror`. _(Number)_
+
+- __message__: the error message, only in the case of `loaderror`. _(String)_
+
+- __data__: the message contents , only in the case of `message`. A stringified JSON object. _(String)_
+
+
+### Supported Platforms
+
+- Android
+- Browser
+- iOS
+- Windows
+- OSX
+
+### Browser Quirks
+
+`loadstart`, `loaderror`, `message` events are not fired.
+
+### Windows Quirks
+
+`message` event is not fired.
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+    ref.addEventListener('loadstart', function(event) { alert(event.url); });
+
+## InAppBrowser.removeEventListener
+
+> Removes a listener for an event from the `InAppBrowser`. (Only available when the target is set to `'_blank'`)
+
+    ref.removeEventListener(eventname, callback);
+
+- __ref__: reference to the `InAppBrowser` window. _(InAppBrowser)_
+
+- __eventname__: the event to stop listening for. _(String)_
+
+  - __loadstart__: event fires when the `InAppBrowser` starts to load a URL.
+  - __loadstop__: event fires when the `InAppBrowser` finishes loading a URL.
+  - __loaderror__: event fires when the `InAppBrowser` encounters an error loading a URL.
+  - __exit__: event fires when the `InAppBrowser` window is closed.
+  - __message__: event fires when the `InAppBrowser` receives a message posted from the page loaded inside the `InAppBrowser` Webview.
+
+- __callback__: the function to execute when the event fires.
+The function is passed an `InAppBrowserEvent` object.
+
+### Supported Platforms
+
+- Android
+- Browser
+- iOS
+- Windows
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+    var myCallback = function(event) { alert(event.url); }
+    ref.addEventListener('loadstart', myCallback);
+    ref.removeEventListener('loadstart', myCallback);
+
+## InAppBrowser.close
+
+> Closes the `InAppBrowser` window.
+
+    ref.close();
+
+- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_
+
+### Supported Platforms
+
+- Android
+- Browser
+- iOS
+- Windows
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+    ref.close();
+
+## InAppBrowser.show
+
+> Displays an InAppBrowser window that was opened hidden. Calling this has no effect if the InAppBrowser was already visible.
+
+    ref.show();
+
+- __ref__: reference to the InAppBrowser window (`InAppBrowser`)
+
+### Supported Platforms
+
+- Android
+- Browser
+- iOS
+- Windows
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'hidden=yes');
+    // some time later...
+    ref.show();
+
+## InAppBrowser.hide
+
+> Hides the InAppBrowser window. Calling this has no effect if the InAppBrowser was already hidden.
+
+    ref.hide();
+
+- __ref__: reference to the InAppBrowser window (`InAppBrowser`)
+
+### Supported Platforms
+
+- Android
+- iOS
+- Windows
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank');
+    // some time later...
+    ref.hide();
+
+## InAppBrowser.executeScript
+
+> Injects JavaScript code into the `InAppBrowser` window. (Only available when the target is set to `'_blank'`)
+
+    ref.executeScript(details, callback);
+
+- __ref__: reference to the `InAppBrowser` window. _(InAppBrowser)_
+
+- __injectDetails__: details of the script to run, specifying either a `file` or `code` key. _(Object)_
+  - __file__: URL of the script to inject.
+  - __code__: Text of the script to inject.
+
+- __callback__: the function that executes after the JavaScript code is injected.
+    - If the injected script is of type `code`, the callback executes
+      with a single parameter, which is the return value of the
+      script, wrapped in an `Array`. For multi-line scripts, this is
+      the return value of the last statement, or the last expression
+      evaluated.
+
+### Supported Platforms
+
+- Android
+- Browser
+- iOS
+- Windows
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+    ref.addEventListener('loadstop', function() {
+        ref.executeScript({file: "myscript.js"});
+    });
+
+### Browser Quirks
+
+- only __code__ key is supported.
+
+### Windows Quirks
+
+Due to [MSDN docs](https://msdn.microsoft.com/en-us/library/windows.ui.xaml.controls.webview.invokescriptasync.aspx) the invoked script can return only string values, otherwise the parameter, passed to __callback__ will be `[null]`.
+
+## InAppBrowser.insertCSS
+
+> Injects CSS into the `InAppBrowser` window. (Only available when the target is set to `'_blank'`)
+
+    ref.insertCSS(details, callback);
+
+- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_
+
+- __injectDetails__: details of the script to run, specifying either a `file` or `code` key. _(Object)_
+  - __file__: URL of the stylesheet to inject.
+  - __code__: Text of the stylesheet to inject.
+
+- __callback__: the function that executes after the CSS is injected.
+
+### Supported Platforms
+
+- Android
+- iOS
+- Windows
+
+### Quick Example
+
+    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
+    ref.addEventListener('loadstop', function() {
+        ref.insertCSS({file: "mystyles.css"});
+    });
+__
+
+## <a id="sample"></a>Sample: Show help pages with an InAppBrowser
+
+You can use this plugin to show helpful documentation pages within your app. Users can view online help documents and then close them without leaving the app.
+
+Here's a few snippets that show how you do this.
+
+* [Give users a way to ask for help](#give).
+* [Load a help page](#load).
+* [Let users know that you're getting their page ready](#let).
+* [Show the help page](#show).
+* [Handle page errors](#handle).
+
+### <a id="give"></a>Give users a way to ask for help
+
+There's lots of ways to do this in your app. A drop down list is a simple way to do that.
+
+```html
+
+<select id="help-select">
+    <option value="default">Need help?</option>
+    <option value="article">Show me a helpful article</option>
+    <option value="video">Show me a helpful video</option>
+    <option value="search">Search for other topics</option>
+</select>
+
+```
+
+Gather the users choice in the ``onDeviceReady`` function of the page and then send an appropriate URL to a helper function in some shared library file. Our helper function is named ``showHelp()`` and we'll write that function next.
+
+```javascript
+
+$('#help-select').on('change', function (e) {
+
+    var url;
+
+    switch (this.value) {
+
+        case "article":
+            url = "https://cordova.apache.org/docs/en/latest/"
+                        + "reference/cordova-plugin-inappbrowser/index.html";
+            break;
+
+        case "video":
+            url = "https://youtu.be/F-GlVrTaeH0";
+            break;
+
+        case "search":
+            url = "https://www.google.com/#q=inAppBrowser+plugin";
+            break;
+    }
+
+    showHelp(url);
+
+});
+
+```
+
+### <a id="load"></a>Load a help page
+
+We'll use the ``open`` function to load the help page. We're setting the ``hidden`` property to ``yes`` so that we can show the browser only after the page content has loaded. That way, users don't see a blank browser while they wait for content to appear. When the ``loadstop`` event is raised, we'll know when the content has loaded. We'll handle that event shortly.
+
+```javascript
+
+function showHelp(url) {
+
+    var target = "_blank";
+
+    var options = "location=yes,hidden=yes";
+
+    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);
+
+    inAppBrowserRef.addEventListener('loadstart', loadStartCallBack);
+
+    inAppBrowserRef.addEventListener('loadstop', loadStopCallBack);
+
+    inAppBrowserRef.addEventListener('loaderror', loadErrorCallBack);
+
+}
+
+```
+
+### <a id="let"></a>Let users know that you're getting their page ready
+
+Because the browser doesn't immediately appear, we can use the ``loadstart`` event to show a status message, progress bar, or other indicator. This assures users that content is on the way.
+
+```javascript
+
+function loadStartCallBack() {
+
+    $('#status-message').text("loading please wait ...");
+
+}
+
+```
+
+### <a id="show"></a>Show the help page
+
+When the ``loadstopcallback`` event is raised, we know that the content has loaded and we can make the browser visible. This sort of trick can create the impression of better performance. The truth is that whether you show the browser before content loads or not, the load times are exactly the same.
+
+```javascript
+
+function loadStopCallBack() {
+
+    if (inAppBrowserRef != undefined) {
+
+        inAppBrowserRef.insertCSS({ code: "body{font-size: 25px;}" });
+
+        $('#status-message').text("");
+
+        inAppBrowserRef.show();
+    }
+
+}
+
+```
+You might have noticed the call to the ``insertCSS`` function. This serves no particular purpose in our scenario. But it gives you an idea of why you might use it. In this case, we're just making sure that the font size of your pages have a certain size. You can use this function to insert any CSS style elements. You can even point to a CSS file in your project.
+
+### <a id="handle"></a>Handle page errors
+
+Sometimes a page no longer exists, a script error occurs, or a user lacks permission to view the resource. How or if you handle that situation is completely up to you and your design. You can let the browser show that message or you can present it in another way.
+
+We'll try to show that error in a message box. We can do that by injecting a script that calls the ``alert`` function. That said, this won't work in browsers on Windows devices so we'll have to look at the parameter of the ``executeScript`` callback function to see if our attempt worked. If it didn't work out for us, we'll just show the error message in a ``<div>`` on the page.
+
+```javascript
+
+function loadErrorCallBack(params) {
+
+    $('#status-message').text("");
+
+    var scriptErrorMesssage =
+       "alert('Sorry we cannot open that page. Message from the server is : "
+       + params.message + "');"
+
+    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);
+
+    inAppBrowserRef.close();
+
+    inAppBrowserRef = undefined;
+
+}
+
+function executeScriptCallBack(params) {
+
+    if (params[0] == null) {
+
+        $('#status-message').text(
+           "Sorry we couldn't open that page. Message from the server is : '"
+           + params.message + "'");
+    }
+
+}
+
+```
+
+## More Usage Info
+
+### Local Urls ( source is in the app package )
+```
+var iab = cordova.InAppBrowser;
+
+iab.open('local-url.html');                  // loads in the Cordova WebView
+iab.open('local-url.html', '_self');         // loads in the Cordova WebView
+iab.open('local-url.html', '_system');       // Security error: system browser, but url will not load (iOS)
+iab.open('local-url.html', '_blank');        // loads in the InAppBrowser
+iab.open('local-url.html', 'random_string'); // loads in the InAppBrowser
+iab.open('local-url.html', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar
+
+```
+
+
+
+### Whitelisted Content
+
+```
+var iab = cordova.InAppBrowser;
+
+iab.open('http://whitelisted-url.com');                  // loads in the Cordova WebView
+iab.open('http://whitelisted-url.com', '_self');         // loads in the Cordova WebView
+iab.open('http://whitelisted-url.com', '_system');       // loads in the system browser
+iab.open('http://whitelisted-url.com', '_blank');        // loads in the InAppBrowser
+iab.open('http://whitelisted-url.com', 'random_string'); // loads in the InAppBrowser
+
+iab.open('http://whitelisted-url.com', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar
+
+```
+
+### Urls that are not white-listed
+
+```
+var iab = cordova.InAppBrowser;
+
+iab.open('http://url-that-fails-whitelist.com');                  // loads in the InAppBrowser
+iab.open('http://url-that-fails-whitelist.com', '_self');         // loads in the InAppBrowser
+iab.open('http://url-that-fails-whitelist.com', '_system');       // loads in the system browser
+iab.open('http://url-that-fails-whitelist.com', '_blank');        // loads in the InAppBrowser
+iab.open('http://url-that-fails-whitelist.com', 'random_string'); // loads in the InAppBrowser
+iab.open('http://url-that-fails-whitelist.com', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar
+
+```
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/RELEASENOTES.md b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/RELEASENOTES.md
new file mode 100644
index 000000000..400728062
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/RELEASENOTES.md
@@ -0,0 +1,776 @@
+<!--
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+# 
+# http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+#  KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+-->
+# Release Notes
+
+### 5.0.0 (Feb 10, 2021)
+* [GH-828](https://github.com/apache/cordova-plugin-inappbrowser/pull/828) feat(ios): add `InAppBrowser`StatusBarStyle 'darkcontent' configuration option
+* [GH-823](https://github.com/apache/cordova-plugin-inappbrowser/pull/823) chore: bump engines requirements
+* [GH-824](https://github.com/apache/cordova-plugin-inappbrowser/pull/824) breaking: cleanup code for old **Android** versions
+* [GH-825](https://github.com/apache/cordova-plugin-inappbrowser/pull/825) (ios): rename CDVWKProcessPoolFactory
+* [GH-826](https://github.com/apache/cordova-plugin-inappbrowser/pull/826) ci: add node-14.x to workflow
+* [GH-821](https://github.com/apache/cordova-plugin-inappbrowser/pull/821) breaking(android): replace magic numbers with **Android**.os.Build constants
+* [GH-717](https://github.com/apache/cordova-plugin-inappbrowser/pull/717) ci(ios): remove wkwebview plugin
+
+### 4.1.0 (Nov 17, 2020)
+* [GH-792](https://github.com/apache/cordova-plugin-inappbrowser/pull/792) fix(android): Add mitigation strategy for CVE-2020-6506
+* [GH-817](https://github.com/apache/cordova-plugin-inappbrowser/pull/817) Updated typings
+* [GH-803](https://github.com/apache/cordova-plugin-inappbrowser/pull/803) fix(android): allow compilation in old `cordova-android` versions
+* [GH-688](https://github.com/apache/cordova-plugin-inappbrowser/pull/688) (ios): allow to set "preferredContentMode"
+* [GH-768](https://github.com/apache/cordova-plugin-inappbrowser/pull/768) ci(travis): update osx xcode image
+* add documentation for `InAppBrowser`StatusBarStyle preference
+* undo whitespace changes due to editor preferrences
+* [GH-728](https://github.com/apache/cordova-plugin-inappbrowser/pull/728) **iOS**: added `InAppBrowser`StatusBarStyle preference
+* [GH-767](https://github.com/apache/cordova-plugin-inappbrowser/pull/767) ci(travis): updates **Android** API level
+* (ios): Fix incorrect view height from the second open time
+* [GH-748](https://github.com/apache/cordova-plugin-inappbrowser/pull/748) chore: adds package-lock file
+* [GH-746](https://github.com/apache/cordova-plugin-inappbrowser/pull/746) chore(npm): use short notation in `package.json`
+* [GH-747](https://github.com/apache/cordova-plugin-inappbrowser/pull/747) refactor(eslint): use cordova-eslint /w fix
+* [GH-737](https://github.com/apache/cordova-plugin-inappbrowser/pull/737) fix(ios): exit event not fired on swipe down
+
+### 4.0.0 (Jun 09, 2020)
+* [GH-715](https://github.com/apache/cordova-plugin-inappbrowser/pull/715) (ios): fix regression in 2706f34
+* [GH-685](https://github.com/apache/cordova-plugin-inappbrowser/pull/685) chore: update install engines
+* [GH-656](https://github.com/apache/cordova-plugin-inappbrowser/pull/656) (ios) Remove fake status bar with hardcoded height to fix issues in **iOS** devices with a notch
+* [GH-693](https://github.com/apache/cordova-plugin-inappbrowser/pull/693) fix(ios): Allow loading local html files
+* [GH-293](https://github.com/apache/cordova-plugin-inappbrowser/pull/293)  **Android**: SSL errors handling in **Android**
+* [GH-672](https://github.com/apache/cordova-plugin-inappbrowser/pull/672) fix(ios): prevent statusbar rotation after closing `InAppBrowser`
+* chore(asf): update git notification settings
+* [GH-669](https://github.com/apache/cordova-plugin-inappbrowser/pull/669) Allow App using `InAppBrowser` to be hosted in a cross-origin iframe
+* [GH-600](https://github.com/apache/cordova-plugin-inappbrowser/pull/600) (all platforms): remove "window.open" overwrite
+* [GH-670](https://github.com/apache/cordova-plugin-inappbrowser/pull/670) chore: bump version to 4.0.0-dev
+* Update CONTRIBUTING.md
+* [GH-662](https://github.com/apache/cordova-plugin-inappbrowser/pull/662) docs: replaces outdated transition and presentation style links
+* [GH-666](https://github.com/apache/cordova-plugin-inappbrowser/pull/666) chore: remove deprecated orientation methods
+* [GH-515](https://github.com/apache/cordova-plugin-inappbrowser/pull/515) Fix incorrect TypeScript typings
+* [GH-654](https://github.com/apache/cordova-plugin-inappbrowser/pull/654) add check for openInSystem postNotification
+* [GH-659](https://github.com/apache/cordova-plugin-inappbrowser/pull/659) ci: updates Node.js versions
+* [GH-658](https://github.com/apache/cordova-plugin-inappbrowser/pull/658) chore(npm): improve ignore list
+* [GH-442](https://github.com/apache/cordova-plugin-inappbrowser/pull/442) fix(android): Reset lefttoright if not set
+* [GH-648](https://github.com/apache/cordova-plugin-inappbrowser/pull/648) (android) Correcting the documentation regarding lefttoright opt…
+* [GH-634](https://github.com/apache/cordova-plugin-inappbrowser/pull/634) (android) Added option to turn on/off fullscreen mode in **Android**
+* [GH-616](https://github.com/apache/cordova-plugin-inappbrowser/pull/616) (android) `InAppBrowser`: java.lang.IllegalArgumentException
+* [GH-635](https://github.com/apache/cordova-plugin-inappbrowser/pull/635) breaking(ios): remove UIWebView
+
+### 3.2.0 (Jan 04, 2020)
+* [GH-503](https://github.com/apache/cordova-plugin-inappbrowser/pull/503) Defensive code to prevent NULL reference exceptions for async
+* [GH-584](https://github.com/apache/cordova-plugin-inappbrowser/pull/584) Add compile-time decision for disabling UIWebView
+* [GH-524](https://github.com/apache/cordova-plugin-inappbrowser/pull/524) Replace "beforeload" with BEFORELOAD
+* [GH-568](https://github.com/apache/cordova-plugin-inappbrowser/pull/568) Update missing closed brace to the insert.CSS
+* [GH-401](https://github.com/apache/cordova-plugin-inappbrowser/pull/401) Move createIframeBridge to injectDeferredObject
+* [GH-534](https://github.com/apache/cordova-plugin-inappbrowser/pull/534) Fix `InAppBrowser` not opening on **iOS** 13
+* ci(travis) Upgrade to node8
+
+### 3.1.0 (Jun 27, 2019)
+
+-   chore: fix repo and issue urls and license in package.json and plugin.xml ([`8edfb9e`](https://github.com/apache/cordova-plugin-inappbrowser/commit/8edfb9e))
+-   chore: unknown changes because of linebreak change in binary files ([`e44ad91`](https://github.com/apache/cordova-plugin-inappbrowser/commit/e44ad91))
+-   build: add `.npmignore` to remove unneeded files from npm package ([`0ec4a11`](https://github.com/apache/cordova-plugin-inappbrowser/commit/0ec4a11))
+-   build: add `.gitattributes` to force LF (instead of possible CRLF on Windows) ([`2751255`](https://github.com/apache/cordova-plugin-inappbrowser/commit/2751255))
+-   ci(travis): Update Travis CI configuration for new paramedic ([#478](https://github.com/apache/cordova-plugin-inappbrowser/issues/478)) ([`c2bb6c1`](https://github.com/apache/cordova-plugin-inappbrowser/commit/c2bb6c1))
+-   docs: remove outdated translations ([`cc5ee00`](https://github.com/apache/cordova-plugin-inappbrowser/commit/cc5ee00))
+-   fix(android): Fix beforeload for Android &lt;= 7 ([#427](https://github.com/apache/cordova-plugin-inappbrowser/issues/427)) ([`94fec84`](https://github.com/apache/cordova-plugin-inappbrowser/commit/94fec84))
+-   ci(travis) Fix failing CI tests ([#460](https://github.com/apache/cordova-plugin-inappbrowser/issues/460)) ([`a162bd9`](https://github.com/apache/cordova-plugin-inappbrowser/commit/a162bd9))
+-   test: Fix test spec.5 to close inappbrowser after loadstop event ([#440](https://github.com/apache/cordova-plugin-inappbrowser/issues/440)) ([`5f1afbd`](https://github.com/apache/cordova-plugin-inappbrowser/commit/5f1afbd), [`af44235`](https://github.com/apache/cordova-plugin-inappbrowser/commit/af44235))
+-   fix(android): Prevent malformed callbackId from reaching app cordova view ([#436](https://github.com/apache/cordova-plugin-inappbrowser/issues/436)) ([`6861084`](https://github.com/apache/cordova-plugin-inappbrowser/commit/6861084), [`c95dbcb`](https://github.com/apache/cordova-plugin-inappbrowser/commit/c95dbcb))
+-   feat: [CB-13969](https://issues.apache.org/jira/browse/CB-13969): Allow close button and navigation buttons positions to be swapped ([#262](https://github.com/apache/cordova-plugin-inappbrowser/issues/262)) ([`d01bd25`](https://github.com/apache/cordova-plugin-inappbrowser/commit/d01bd25), [`f861655`](https://github.com/apache/cordova-plugin-inappbrowser/commit/f861655), [`9c7c2f3`](https://github.com/apache/cordova-plugin-inappbrowser/commit/9c7c2f3), [`3c0a42e`](https://github.com/apache/cordova-plugin-inappbrowser/commit/3c0a42e), [`5359f6c`](https://github.com/apache/cordova-plugin-inappbrowser/commit/5359f6c), [`df84dda`](https://github.com/apache/cordova-plugin-inappbrowser/commit/df84dda), [`2bcec40`](https://github.com/apache/cordova-plugin-inappbrowser/commit/2bcec40), [`fc0c560`](https://github.com/apache/cordova-plugin-inappbrowser/commit/fc0c560), [`5ead1e6`](https://github.com/apache/cordova-plugin-inappbrowser/commit/5ead1e6), [`c7931fa`](https://github.com/apache/cordova-plugin-inappbrowser/commit/c7931fa), [`e2adf1b`](https://github.com/apache/cordova-plugin-inappbrowser/commit/e2adf1b), [`4adf4c7`](https://github.com/apache/cordova-plugin-inappbrowser/commit/4adf4c7), [`cbe3a42`](https://github.com/apache/cordova-plugin-inappbrowser/commit/cbe3a42), [`74ccef1`](https://github.com/apache/cordova-plugin-inappbrowser/commit/74ccef1), [`ec6af56`](https://github.com/apache/cordova-plugin-inappbrowser/commit/ec6af56), [`b06ad8e`](https://github.com/apache/cordova-plugin-inappbrowser/commit/b06ad8e), [`313e0ae`](https://github.com/apache/cordova-plugin-inappbrowser/commit/313e0ae), [`05e37a1`](https://github.com/apache/cordova-plugin-inappbrowser/commit/05e37a1), [`0c6189e`](https://github.com/apache/cordova-plugin-inappbrowser/commit/0c6189e), [`d940b59`](https://github.com/apache/cordova-plugin-inappbrowser/commit/d940b59), [`f3d7f72`](https://github.com/apache/cordova-plugin-inappbrowser/commit/f3d7f72))
+-   docs: Add headline to window.open documentation ([#406](https://github.com/apache/cordova-plugin-inappbrowser/issues/406)) ([`92243cd`](https://github.com/apache/cordova-plugin-inappbrowser/commit/92243cd))
+-   fix(ios): Fix iframes in iOS/WKWebView which were broken by [#418](https://github.com/apache/cordova-plugin-inappbrowser/issues/418) ([#425](https://github.com/apache/cordova-plugin-inappbrowser/issues/425)) ([`388e3f6`](https://github.com/apache/cordova-plugin-inappbrowser/commit/388e3f6))
+-   chore(github): Add or update GitHub pull request and issue template ([`ae329bc`](https://github.com/apache/cordova-plugin-inappbrowser/commit/ae329bc))
+-   fix(ios): Handle non-default target attribute values (e.g. target=on links in WKWebView implementation on iOS ([#418](https://github.com/apache/cordova-plugin-inappbrowser/issues/418)) ([`9f4b729`](https://github.com/apache/cordova-plugin-inappbrowser/commit/9f4b729))
+-   fix(types): remove unused replace parameter ([#410](https://github.com/apache/cordova-plugin-inappbrowser/issues/410)) ([`6db2f2d`](https://github.com/apache/cordova-plugin-inappbrowser/commit/6db2f2d))
+-   documentation: Example documentation - Fix callBack function name ([#383](https://github.com/apache/cordova-plugin-inappbrowser/issues/383)) ([`a890e60`](https://github.com/apache/cordova-plugin-inappbrowser/commit/a890e60), [`2500b08`](https://github.com/apache/cordova-plugin-inappbrowser/commit/2500b08))
+-   fix: Fix beforeload to work with POST requests ([#367](https://github.com/apache/cordova-plugin-inappbrowser/issues/367)) ([`632a395`](https://github.com/apache/cordova-plugin-inappbrowser/commit/632a395))
+-   feat: (iOS & Android) Add postMessage API support ([#362](https://github.com/apache/cordova-plugin-inappbrowser/issues/362)) ([`c54d100`](https://github.com/apache/cordova-plugin-inappbrowser/commit/c54d100))
+-   fix(ios): Fixes loadAfterBeforeload on iOS. ([#350](https://github.com/apache/cordova-plugin-inappbrowser/issues/350)) ([`0fd43ae`](https://github.com/apache/cordova-plugin-inappbrowser/commit/0fd43ae))
+-   fix(ios): Fix crashes when using WKWebView implementation on iOS 9. ([#337](https://github.com/apache/cordova-plugin-inappbrowser/issues/337)) ([`3b82c16`](https://github.com/apache/cordova-plugin-inappbrowser/commit/3b82c16))
+-   fix(ios): Fix iOS CDVWKInAppBrowser evaluateJavascript method randomly gets blocked on ios 12 ([#341](https://github.com/apache/cordova-plugin-inappbrowser/issues/341)) ([`978b147`](https://github.com/apache/cordova-plugin-inappbrowser/commit/978b147))
+-   docs: remove unwanted information in README table ([#308](https://github.com/apache/cordova-plugin-inappbrowser/issues/308)) ([`3eadde6`](https://github.com/apache/cordova-plugin-inappbrowser/commit/3eadde6))
+-   fix(ios): This lets the default window layering do it's thing. ([#336](https://github.com/apache/cordova-plugin-inappbrowser/issues/336)) ([`c24bb46`](https://github.com/apache/cordova-plugin-inappbrowser/commit/c24bb46), [`27fe8ec`](https://github.com/apache/cordova-plugin-inappbrowser/commit/27fe8ec))
+-   feat(ios): [CB-7179](https://issues.apache.org/jira/browse/CB-7179) (iOS): Add optional WKWebView support for iOS ([#271](https://github.com/apache/cordova-plugin-inappbrowser/issues/271)) ([`10a0669`](https://github.com/apache/cordova-plugin-inappbrowser/commit/10a0669), [`3927b8f`](https://github.com/apache/cordova-plugin-inappbrowser/commit/3927b8f), [`8248215`](https://github.com/apache/cordova-plugin-inappbrowser/commit/8248215), [`61014dd`](https://github.com/apache/cordova-plugin-inappbrowser/commit/61014dd), [`c41f5b5`](https://github.com/apache/cordova-plugin-inappbrowser/commit/c41f5b5), [`19c6dfe`](https://github.com/apache/cordova-plugin-inappbrowser/commit/19c6dfe), [`7f5fa2a`](https://github.com/apache/cordova-plugin-inappbrowser/commit/7f5fa2a), [`5d2df21`](https://github.com/apache/cordova-plugin-inappbrowser/commit/5d2df21), [`86cc778`](https://github.com/apache/cordova-plugin-inappbrowser/commit/86cc778), [`cbfa195`](https://github.com/apache/cordova-plugin-inappbrowser/commit/cbfa195), [`52e3534`](https://github.com/apache/cordova-plugin-inappbrowser/commit/52e3534), [`8165232`](https://github.com/apache/cordova-plugin-inappbrowser/commit/8165232), [`e2210bd`](https://github.com/apache/cordova-plugin-inappbrowser/commit/e2210bd), [`dc7fa34`](https://github.com/apache/cordova-plugin-inappbrowser/commit/dc7fa34), [`b48e02f`](https://github.com/apache/cordova-plugin-inappbrowser/commit/b48e02f), [`27e6c67`](https://github.com/apache/cordova-plugin-inappbrowser/commit/27e6c67))
+-   docs: remove JIRA link ([`d9cafcd`](https://github.com/apache/cordova-plugin-inappbrowser/commit/d9cafcd))
+-   chore(types): [CB-12941](https://issues.apache.org/jira/browse/CB-12941): update typings ([#267](https://github.com/apache/cordova-plugin-inappbrowser/issues/267)) ([`a0c267f`](https://github.com/apache/cordova-plugin-inappbrowser/commit/a0c267f))
+-   feat: [CB-14188](https://issues.apache.org/jira/browse/CB-14188): add beforeload event, catching navigation before it happens ([#276](https://github.com/apache/cordova-plugin-inappbrowser/issues/276)) ([`228703a`](https://github.com/apache/cordova-plugin-inappbrowser/commit/228703a), [`eafaeda`](https://github.com/apache/cordova-plugin-inappbrowser/commit/eafaeda))
+-   ci(travis): reenable testing on all platforms ([`0ed0bf5`](https://github.com/apache/cordova-plugin-inappbrowser/commit/0ed0bf5))
+-   ci(travis): also accept terms for android sdk `android-27` ([`f8ad528`](https://github.com/apache/cordova-plugin-inappbrowser/commit/f8ad528))
+-   fix(android): [CB-10795](https://issues.apache.org/jira/browse/CB-10795): Exclude current app from external intent list ([#154](https://github.com/apache/cordova-plugin-inappbrowser/issues/154)) ([`a078337`](https://github.com/apache/cordova-plugin-inappbrowser/commit/a078337))
+-   fix(ios): [CB-14234](https://issues.apache.org/jira/browse/CB-14234): Don't call handleOpenURL for system URLs ([#278](https://github.com/apache/cordova-plugin-inappbrowser/issues/278)) ([`cf58b04`](https://github.com/apache/cordova-plugin-inappbrowser/commit/cf58b04))
+-   fix(ios): [CB-12875](https://issues.apache.org/jira/browse/CB-12875): (iOS) Pushes the inappbrowser window to a higher ui level than the existing apps window. ([#284](https://github.com/apache/cordova-plugin-inappbrowser/issues/284)) ([`dc5329d`](https://github.com/apache/cordova-plugin-inappbrowser/commit/dc5329d))
+-   ci: Quick CI fixes ([#277](https://github.com/apache/cordova-plugin-inappbrowser/issues/277))  ([`de86501`](https://github.com/apache/cordova-plugin-inappbrowser/commit/de86501), [`07d9a99`](https://github.com/apache/cordova-plugin-inappbrowser/commit/07d9a99), [`81f1437`](https://github.com/apache/cordova-plugin-inappbrowser/commit/81f1437), [`a464ea6`](https://github.com/apache/cordova-plugin-inappbrowser/commit/a464ea6), [`e75fe14`](https://github.com/apache/cordova-plugin-inappbrowser/commit/e75fe14), [`eb245ec`](https://github.com/apache/cordova-plugin-inappbrowser/commit/eb245ec))
+-   fix(ios): [CB-12922](https://issues.apache.org/jira/browse/CB-12922) (ios): fix In-app browser does not cede control ([#272](https://github.com/apache/cordova-plugin-inappbrowser/issues/272)) ([`dac06aa`](https://github.com/apache/cordova-plugin-inappbrowser/commit/dac06aa), [`9cc7f69`](https://github.com/apache/cordova-plugin-inappbrowser/commit/9cc7f69))
+-   fix(android): [CB-14061](https://issues.apache.org/jira/browse/CB-14061): (android) comply with RFC 3986 for custom URL scheme handling ([#269](https://github.com/apache/cordova-plugin-inappbrowser/issues/269)) ([`f57ede9`](https://github.com/apache/cordova-plugin-inappbrowser/commit/f57ede9), [`26cf6e4`](https://github.com/apache/cordova-plugin-inappbrowser/commit/26cf6e4))
+-   fix(android): [CB-14048](https://issues.apache.org/jira/browse/CB-14048): (android) allowedSchemes check empty string fix ([#268](https://github.com/apache/cordova-plugin-inappbrowser/issues/268)) ([`57eda78`](https://github.com/apache/cordova-plugin-inappbrowser/commit/57eda78), [`33aff11`](https://github.com/apache/cordova-plugin-inappbrowser/commit/33aff11))
+
+
+### 3.0.0 (Apr 12, 2018)
+* [CB-13659](https://issues.apache.org/jira/browse/CB-13659) **iOS** Add hidespinner option
+* In file `AppBrowser.java`: New code within `shouldOverrideUrlLoading()` to check for whitelisting custom schemes via a new `AllowedSchemes` preference configuration item.  Allows custom schemes like `mycoolapp://` or `wevotetwitterscheme://`
+* `InAppBrowser.java`: New method `isURLWhileListed` to check for whitelisting of `AllowedSchemes` in a new preference configuration item. There is a new check in `shouldOverrideUrlLoading`, to allow whitelisted custom schemes like "mycoolapp://"
+* Add customisation of the navigation buttons for **iOS**
+* Fix navigation buttons on **iOS**
+
+### 2.0.2 (Jan 24, 2018)
+* [CB-13791](https://issues.apache.org/jira/browse/CB-13791) Add **Android** support for a footer close button
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) restore gitignore to default
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) restore gitignore to default
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) restore gitignore to default
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) restore gitignore to default
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) ignore idea folder
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) change hidetoolbarnavigationbuttons to hidenavigationbuttons in iso
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) **Android** works well now, all changes are now documented
+* [CB-13409](https://issues.apache.org/jira/browse/CB-13409) Lets user adjust color of toolbar, hide navigation buttons and set custom text on close button
+* [CB-13746](https://issues.apache.org/jira/browse/CB-13746) Add build-tools-26.0.2 to travis
+
+### 2.0.1 (Dec 27, 2017)
+* [CB-13699](https://issues.apache.org/jira/browse/CB-13699) Fix to allow 2.0.0 version install
+
+### 2.0.0 (Dec 15, 2017)
+* [CB-13662](https://issues.apache.org/jira/browse/CB-13662) remove deprecated platforms
+
+### 1.7.2 (Nov 06, 2017)
+* [CB-13473](https://issues.apache.org/jira/browse/CB-13473) (CI) Removed **Browser** builds from AppVeyor
+* [CB-13472](https://issues.apache.org/jira/browse/CB-13472) (CI) Fixed Travis **Android** builds again
+* [CB-13347](https://issues.apache.org/jira/browse/CB-13347) Enable thirdparty cookies on `>=Android 5.0` device
+* [CB-12895](https://issues.apache.org/jira/browse/CB-12895) added `eslint` and removed `jshint`
+* [CB-12975](https://issues.apache.org/jira/browse/CB-12975) (docs) Resort and reword `cordova.InAppBrowser.open` `options` lists
+* [CB-12586](https://issues.apache.org/jira/browse/CB-12586) (iOS) fix method `hide` doesn't work
+* [CB-12847](https://issues.apache.org/jira/browse/CB-12847) added `bugs` entry to `package.json`.
+
+### 1.7.1 (Apr 27, 2017)
+* [CB-12622](https://issues.apache.org/jira/browse/CB-12622) Added **Android 6.0** build badges to `README`
+* [CB-12266](https://issues.apache.org/jira/browse/CB-12266) (browser platform) loadstop event.url is now a string instead of an object, aligning it with the other platforms.
+* [CB-12685](https://issues.apache.org/jira/browse/CB-12685) added `package.json` to tests folder
+* [CB-11248](https://issues.apache.org/jira/browse/CB-11248) `InAppBrowser` no focus on input text fields
+
+### 1.7.0 (Feb 28, 2017)
+* [CB-12366](https://issues.apache.org/jira/browse/CB-12366) **iOS:** Reduce `tmpWindow` level to prevent overlapping statusbar
+* [CB-12364](https://issues.apache.org/jira/browse/CB-12364) **Windows:** `Inappbrowser` inject file manual tests are not working
+* [CB-12353](https://issues.apache.org/jira/browse/CB-12353) Corrected merges usage in `plugin.xml`
+* [CB-12369](https://issues.apache.org/jira/browse/CB-12369) Add plugin typings from `DefinitelyTyped`
+* [CB-12363](https://issues.apache.org/jira/browse/CB-12363) Added build badges for **iOS 9.3** and **iOS 10.0** 
+* [CB-9148](https://issues.apache.org/jira/browse/CB-9148) **Android:** Add Support for `input[type=file]` File Chooser
+* [CB-11136](https://issues.apache.org/jira/browse/CB-11136) (ios) Fix `InAppBrowser` when closing with `WKWebView`
+* [CB-10799](https://issues.apache.org/jira/browse/CB-10799) **iOS:** fix toolbar is shown in incorrect position when in-call status bar
+
+### 1.6.1 (Dec 14, 2016)
+* [CB-12237](https://issues.apache.org/jira/browse/CB-12237) - Update version in package.json to correct 1.6.1-dev
+* [CB-12236](https://issues.apache.org/jira/browse/CB-12236) - Fixed RELEASENOTES for cordova-plugin-inappbrowser
+* [CB-12230](https://issues.apache.org/jira/browse/CB-12230) Removed Windows 8.1 build badges
+* [CB-12224](https://issues.apache.org/jira/browse/CB-12224) Incremented plugin version.
+
+### 1.6.0 (Dec 07, 2016)
+* [CB-12224](https://issues.apache.org/jira/browse/CB-12224) Updated version and RELEASENOTES.md for release 1.6.0
+* [CB-7608](https://issues.apache.org/jira/browse/CB-7608) (android) document useWidthViewPort
+* add option useWidthViewPort
+* [CB-12184](https://issues.apache.org/jira/browse/CB-12184) executeScript leads to a null pointer on exception on Android.
+* fix(close button): Set correct content description
+* [CB-9274](https://issues.apache.org/jira/browse/CB-9274) Adds missing methods to InAppBrowser to allow compilation for Amazon FireOS.
+* [CB-10973](https://issues.apache.org/jira/browse/CB-10973) inAppBrowser for Windows Platform: wrong height of webview with location=yes
+* Increment plugin minor version because of new hide feature
+* removed duplicate hide method in ios source and add jasmine test cases
+* [CB-8467](https://issues.apache.org/jira/browse/CB-8467)
+* [CB-12010](https://issues.apache.org/jira/browse/CB-12010) (android) Catch FileUriExposedException
+* [CB-11955](https://issues.apache.org/jira/browse/CB-11955) Added Initial OSX platform support
+* [CB-11917](https://issues.apache.org/jira/browse/CB-11917) - Remove pull request template checklist item: "iCLA has been signed and submitted to secretary@apache.org."
+* [CB-11694](https://issues.apache.org/jira/browse/CB-11694) Android: Set hadwareBackButton value according option in cordova.InAppBrowser.open
+* [CB-11832](https://issues.apache.org/jira/browse/CB-11832) Incremented plugin version.
+
+### 1.5.1 (Dec 07, 2016)
+* [CB-7608](https://issues.apache.org/jira/browse/CB-7608) (android) document useWidthViewPort
+* add option useWidthViewPort
+* [CB-12184](https://issues.apache.org/jira/browse/CB-12184) executeScript leads to a null pointer on exception on Android.
+* fix(close button): Set correct content description
+* [CB-9274](https://issues.apache.org/jira/browse/CB-9274) Adds missing methods to InAppBrowser to allow compilation for Amazon FireOS.
+* [CB-10973](https://issues.apache.org/jira/browse/CB-10973) inAppBrowser for Windows Platform: wrong height of webview with location=yes
+* Increment plugin minor version because of new hide feature
+* removed duplicate hide method in ios source and add jasmine test cases
+* [CB-8467](https://issues.apache.org/jira/browse/CB-8467)
+* [CB-12010](https://issues.apache.org/jira/browse/CB-12010) (android) Catch FileUriExposedException
+* [CB-11955](https://issues.apache.org/jira/browse/CB-11955) Added Initial OSX platform support
+* [CB-11917](https://issues.apache.org/jira/browse/CB-11917) - Remove pull request template checklist item: "iCLA has been signed and submitted to secretary@apache.org."
+* [CB-11694](https://issues.apache.org/jira/browse/CB-11694) Android: Set hadwareBackButton value according option in cordova.InAppBrowser.open
+* [CB-11832](https://issues.apache.org/jira/browse/CB-11832) Incremented plugin version.
+* [CB-11832](https://issues.apache.org/jira/browse/CB-11832) Updated version and RELEASENOTES.md for release 1.5.0
+* [CB-11795](https://issues.apache.org/jira/browse/CB-11795) Add 'protective' entry to cordovaDependencies
+* Closing invalid pull request: close #28
+* Closing invalid pull request: close #78
+* Add intent scheme to be handled by OS
+* Plugin uses Android Log class and not Cordova LOG class
+* Adding links to guide content and reference content at the top of the readme file Github: close #163
+* [CB-10973](https://issues.apache.org/jira/browse/CB-10973) inAppBrowser for Browser Platform: wrong height of webview with location=yes
+* Size and position in browser platform
+* [CB-10973](https://issues.apache.org/jira/browse/CB-10973) inAppBrowser for Windows Platform: wrong height of webview with location=yes
+* [CB-11013](https://issues.apache.org/jira/browse/CB-11013) IAB enabling background play of YouTube videos?
+* [CB-10467](https://issues.apache.org/jira/browse/CB-10467) Hardware back button, while InAppBrowser is opened, closes the app too in addition to closing InAppBrowser
+* [CB-11178](https://issues.apache.org/jira/browse/CB-11178) allow to open other apps on iOS 9
+* Closing stale pull request: close #152
+* fix some calls which used api level 16
+* [CB-5402](https://issues.apache.org/jira/browse/CB-5402) added extra content from wiki page
+* doc: do not use `with` in JS samples
+* Closing stale pull request: close #90
+* [CB-2063](https://issues.apache.org/jira/browse/CB-2063) (ios) Fixed presentation style
+* [CB-11012](https://issues.apache.org/jira/browse/CB-11012) added some clarifications about InAppBrowser object
+* [CB-3360](https://issues.apache.org/jira/browse/CB-3360) Set custom inappbrowser user agent for ios
+* Add badges for paramedic builds on Jenkins
+* [CB-11381](https://issues.apache.org/jira/browse/CB-11381) android: Does not pass sonarqube scan
+* Add pull request template.
+* [CB-10866](https://issues.apache.org/jira/browse/CB-10866) Adding engine requirements to package.json
+* [CB-110003](https://issues.apache.org/jira/browse/CB-110003) Adding samples to Readme.
+* [CB-10996](https://issues.apache.org/jira/browse/CB-10996) Adding front matter to README.md
+* [CB-11091](https://issues.apache.org/jira/browse/CB-11091) Incremented plugin version.
+*  Updated version and RELEASENOTES.md for release 1.4.0
+* [CB-7679](https://issues.apache.org/jira/browse/CB-7679) add fix for iOS upload. This closes #139
+* [CB-10944](https://issues.apache.org/jira/browse/CB-10944) : NoSuchMethodError in InAppBrowser plugin
+* [CB-10937](https://issues.apache.org/jira/browse/CB-10937) fix stretched icons
+* [CB-10760](https://issues.apache.org/jira/browse/CB-10760) Fixing README for display on Cordova website
+* [CB-10636](https://issues.apache.org/jira/browse/CB-10636) Add JSHint for plugins
+* Fixes [CB-10607](https://issues.apache.org/jira/browse/CB-10607)
+* [CB-10557](https://issues.apache.org/jira/browse/CB-10557) Incremented plugin version.
+* [CB-10557](https://issues.apache.org/jira/browse/CB-10557) Updated version and RELEASENOTES.md for release 1.3.0
+* [CB-3360](https://issues.apache.org/jira/browse/CB-3360) Set custom inappbrowser user agent for android
+* [CB-10538](https://issues.apache.org/jira/browse/CB-10538) cordova-plugin-inappbrowser timeout issue
+* [CB-10395](https://issues.apache.org/jira/browse/CB-10395) InAppBrowser's WebView not storing cookies reliable on Android
+* chore: edit package.json license to match SPDX id
+* [CB-10305](https://issues.apache.org/jira/browse/CB-10305) Gray bar appears in the wrong place on iOS
+* [CB-7786](https://issues.apache.org/jira/browse/CB-7786) Support mediaPlaybackRequiresUserAction on Android
+* [CB-7500](https://issues.apache.org/jira/browse/CB-7500) executeScript with callback kills/blurs inAppBrowser window on Android
+* [CB-10505](https://issues.apache.org/jira/browse/CB-10505) Incremented plugin version.
+* [CB-10505](https://issues.apache.org/jira/browse/CB-10505) Updated version and RELEASENOTES.md for release 1.2.1
+* handle app store urls in system browser
+* Added missing plugin dependency for manual tests
+* [CB-10451](https://issues.apache.org/jira/browse/CB-10451) InAppBrowser: loadstart event is not triggered on Windows [CB-10452](https://issues.apache.org/jira/browse/CB-10452) InAppBrowser: 'exit' event is not triggered on Windows [CB-10454](https://issues.apache.org/jira/browse/CB-10454) InAppBrowser: 'loaderror' event does not have code and message on Windows [CB-10450](https://issues.apache.org/jira/browse/CB-10450) InAppBrowser: Unable to get property 'canGoBack' of undefined on Windows
+* [CB-6702](https://issues.apache.org/jira/browse/CB-6702) InAppBrowser hangs when opening more than one instance
+* [CB-10456](https://issues.apache.org/jira/browse/CB-10456) InAppBrowser is not closed if I close it programmatically on Android
+* [CB-10441](https://issues.apache.org/jira/browse/CB-10441) Add auto tests for InAppBrowser plugin
+* [CB-10428](https://issues.apache.org/jira/browse/CB-10428) Fix syntax error when browserifying inAppBrowser plugin
+* [CB-10407](https://issues.apache.org/jira/browse/CB-10407) Re-adding onPageStarted to re-add LOAD_START, even though it's in the wrong place
+* [CB-10368](https://issues.apache.org/jira/browse/CB-10368) Incremented plugin version.
+* [CB-10368](https://issues.apache.org/jira/browse/CB-10368) Updated version and RELEASENOTES.md for release 1.2.0
+* [CB-8180](https://issues.apache.org/jira/browse/CB-8180) Changing methods of interception in WebViewClient class
+* Fix lint warnings
+* [CB-10009](https://issues.apache.org/jira/browse/CB-10009) Improve InAppBrowser toolbar look and feel on Windows
+* Using modulemapper
+* Open a new window on the browser platform
+* [CB-10187](https://issues.apache.org/jira/browse/CB-10187) Incremented plugin version.
+* [CB-10187](https://issues.apache.org/jira/browse/CB-10187) Updated version and RELEASENOTES.md for release 1.1.1
+* [CB-9445](https://issues.apache.org/jira/browse/CB-9445) Improves executeScript callbacks on iOS
+* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Incremented plugin version.
+* [CB-10040](https://issues.apache.org/jira/browse/CB-10040) - re-fix: backwards compatible with cordova-ios < 4.0
+* [CB-8534](https://issues.apache.org/jira/browse/CB-8534) Allow plugins to respond to onReceivedHttpAuthRequest. This closes #82
+* [CB-3750](https://issues.apache.org/jira/browse/CB-3750) Fixes spinner on iOS. This closes #89
+* [CB-7696](https://issues.apache.org/jira/browse/CB-7696) Document target=_self behavior for Windows
+* [CB-10040](https://issues.apache.org/jira/browse/CB-10040) - Compile Error in InAppBrowser Plugin for iOS - No known instance method for selector 'URLIsWhitelisted:'
+* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) linked issues in RELEASENOTES.md
+* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Updated version and RELEASENOTES.md for release 1.1.0
+* removed r prefix from tags
+* weak ref type was wrong
+* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Updated RELEASENOTES to be newest to oldest
+* Close #91
+* Close #85
+* Invoke webview if using local file
+* Fixed zIndex issue on Windows 8, 8.1 where InAppBrowser opens behind default app.
+* fix async self usage
+* [CB-9150](https://issues.apache.org/jira/browse/CB-9150) Fix InAppBrowser executeScript crash on Windows if no data returned
+* [CB-10008](https://issues.apache.org/jira/browse/CB-10008) Fix InAppBrowser popup layout on Windows
+* InAppBrowser, iOS: Setting setStatusBarStyle to -1 causes CGContextSaveGState.
+* Fix crash on browser window close (https://issues.apache.org/jira/browse/CB-9167)
+* Close #113
+* add JIRA issue tracker link
+* [CB-9799](https://issues.apache.org/jira/browse/CB-9799) Fixed javaDoc errors.. This closes #119
+* Actually fixing the contribute link.
+* Fixing contribute link.
+* [CB-9760](https://issues.apache.org/jira/browse/CB-9760) InAppBrowser: fallback to default window.open behavior on Ripple
+* Close #114
+* [CB-9378](https://issues.apache.org/jira/browse/CB-9378) Fix InAppBrowser not taking whole screen on Windows
+* remove travis-ci
+* [CB-9158](https://issues.apache.org/jira/browse/CB-9158) - InAppBrowser zoomControls are always set to true
+* [CB-9192](https://issues.apache.org/jira/browse/CB-9192) Incremented plugin version.
+* [CB-9202](https://issues.apache.org/jira/browse/CB-9202) updated repo url to github mirror in package.json
+* [CB-9192](https://issues.apache.org/jira/browse/CB-9192) Updated version and RELEASENOTES.md for release 1.0.1
+* [CB-9128](https://issues.apache.org/jira/browse/CB-9128) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* fix npm md issue
+* [CB-8858](https://issues.apache.org/jira/browse/CB-8858) Incremented plugin version.
+* [CB-8858](https://issues.apache.org/jira/browse/CB-8858) Updated version in package.json for release 1.0.0
+* Revert "CB-8858 Incremented plugin version."
+* [CB-8858](https://issues.apache.org/jira/browse/CB-8858) Incremented plugin version.
+* [CB-8858](https://issues.apache.org/jira/browse/CB-8858) Updated version and RELEASENOTES.md for release 1.0.0
+* [CB-8746](https://issues.apache.org/jira/browse/CB-8746) gave plugin major version bump
+* [CB-7689](https://issues.apache.org/jira/browse/CB-7689) Adds insertCSS support for windows platform
+* [CB-4930](https://issues.apache.org/jira/browse/CB-4930) - (prefix) InAppBrowser should take into account the status bar
+* [CB-8635](https://issues.apache.org/jira/browse/CB-8635) Improves UX on windows platform
+* [CB-8661](https://issues.apache.org/jira/browse/CB-8661) Return executed script result on Windows
+* [CB-8683](https://issues.apache.org/jira/browse/CB-8683) updated wp and browser specific references of old id to new id
+* [CB-8683](https://issues.apache.org/jira/browse/CB-8683) changed plugin-id to pacakge-name
+* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) properly updated translated docs to use new id
+* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) updated translated docs to use new id
+* Use TRAVIS_BUILD_DIR, install paramedic by npm
+* [CB-8432](https://issues.apache.org/jira/browse/CB-8432) Correct styles for browser wrapper to display it correctly on some pages
+* [CB-8659](https://issues.apache.org/jira/browse/CB-8659) - Update InAppBrowser to support both cordova-ios 4.0.x and 3.x (closes #93)
+* [CB-7961](https://issues.apache.org/jira/browse/CB-7961) Add cordova-plugin-inappbrowser support for browser platform
+* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) Updated Readme
+* Update docs for Android zoom=no option
+* Added option to disable/enable zoom controls
+* updated docs, set hardwareback default to true
+* Add a hardwareback option to allow for the hardware back button to go back.
+* [CB-8570](https://issues.apache.org/jira/browse/CB-8570) Integrate TravisCI
+* [CB-8438](https://issues.apache.org/jira/browse/CB-8438) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-8538](https://issues.apache.org/jira/browse/CB-8538) Added package.json file
+* Keep external android pages in a single tab. (close #61)
+* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Add a clobber for `cordova.InAppBrowser.open` (close #80)
+* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Don't clobber `window.open` - Add new symbol/clobber to access open function (`cordova.InAppBrowser.open`) - Change existing tests to use new symbol (i.e. don't rely on plugin clobber of `window.open`) - Add tests to use `window.open` via manual replace with new symbol - Update docs to deprecate plugin clobber of `window.open`
+* [CB-8429](https://issues.apache.org/jira/browse/CB-8429) Incremented plugin version.
+* [CB-8429](https://issues.apache.org/jira/browse/CB-8429) Updated version and RELEASENOTES.md for release 0.6.0
+* Add missing license header for src/ubuntu/InAppBrowser_escapeScript.js
+* [CB-8270](https://issues.apache.org/jira/browse/CB-8270) Remove usage of `[arr JSONString]`, since it's been renamed to `cdv_JSONString`
+* ubuntu: implement inject* functions
+* ubuntu: port to oxide
+* [CB-7897](https://issues.apache.org/jira/browse/CB-7897) Update to work with whilelist plugins in Cordova 4.x
+* [CB-7897](https://issues.apache.org/jira/browse/CB-7897) Update to work with whilelist plugins in Cordova 4.x
+* [CB-8110](https://issues.apache.org/jira/browse/CB-8110) Incremented plugin version.
+* [CB-8110](https://issues.apache.org/jira/browse/CB-8110) Updated version and RELEASENOTES.md for release 0.5.4
+* Amazon specific changes: Removed reference to closebuttoncaption according to https://git-wip-us.apache.org/repos/asf?p=cordova-plugin-inappbrowser.git;a=commit;h=50a78baf22843b0df96ccb4ca83a45bd9ef3fc39
+* [CB-7784](https://issues.apache.org/jira/browse/CB-7784) Exit event is not fired after InAppBrowser closing
+* [CB-7697](https://issues.apache.org/jira/browse/CB-7697) Add locationBar support to InAppBrowser windows platform version
+* [CB-7690](https://issues.apache.org/jira/browse/CB-7690) InAppBrowser loadstart/loadstop events issues
+* [CB-7695](https://issues.apache.org/jira/browse/CB-7695) Fix InAppBrowser injectScriptFile for Windows 8.1 / Windows Phone 8.1
+* [CB-7692](https://issues.apache.org/jira/browse/CB-7692) InAppBrowser local url opening bug in 8.1
+* [CB-7688](https://issues.apache.org/jira/browse/CB-7688) Alert is not supported in InAppBrowser on Windows platform
+* [CB-7977](https://issues.apache.org/jira/browse/CB-7977) Mention deviceready in plugin docs
+* Dropping trailing whitespace
+* [CB-7876](https://issues.apache.org/jira/browse/CB-7876) change test target to avoid undesired redirects
+* [CB-7712](https://issues.apache.org/jira/browse/CB-7712) remove references to closebuttoncaption
+* [CB-7850](https://issues.apache.org/jira/browse/CB-7850) clarify role of whitelist
+* [CB-7720](https://issues.apache.org/jira/browse/CB-7720) check if event is null since OK string from success callback was removed
+* [CB-7700](https://issues.apache.org/jira/browse/CB-7700) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-7471](https://issues.apache.org/jira/browse/CB-7471) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+*  Incremented plugin version.
+*  Updated version and RELEASENOTES.md for release 0.5.3
+* Amazon Specific changes: Added logs and corrected indentation according to 81161ebe668a14f87e1ef4b57f2d300a609b9a8b
+* Windows implementation fixes and improvements
+* zIndex fixed
+* renamed InAppBrowser back to inappbrowser for case sensitive operating systems
+* Clean plugin.xml
+* Update french translation
+* Update doc to add Windows 8
+* Update windows proxy to be both compatible with windows 8 and 8.1
+* Rename windows81 by windows8 in src directory
+* Append Windows 8.1 platform configuration in plugin.xml
+* Append Windows 8.1 proxy using x-ms-webview
+* [CB-7571](https://issues.apache.org/jira/browse/CB-7571) Bump version of nested plugin to match parent plugin
+* [CB-7571](https://issues.apache.org/jira/browse/CB-7571) Incremented plugin version.
+* [CB-7571](https://issues.apache.org/jira/browse/CB-7571) Updated version and RELEASENOTES.md for release 0.5.2
+* [CB-7471](https://issues.apache.org/jira/browse/CB-7471) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-7490](https://issues.apache.org/jira/browse/CB-7490) Fixes InAppBrowser manual tests crash on windows platform
+* [CB-7249](https://issues.apache.org/jira/browse/CB-7249) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-7424](https://issues.apache.org/jira/browse/CB-7424) - Wrong docs: anchor tags are not supported by the InAppBrowser
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) clarify that anchor1 doesn't exist
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) more fixup of tests on Android
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) fix up the tests for Android
+* Add just a bit more logging
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) port inappbrowser to plugin-test-framework
+* phonegap events supported for _blank target
+* inappbrowser _blank target position is fixed
+* amazon-fireos related changes.
+* [CB-7244](https://issues.apache.org/jira/browse/CB-7244) Incremented plugin version.
+* [CB-7244](https://issues.apache.org/jira/browse/CB-7244) Updated version and RELEASENOTES.md for release 0.5.1
+* ubuntu: support qt 5.2
+* CB-7249cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* update InAppBrowserProxy.js
+* app needs to be privileged
+* CB-6127lisa7cordova-plugin-consolecordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-6769](https://issues.apache.org/jira/browse/CB-6769) ios: Fix statusbar color reset wasn't working on iOS7+
+* [CB-6877](https://issues.apache.org/jira/browse/CB-6877) Incremented plugin version.
+* [CB-6877](https://issues.apache.org/jira/browse/CB-6877) Updated version and RELEASENOTES.md for release 0.5.0
+* [CB-6127](https://issues.apache.org/jira/browse/CB-6127) Spanish and rench Translations added. Github close #23
+* Clean up whitespace (mainly due to no newline at eof warning)
+* after code review
+* default parameter added
+* doc updated
+* console.log removed
+* back/forward buttons added, iframe has no border
+* not forcing the look of the inAppBrowserWrap and buttons
+* Adding permission info
+* [CB-6806](https://issues.apache.org/jira/browse/CB-6806) Add license
+* documentation translation: cordova-plugin-inappbrowser
+* Lisa testing pulling in plugins for plugin: cordova-plugin-inappbrowser
+* Lisa testing pulling in plugins for plugin: cordova-plugin-inappbrowser
+* [CB-6491](https://issues.apache.org/jira/browse/CB-6491) add CONTRIBUTING.md
+* Add necessary capability so the plugin works on its own
+* [CB-6474](https://issues.apache.org/jira/browse/CB-6474) InAppBrowser. Add data urls support to WP8
+* [CB-6482](https://issues.apache.org/jira/browse/CB-6482) InAppBrowser calls incorrect callback on WP8
+* Fixed use of iOS 6 deprecated methods
+* [CB-6360](https://issues.apache.org/jira/browse/CB-6360) - improvement: feature detection instead of iOS version detection
+* [CB-5649](https://issues.apache.org/jira/browse/CB-5649) - InAppBrowser overrides App's orientation
+* [CB-6452](https://issues.apache.org/jira/browse/CB-6452) Incremented plugin version on dev branch.
+* [CB-6452](https://issues.apache.org/jira/browse/CB-6452) Updated version and RELEASENOTES.md for release 0.4.0
+* [CB-6460](https://issues.apache.org/jira/browse/CB-6460) Update license headers
+* [CB-6360](https://issues.apache.org/jira/browse/CB-6360) Fix for crash on iOS < 6.0 (closes #37)
+* [CB-3324](https://issues.apache.org/jira/browse/CB-3324) Add support for back-button inappbrowser [WP8] if there is no history -> InAppBrowser is closed
+* await async calls, resolve warnings
+* Make InAppBrowser work with embedded files, using system behavior
+* [CB-6402](https://issues.apache.org/jira/browse/CB-6402) [WP8] pass empty string instead of null for [optional] windowFeatures string
+* [CB-6422](https://issues.apache.org/jira/browse/CB-6422) [windows8] use cordova/exec/proxy
+* [CB-3617](https://issues.apache.org/jira/browse/CB-3617) Document clearcache and clearsessioncache for ios
+* [CB-6389](https://issues.apache.org/jira/browse/CB-6389) [CB-3617](https://issues.apache.org/jira/browse/CB-3617) Add clearcache and clearsessioncache options to iOS (like Android)
+* refactoring fixed
+* [CB-6396](https://issues.apache.org/jira/browse/CB-6396) [Firefox OS] Adding basic support
+* Doc update: event name and example param (closes #31)
+* [CB-6253](https://issues.apache.org/jira/browse/CB-6253) Add Network Capability to WMAppManifest.xml
+* [CB-6212](https://issues.apache.org/jira/browse/CB-6212) iOS: fix warnings compiled under arm64 64-bit
+* [CB-6218](https://issues.apache.org/jira/browse/CB-6218) Update docs for BB10
+* Tweak RELEASENOTES.md (missed a bug fix in last release)
+* Incremented plugin version on dev branch.
+* [CB-6218](https://issues.apache.org/jira/browse/CB-6218) Update docs for BB10
+* Updated version and RELEASENOTES.md for release 0.3.3
+* [CB-6172](https://issues.apache.org/jira/browse/CB-6172) Fix inappbrowser install failure on case-sensitive filesystems.
+* [CB-5534](https://issues.apache.org/jira/browse/CB-5534) Updating the plugin.xml with the new Dialog class
+* fix for [CB-5534](https://issues.apache.org/jira/browse/CB-5534)
+* Add NOTICE file
+* [CB-6114](https://issues.apache.org/jira/browse/CB-6114) Incremented plugin version on dev branch.
+* Add NOTICE file
+* [CB-6114](https://issues.apache.org/jira/browse/CB-6114) Updated version and RELEASENOTES.md for release 0.3.2
+* Validate that callbackId is correctly formed
+* [CB-6035](https://issues.apache.org/jira/browse/CB-6035) - Move js-module so it is not loaded on unsupported platforms
+* [CB-5980](https://issues.apache.org/jira/browse/CB-5980) Incremented plugin version on dev branch.
+* [CB-5980](https://issues.apache.org/jira/browse/CB-5980) Updated version and RELEASENOTES.md for release 0.3.1
+* Removed some iOS6 Deprecations
+* Lisa testing pulling in plugins for plugin: cordova-plugin-inappbrowser
+* Lisa testing pulling in plugins for plugin: cordova-plugin-inappbrowser
+* [CB-5980](https://issues.apache.org/jira/browse/CB-5980) Updated version and RELEASENOTES.md for release 0.3.1
+* Add missing import for previous commit
+* [CB-5756](https://issues.apache.org/jira/browse/CB-5756) Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
+* Didn't test on ICS or lower, getDrawable isn't supported until Jellybean
+* WTF? ubuntu got automerged twice
+* add ubuntu platform
+* Adding CC-A-2.5 Notice for Assets, modifying plugins to use resources
+* Adding the buttons
+* Adding drawables to the inAppBrowser.  This doesn't look quite right, but it's a HUGE improvement over the previous settings
+* [CB-5756](https://issues.apache.org/jira/browse/CB-5756) Add missing import
+* [CB-5756](https://issues.apache.org/jira/browse/CB-5756) Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
+* Delete stale test/ directory
+* Remove _alive from InAppBrowser.js since it didn't catch the case where the browser is closed by the user.
+* [CB-5733](https://issues.apache.org/jira/browse/CB-5733) Fix IAB.close() not working if called before show() animation is done
+* [CB-5719](https://issues.apache.org/jira/browse/CB-5719) Incremented plugin version on dev branch.
+* [CB-5719](https://issues.apache.org/jira/browse/CB-5719) Updated version and RELEASENOTES.md for release 0.3.0
+* [CB-5592](https://issues.apache.org/jira/browse/CB-5592) Add a comment explaining why we set MIME only for file:
+* [CB-5592](https://issues.apache.org/jira/browse/CB-5592) Android - Add MIME type to Intent when opening file:/// URLs
+* [CB-5658](https://issues.apache.org/jira/browse/CB-5658) Update license comment formatting of doc/index.md
+* [CB-5658](https://issues.apache.org/jira/browse/CB-5658) Add doc.index.md for InAppBrowser plugin
+* [CB-5658](https://issues.apache.org/jira/browse/CB-5658) Delete stale snapshot of plugin docs
+* [CB-5594](https://issues.apache.org/jira/browse/CB-5594) Add disallowoverscroll option.
+* [CB-5595](https://issues.apache.org/jira/browse/CB-5595) Rename "toolbarbarpostion" -> "toolbarposition"
+* [CB-5595](https://issues.apache.org/jira/browse/CB-5595) Fixed the positioning and autoresizing for certain rotation scenarios.
+* [CB-5595](https://issues.apache.org/jira/browse/CB-5595) Add toolbarposition=top option.
+* Apply [CB-5193](https://issues.apache.org/jira/browse/CB-5193) to InAppBrowser
+* [CB-5593](https://issues.apache.org/jira/browse/CB-5593) iOS: Make InAppBrowser localizable
+* [CB-5591](https://issues.apache.org/jira/browse/CB-5591) Change window.escape to encodeURIComponent
+* [CB-5565](https://issues.apache.org/jira/browse/CB-5565) Incremented plugin version on dev branch.
+* [CB-5565](https://issues.apache.org/jira/browse/CB-5565) Updated version and RELEASENOTES.md for release 0.2.5
+* Remove merge conflict tag
+* [CB-4724](https://issues.apache.org/jira/browse/CB-4724) fixed UriFormatException
+* add ubuntu platform
+* [CB-3420](https://issues.apache.org/jira/browse/CB-3420) WP feature hidden=yes implemented
+* Added amazon-fireos platform. Change to use amazon-fireos as the platform if user agent string contains 'cordova-amazon-fireos'
+* [CB-5188](https://issues.apache.org/jira/browse/CB-5188)
+* [CB-5188](https://issues.apache.org/jira/browse/CB-5188) Updated version and RELEASENOTES.md for release 0.2.4
+* [CB-5128](https://issues.apache.org/jira/browse/CB-5128) added repo + issue tag to plugin.xml for inappbrowser plugin
+* [CB-4995](https://issues.apache.org/jira/browse/CB-4995) Fix crash when WebView is quickly opened then closed.
+* [CB-4930](https://issues.apache.org/jira/browse/CB-4930) - iOS - InAppBrowser should take into account the status bar
+* [CB-5010](https://issues.apache.org/jira/browse/CB-5010) Incremented plugin version on dev branch.
+* [CB-5010](https://issues.apache.org/jira/browse/CB-5010) Updated version and RELEASENOTES.md for release 0.2.3
+* [CB-4858](https://issues.apache.org/jira/browse/CB-4858) - Run IAB methods on the UI thread.
+* [CB-4858](https://issues.apache.org/jira/browse/CB-4858) Convert relative URLs to absolute URLs in JS
+* [CB-3747](https://issues.apache.org/jira/browse/CB-3747) Fix back button having different dismiss logic from the close button.
+* [CB-5021](https://issues.apache.org/jira/browse/CB-5021) Expose closeDialog() as a public function and make it safe to call multiple times.
+* [CB-5021](https://issues.apache.org/jira/browse/CB-5021) Make it safe to call close() multiple times
+* [CB-5010](https://issues.apache.org/jira/browse/CB-5010) Updated version and RELEASENOTES.md for release 0.2.3
+* [CB-4915](https://issues.apache.org/jira/browse/CB-4915) Incremented plugin version on dev branch.
+* [CB-4926](https://issues.apache.org/jira/browse/CB-4926) Fixes inappbrowser plugin loading for windows8
+* [CB-4915](https://issues.apache.org/jira/browse/CB-4915) Updated version and RELEASENOTES.md for release 0.2.2
+* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) bumping&resetting version
+* [CB-4788](https://issues.apache.org/jira/browse/CB-4788) Modified the onJsPrompt to warn against Cordova calls
+* [windows8] commandProxy was moved
+* [CB-4788](https://issues.apache.org/jira/browse/CB-4788) Modified the onJsPrompt to warn against Cordova calls
+* [windows8] commandProxy was moved
+* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) renaming core references
+* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) renaming org.apache.cordova.core.inappbrowser to org.apache.cordova.inappbrowser
+* CB-4864, [CB-4865](https://issues.apache.org/jira/browse/CB-4865) Minor improvements to InAppBrowser
+* Rename CHANGELOG.md -> RELEASENOTES.md
+* [CB-4792](https://issues.apache.org/jira/browse/CB-4792) Added keepCallback to the show function.
+* [CB-4752](https://issues.apache.org/jira/browse/CB-4752) Incremented plugin version on dev branch.
+* Add empty CHANGELOG.md
+* [CB-4586](https://issues.apache.org/jira/browse/CB-4586) Making loadUrl run on the UI thread for close dialog to stop the WebView error
+* [Windows8] add support for Windows 8 ( limited )
+* [CB-3616](https://issues.apache.org/jira/browse/CB-3616) Change option name to "clearcache" to match original proposal
+* add "clearallcache" and "clearsessioncache" option to InAppbrowser
+* [CB-4595](https://issues.apache.org/jira/browse/CB-4595) updated version
+* [CB-4417](https://issues.apache.org/jira/browse/CB-4417) Move cordova-plugin-inappbrowser to its own Java package.
+* updated Readme, namespace and name tag
+* [plugin.xml] standardizing license + meta
+* [license] adding apache license file
+* [CB-4399](https://issues.apache.org/jira/browse/CB-4399) removed blackberry entry in plugin xml. Installation of plugin interferes with natively supported childbrowser functionality. To support additional inappbrowser features, see [CB-4467.](https://issues.apache.org/jira/browse/CB-4467.)
+* updating plugin.xml with registry data
+* [CB-4368](https://issues.apache.org/jira/browse/CB-4368) Explicit CoreGraphics.framework dependency should be specified for some core plugins
+
+### 1.5.0 (Sep 08, 2016)
+* [CB-11795](https://issues.apache.org/jira/browse/CB-11795) Add 'protective' entry to cordovaDependencies
+* Add intent scheme to be handled by OS
+* Plugin uses `Android Log class` and not `Cordova LOG class`
+* Adding links to guide content and reference content at the top of the readme file Github: close #163
+* [CB-10973](https://issues.apache.org/jira/browse/CB-10973) **Browser**: wrong height of webview with `location=yes`
+* Size and position in browser platform
+* [CB-10973](https://issues.apache.org/jira/browse/CB-10973) **Windows**: wrong height of webview with `location=yes`
+* [CB-11013](https://issues.apache.org/jira/browse/CB-11013) IAB enabling background play of YouTube videos?
+* [CB-10467](https://issues.apache.org/jira/browse/CB-10467) Hardware back button, while `InAppBrowser` is opened, closes the app too in addition to closing `InAppBrowser`
+* [CB-11178](https://issues.apache.org/jira/browse/CB-11178) allow to open other apps on **iOS 9**
+* fix some calls which used api level 16
+* [CB-5402](https://issues.apache.org/jira/browse/CB-5402) added extra content from wiki page
+* [CB-2063](https://issues.apache.org/jira/browse/CB-2063) (**ios**) Fixed presentation style
+* [CB-11012](https://issues.apache.org/jira/browse/CB-11012) added some clarifications about `InAppBrowser` object
+* [CB-3360](https://issues.apache.org/jira/browse/CB-3360) Set custom `inappbrowser` user agent for **ios**
+* Add badges for paramedic builds on Jenkins
+* [CB-11381](https://issues.apache.org/jira/browse/CB-11381) android: Does not pass sonarqube scan
+* Add pull request template.
+* [CB-10866](https://issues.apache.org/jira/browse/CB-10866) Adding engine requirements to `package.json`
+* [CB-110003](https://issues.apache.org/jira/browse/CB-110003) Adding samples to Readme.
+* [CB-10996](https://issues.apache.org/jira/browse/CB-10996) Adding front matter to README.md
+
+### 1.4.0 (Apr 15, 2016)
+* [CB-7679](https://issues.apache.org/jira/browse/CB-7679) add fix for **iOS** upload.
+* [CB-10944](https://issues.apache.org/jira/browse/CB-10944) `NoSuchMethodError` in `InAppBrowser` plugin
+* [CB-10937](https://issues.apache.org/jira/browse/CB-10937) fix stretched icons
+* [CB-10760](https://issues.apache.org/jira/browse/CB-10760) Fixing README for display on Cordova website
+* [CB-10636](https://issues.apache.org/jira/browse/CB-10636) Add `JSHint` for plugins
+
+### 1.3.0 (Feb 09, 2016)
+* [CB-3360](https://issues.apache.org/jira/browse/CB-3360) Set custom inappbrowser user agent for android
+* [CB-10538](https://issues.apache.org/jira/browse/CB-10538) cordova-plugin-inappbrowser timeout issue
+* [CB-10395](https://issues.apache.org/jira/browse/CB-10395) InAppBrowser's WebView not storing cookies reliable on Android
+* Edit package.json license to match SPDX id
+* [CB-10305](https://issues.apache.org/jira/browse/CB-10305) Gray bar appears in the wrong place on iOS
+* [CB-7786](https://issues.apache.org/jira/browse/CB-7786) Support mediaPlaybackRequiresUserAction on Android
+* [CB-7500](https://issues.apache.org/jira/browse/CB-7500) executeScript with callback kills/blurs inAppBrowser window on Android
+
+### 1.2.1 (Feb 02, 2016)
+* [CB-10407](https://issues.apache.org/jira/browse/CB-10407) InAppBrowser not firing loadstart event on android
+* [CB-10428](https://issues.apache.org/jira/browse/CB-10428) Fix syntax error when browserifying inAppBrowser plugin
+* handle app store urls in system browser
+* [CB-6702](https://issues.apache.org/jira/browse/CB-6702) InAppBrowser hangs when opening more than one instance
+* [CB-10456](https://issues.apache.org/jira/browse/CB-10456) InAppBrowser is not closed if I close it programmatically on Android
+* [CB-10451](https://issues.apache.org/jira/browse/CB-10451) InAppBrowser: loadstart event is not triggered on Windows
+* [CB-10452](https://issues.apache.org/jira/browse/CB-10452) InAppBrowser: 'exit' event is not triggered on Windows
+* [CB-10454](https://issues.apache.org/jira/browse/CB-10454) InAppBrowser: 'loaderror' event does not have code and message on Windows
+* [CB-10450](https://issues.apache.org/jira/browse/CB-10450) InAppBrowser: Unable to get property 'canGoBack' of undefined on Windows
+* [CB-10441](https://issues.apache.org/jira/browse/CB-10441) Add auto tests for InAppBrowser plugin
+
+### 1.2.0 (Jan 15, 2016)
+* [CB-8180](https://issues.apache.org/jira/browse/CB-8180) Changing methods of interception in `WebViewClient` class
+* [CB-10009](https://issues.apache.org/jira/browse/CB-10009) Improve `InAppBrowser` toolbar look and feel on **Windows**
+* Open a new window on the **Browser** platform
+
+### 1.1.1 (Dec 10, 2015)
+
+* [CB-9445](https://issues.apache.org/jira/browse/CB-9445) Improves executeScript callbacks on iOS
+* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Incremented plugin version.
+* [CB-10040](https://issues.apache.org/jira/browse/CB-10040) - re-fix: backwards compatible with cordova-ios < 4.0
+* [CB-8534](https://issues.apache.org/jira/browse/CB-8534) Allow plugins to respond to onReceivedHttpAuthRequest. This closes #82
+* [CB-3750](https://issues.apache.org/jira/browse/CB-3750) Fixes spinner on iOS. This closes #89
+* [CB-7696](https://issues.apache.org/jira/browse/CB-7696) Document target=_self behavior for Windows
+* [CB-10040](https://issues.apache.org/jira/browse/CB-10040) - Compile Error in InAppBrowser Plugin for iOS - No known instance method for selector 'URLIsWhitelisted:'
+
+### 1.1.0 (Nov 18, 2015)
+* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Updated `RELEASENOTES` to be newest to oldest
+* Invoke webview if using local file
+* Fixed `zIndex` issue on **Windows 8**, **8.188 where InAppBrowser opens behind default app.
+* fix `async` self usage
+* [CB-9150](https://issues.apache.org/jira/browse/CB-9150) Fix InAppBrowser `executeScript` crash on **Windows** if no data returned
+* [CB-10008](https://issues.apache.org/jira/browse/CB-10008) Fix InAppBrowser popup layout on **Windows**
+* Setting `setStatusBarStyle` to `-1` causes `CGContextSaveGState`.
+* [CB-9167](https://issues.apache.org/jira/browse/CB-9167) Fix crash on **browser** window close 
+* [CB-9799](https://issues.apache.org/jira/browse/CB-9799) Fixed `javaDoc` errors.
+* Fixing contribute link.
+* [CB-9760](https://issues.apache.org/jira/browse/CB-9760) InAppBrowser: fallback to default `window.open` behavior on **Ripple**
+* [CB-9378](https://issues.apache.org/jira/browse/CB-9378) Fix InAppBrowser not taking whole screen on **Windows**
+* [CB-9158](https://issues.apache.org/jira/browse/CB-9158) - InAppBrowser `zoomControls` are always set to true
+
+### 1.0.1 (Jun 17, 2015)
+* [CB-9128](https://issues.apache.org/jira/browse/CB-9128) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* fix npm md issue
+
+### 1.0.0 (Apr 15, 2015)
+* [CB-8746](https://issues.apache.org/jira/browse/CB-8746) gave plugin major version bump
+* [CB-7689](https://issues.apache.org/jira/browse/CB-7689) Adds insertCSS support for windows platform
+* [CB-4930](https://issues.apache.org/jira/browse/CB-4930) - (prefix) InAppBrowser should take into account the status bar
+* [CB-8635](https://issues.apache.org/jira/browse/CB-8635) Improves UX on windows platform
+* [CB-8661](https://issues.apache.org/jira/browse/CB-8661) Return executed script result on Windows
+* [CB-8683](https://issues.apache.org/jira/browse/CB-8683) updated wp and browser specific references of old id to new id
+* [CB-8683](https://issues.apache.org/jira/browse/CB-8683) changed plugin-id to pacakge-name
+* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) properly updated translated docs to use new id
+* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) updated translated docs to use new id
+* Use TRAVIS_BUILD_DIR, install paramedic by npm
+* [CB-8432](https://issues.apache.org/jira/browse/CB-8432) Correct styles for browser wrapper to display it correctly on some pages
+* [CB-8659](https://issues.apache.org/jira/browse/CB-8659) - Update InAppBrowser to support both cordova-ios 4.0.x and 3.x (closes #93)
+* [CB-7961](https://issues.apache.org/jira/browse/CB-7961) Add cordova-plugin-inappbrowser support for browser platform
+* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) Updated Readme
+* Update docs for Android zoom=no option
+* Added option to disable/enable zoom controls
+* updated docs, set hardwareback default to true
+* Add a hardwareback option to allow for the hardware back button to go back.
+* [CB-8570](https://issues.apache.org/jira/browse/CB-8570) Integrate TravisCI
+* [CB-8438](https://issues.apache.org/jira/browse/CB-8438) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-8538](https://issues.apache.org/jira/browse/CB-8538) Added package.json file
+* Keep external android pages in a single tab. (close #61)
+* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Add a clobber for `cordova.InAppBrowser.open` (close #80)
+* [CB-8444](https://issues.apache.org/jira/browse/CB-8444) Don't clobber `window.open` - Add new symbol/clobber to access open function (`cordova.InAppBrowser.open`) - Change existing tests to use new symbol (i.e. don't rely on plugin clobber of `window.open`) - Add tests to use `window.open` via manual replace with new symbol - Update docs to deprecate plugin clobber of `window.open`
+
+### 0.6.0 (Feb 04, 2015)
+* [CB-8270](https://issues.apache.org/jira/browse/CB-8270) ios: Remove usage of `[arr JSONString]`, since it's been renamed to `cdv_JSONString`
+* ubuntu: implement `inject*` functions
+* ubuntu: port to oxide
+* [CB-7897](https://issues.apache.org/jira/browse/CB-7897) ios, android: Update to work with whilelist plugins in Cordova 4.x
+
+### 0.5.4 (Dec 02, 2014)
+* [CB-7784](https://issues.apache.org/jira/browse/CB-7784) Exit event is not fired after `InAppBrowser` closing
+* [CB-7697](https://issues.apache.org/jira/browse/CB-7697) Add `locationBar` support to `InAppBrowser` **Windows** platform version
+* [CB-7690](https://issues.apache.org/jira/browse/CB-7690) `InAppBrowser` `loadstart/loadstop` events issues
+* [CB-7695](https://issues.apache.org/jira/browse/CB-7695) Fix `InAppBrowser` `injectScriptFile` for **Windows 8.1** / **Windows Phone 8.1**
+* [CB-7692](https://issues.apache.org/jira/browse/CB-7692) `InAppBrowser` local url opening bug in 8.1
+* [CB-7688](https://issues.apache.org/jira/browse/CB-7688) `Alert` is not supported in `InAppBrowser` on **Windows** platform
+* [CB-7977](https://issues.apache.org/jira/browse/CB-7977) Mention `deviceready` in plugin docs
+* [CB-7876](https://issues.apache.org/jira/browse/CB-7876) change test target to avoid undesired redirects
+* [CB-7712](https://issues.apache.org/jira/browse/CB-7712) remove references to `closebuttoncaption`
+* [CB-7850](https://issues.apache.org/jira/browse/CB-7850) clarify role of whitelist
+* [CB-7720](https://issues.apache.org/jira/browse/CB-7720) check if event is null since OK string from success callback was removed
+* [CB-7471](https://issues.apache.org/jira/browse/CB-7471) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+
+### 0.5.3 (Oct 03, 2014)
+* Windows implementation fixes and improvements
+* zIndex fixed
+* renamed InAppBrowser back to inappbrowser for case sensitive operating systems
+* Update french translation
+* Update doc to add Windows 8
+* Update windows proxy to be both compatible with windows 8 and 8.1
+* Rename windows81 by windows8 in src directory
+* Append Windows 8.1 platform configuration in plugin.xml
+* Append Windows 8.1 proxy using x-ms-webview
+
+### 0.5.2 (Sep 17, 2014)
+* [CB-7471](https://issues.apache.org/jira/browse/CB-7471) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-7490](https://issues.apache.org/jira/browse/CB-7490) Fixes InAppBrowser manual tests crash on windows platform
+* [CB-7249](https://issues.apache.org/jira/browse/CB-7249) cordova-plugin-inappbrowser documentation translation: cordova-plugin-inappbrowser
+* [CB-7424](https://issues.apache.org/jira/browse/CB-7424) Wrong docs: anchor tags are not supported by the InAppBrowser
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) clarify that anchor1 doesn't exist
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) more fixup of tests on Android
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) fix up the tests for Android
+* Add just a bit more logging
+* [CB-7133](https://issues.apache.org/jira/browse/CB-7133) port inappbrowser to plugin-test-framework
+* phonegap events supported for \_blank target
+* inappbrowser \_blank target position is fixed
+* amazon-fireos related changes.
+
+### 0.5.1 (Aug 06, 2014)
+* ubuntu: support qt 5.2
+* **FFOS** update InAppBrowserProxy.js
+* **FFOS** app needs to be privileged
+* [CB-6127](https://issues.apache.org/jira/browse/CB-6127) Updated translations for docs
+* [CB-6769](https://issues.apache.org/jira/browse/CB-6769) ios: Fix statusbar color reset wasn't working on iOS7+
+
+### 0.5.0 (Jun 05, 2014)
+* [CB-6127](https://issues.apache.org/jira/browse/CB-6127) Spanish and rench Translations added. Github close #23
+* Clean up whitespace (mainly due to no newline at eof warning)
+* Adding permission info
+* [CB-6806](https://issues.apache.org/jira/browse/CB-6806) Add license
+* [CB-6491](https://issues.apache.org/jira/browse/CB-6491) add CONTRIBUTING.md
+* Add necessary capability so the plugin works on its own
+* [CB-6474](https://issues.apache.org/jira/browse/CB-6474) InAppBrowser. Add data urls support to WP8
+* [CB-6482](https://issues.apache.org/jira/browse/CB-6482) InAppBrowser calls incorrect callback on WP8
+* Fixed use of iOS 6 deprecated methods
+* [CB-6360](https://issues.apache.org/jira/browse/CB-6360) - improvement: feature detection instead of iOS version detection
+* [CB-5649](https://issues.apache.org/jira/browse/CB-5649) - InAppBrowser overrides App's orientation
+* refactoring fixed
+* [CB-6396](https://issues.apache.org/jira/browse/CB-6396) [Firefox OS] Adding basic support
+
+### 0.4.0 (Apr 17, 2014)
+* [CB-6360](https://issues.apache.org/jira/browse/CB-6360): [ios] Fix for crash on iOS < 6.0 (closes #37)
+* [CB-3324](https://issues.apache.org/jira/browse/CB-3324): [WP8] Add support for back-button inappbrowser [WP8] if there is no history -> InAppBrowser is closed
+* [WP] await async calls, resolve warnings
+* [WP] Make InAppBrowser work with embedded files, using system behavior
+* [CB-6402](https://issues.apache.org/jira/browse/CB-6402): [WP8] pass empty string instead of null for [optional] windowFeatures string
+* [CB-6422](https://issues.apache.org/jira/browse/CB-6422): [windows8] use cordova/exec/proxy
+* [CB-6389](https://issues.apache.org/jira/browse/CB-6389) [CB-3617](https://issues.apache.org/jira/browse/CB-3617): Add clearcache and clearsessioncache options to iOS (like Android)
+* Doc update: event name and example param (closes #31)
+* [CB-6253](https://issues.apache.org/jira/browse/CB-6253): [WP] Add Network Capability to WMAppManifest.xml
+* [CB-6212](https://issues.apache.org/jira/browse/CB-6212): [iOS] fix warnings compiled under arm64 64-bit
+* [CB-6218](https://issues.apache.org/jira/browse/CB-6218): Update docs for BB10
+* [CB-6460](https://issues.apache.org/jira/browse/CB-6460): Update license headers
+
+### 0.3.3 (Mar 5, 2014)
+* [CB-5534](https://issues.apache.org/jira/browse/CB-5534) Fix video/audio does not stop playing when browser is closed
+* [CB-6172](https://issues.apache.org/jira/browse/CB-6172) Fix broken install on case-sensitive file-systems
+
+### 0.3.2 (Feb 26, 2014)
+* Validate that callbackId is correctly formed
+* [CB-6035](https://issues.apache.org/jira/browse/CB-6035) Move js-module so it is not loaded on unsupported platforms
+* Removed some iOS6 Deprecations
+
+### 0.3.1 (Feb 05, 2014)
+* [CB-5756](https://issues.apache.org/jira/browse/CB-5756): Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
+* Didn't test on ICS or lower, getDrawable isn't supported until Jellybean
+* add ubuntu platform
+* Adding drawables to the inAppBrowser.  This doesn't look quite right, but it's a HUGE improvement over the previous settings
+* [CB-5756](https://issues.apache.org/jira/browse/CB-5756): Android: Use WebView.evaluateJavascript for script injection on Android 4.4+
+* Remove alive from InAppBrowser.js since it didn't catch the case where the browser is closed by the user.
+* [CB-5733](https://issues.apache.org/jira/browse/CB-5733) Fix IAB.close() not working if called before show() animation is done
+
+### 0.2.5 (Dec 4, 2013)
+* Remove merge conflict tag
+* [CB-4724](https://issues.apache.org/jira/browse/CB-4724) fixed UriFormatException
+* add ubuntu platform
+* [CB-3420](https://issues.apache.org/jira/browse/CB-3420) WP feature hidden=yes implemented
+* Added amazon-fireos platform. Change to use amazon-fireos as the platform if user agent string contains 'cordova-amazon-fireos'
+
+### 0.2.4 (Oct 28, 2013)
+* [CB-5128](https://issues.apache.org/jira/browse/CB-5128): added repo + issue tag to plugin.xml for inappbrowser plugin
+* [CB-4995](https://issues.apache.org/jira/browse/CB-4995) Fix crash when WebView is quickly opened then closed.
+* [CB-4930](https://issues.apache.org/jira/browse/CB-4930) - iOS - InAppBrowser should take into account the status bar
+* [CB-5010](https://issues.apache.org/jira/browse/CB-5010) Incremented plugin version on dev branch.
+* [CB-5010](https://issues.apache.org/jira/browse/CB-5010) Updated version and RELEASENOTES.md for release 0.2.3
+* [CB-4858](https://issues.apache.org/jira/browse/CB-4858) - Run IAB methods on the UI thread.
+* [CB-4858](https://issues.apache.org/jira/browse/CB-4858) Convert relative URLs to absolute URLs in JS
+* [CB-3747](https://issues.apache.org/jira/browse/CB-3747) Fix back button having different dismiss logic from the close button.
+* [CB-5021](https://issues.apache.org/jira/browse/CB-5021) Expose closeDialog() as a public function and make it safe to call multiple times.
+* [CB-5021](https://issues.apache.org/jira/browse/CB-5021) Make it safe to call close() multiple times
+
+### 0.2.3 (Oct 9, 2013)
+* [CB-4915](https://issues.apache.org/jira/browse/CB-4915) Incremented plugin version on dev branch.
+* [CB-4926](https://issues.apache.org/jira/browse/CB-4926) Fixes inappbrowser plugin loading for windows8
+
+### 0.2.2 (Sept 25, 2013)
+* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) bumping&resetting version
+* [CB-4788](https://issues.apache.org/jira/browse/CB-4788): Modified the onJsPrompt to warn against Cordova calls
+* [windows8] commandProxy was moved
+* [CB-4788](https://issues.apache.org/jira/browse/CB-4788): Modified the onJsPrompt to warn against Cordova calls
+* [windows8] commandProxy was moved
+* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) renaming core references
+* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) renaming org.apache.cordova.core.inappbrowser to org.apache.cordova.inappbrowser
+* [CB-4864](https://issues.apache.org/jira/browse/CB-4864), [CB-4865](https://issues.apache.org/jira/browse/CB-4865): Minor improvements to InAppBrowser
+* Rename CHANGELOG.md -> RELEASENOTES.md
+* [CB-4792](https://issues.apache.org/jira/browse/CB-4792) Added keepCallback to the show function.
+* [CB-4752](https://issues.apache.org/jira/browse/CB-4752) Incremented plugin version on dev branch.
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/package.json b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/package.json
new file mode 100644
index 000000000..de4f3f410
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/package.json
@@ -0,0 +1,59 @@
+{
+  "name": "cordova-plugin-inappbrowser-richartlife",
+  "version": "5.0.1-dev",
+  "description": "Cordova InAppBrowser Plugin",
+  "types": "./types/index.d.ts",
+  "cordova": {
+    "id": "cordova-plugin-inappbrowser",
+    "platforms": [
+      "android",
+      "browser",
+      "ios",
+      "osx",
+      "windows"
+    ]
+  },
+  "repository": "github:apache/cordova-plugin-inappbrowser",
+  "bugs": "https://github.com/apache/cordova-plugin-inappbrowser/issues",
+  "keywords": [
+    "cordova",
+    "in",
+    "app",
+    "browser",
+    "inappbrowser",
+    "ecosystem:cordova",
+    "cordova-android",
+    "cordova-browser",
+    "cordova-ios",
+    "cordova-osx",
+    "cordova-windows"
+  ],
+  "scripts": {
+    "test": "npm run lint",
+    "lint": "eslint ."
+  },
+  "engines": {
+    "cordovaDependencies": {
+      "0.2.3": {
+        "cordova": ">=3.1.0"
+      },
+      "4.0.0": {
+        "cordova": ">=3.1.0",
+        "cordova-ios": ">=4.0.0"
+      },
+      "5.0.0": {
+        "cordova-android": ">=9.0.0",
+        "cordova-ios": ">=6.0.0",
+        "cordova": ">=9.0.0"
+      },
+      "6.0.0": {
+        "cordova": ">100"
+      }
+    }
+  },
+  "author": "Apache Software Foundation",
+  "license": "Apache-2.0",
+  "devDependencies": {
+    "@cordova/eslint-config": "^3.0.0"
+  }
+}
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/plugin.xml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/plugin.xml
old mode 100755
new mode 100644
similarity index 51%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/plugin.xml
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/plugin.xml
index 80f032ceb..85ec8aa33
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/plugin.xml
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/plugin.xml
@@ -1,38 +1,60 @@
-<?xml version='1.0' encoding='utf-8'?>
-<plugin id="cordova-plugin-inappwebviewplugin" version="1.1.8"
-    xmlns="http://apache.org/cordova/ns/plugins/1.0" 
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <name>InAppWebViewPlugin</name>
-    <js-module name="InAppWebViewPlugin" src="www/InAppWebViewPlugin.js">
-        <clobbers target="cordova.plugins.InAppWebViewPlugin" />
-    </js-module>
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one
+  or more contributor license agreements.  See the NOTICE file
+  distributed with this work for additional information
+  regarding copyright ownership.  The ASF licenses this file
+  to you under the Apache License, Version 2.0 (the
+  "License"); you may not use this file except in compliance
+  with the License.  You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing,
+  software distributed under the License is distributed on an
+  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  KIND, either express or implied.  See the License for the
+  specific language governing permissions and limitations
+  under the License.
+-->
+
+<plugin xmlns="http://apache.org/cordova/ns/plugins/1.0"
+           id="cordova-plugin-inappbrowser-richartlife"
+      version="5.0.1">
+
+    <name>InAppBrowser</name>
+    <description>Cordova InAppBrowser Plugin</description>
+    <license>Apache 2.0</license>
+    <keywords>cordova,in,app,browser,inappbrowser</keywords>
+    <repo>https://github.com/apache/cordova-plugin-inappbrowser</repo>
+    <issue>https://github.com/apache/cordova-plugin-inappbrowser/issues</issue>
+
+    <engines>
+        <engine name="cordova" version=">=3.1.0"/>
+        <engine name="cordova-ios" version=">=4.0.0" />
+    </engines>
+
+    <!-- android -->
     <platform name="android">
-        <config-file parent="/*" target="res/xml/config.xml">
-            <feature name="InAppWebViewPlugin">
-                <param name="android-package" value="com.TSBCardApp.InAppWebViewPlugin.InAppWebViewPlugin" />
+        <js-module src="www/inappbrowser.js" name="inappbrowser">
+            <clobbers target="cordova.InAppBrowser.open" />
+        </js-module>
+        <config-file target="res/xml/config.xml" parent="/*">
+            <feature name="InAppBrowser">
+                <param name="android-package" value="org.apache.cordova.inappbrowser.InAppBrowser"/>
             </feature>
         </config-file>
 
-        <hook type="after_prepare" src="scripts/apply-to-gradle.properties.js"/>
+        <framework src="androidx.constraintlayout:constraintlayout:2.0.4" />
 
-        <framework src="androidx.appcompat:appcompat:1.1.0"/>
-        <framework src="com.android.support.constraint:constraint-layout:1.0.2"/>
-        <framework src="com.google.code.gson:gson:2.8.6"/>
+        <source-file src="src/android/InAppBrowser.java" target-dir="src/org/apache/cordova/inappbrowser" />
+        <source-file src="src/android/InAppBrowserDialog.java" target-dir="src/org/apache/cordova/inappbrowser" />
+        <source-file src="src/android/InAppChromeClient.java" target-dir="src/org/apache/cordova/inappbrowser" />
+        <source-file src="src/android/InAppBrowserExitObj.java" target-dir="src/org/apache/cordova/inappbrowser" />
+        <source-file src="src/android/InAppBrowserTokenInfo.java" target-dir="src/org/apache/cordova/inappbrowser" />
 
-        <config-file target="AndroidManifest.xml" parent="/manifest">
-            <uses-permission android:name="android.permission.INTERNET"/>
-        </config-file>
-
-        <config-file parent="/*" target="AndroidManifest.xml" />
-        <config-file target="AndroidManifest.xml" parent="/manifest/application">
-            <activity android:name="com.TSBCardApp.InAppWebViewPlugin.InAppWebViewActivity" android:screenOrientation="portrait" android:theme="@style/AppTheme.NoActionBar">
-            </activity>
-        </config-file>
-        <source-file src="src/android/InAppWebViewPlugin.java" target-dir="src/com/TSBCardApp/InAppWebViewPlugin" />
-        <source-file src="src/android/InAppWebViewActivity.java" target-dir="src/com/TSBCardApp/InAppWebViewPlugin" />
-        <source-file src="src/android/TokenInfo.java" target-dir="src/com/TSBCardApp/InAppWebViewPlugin" />
+        <!-- drawable src/android/resources -->
         <source-file src="src/android/layout/activity_in_app_webview.xml" target-dir="res/layout/" />
-        <source-file src="src/android/layout/prompt_dialog.xml" target-dir="res/layout/" />
         <source-file src="src/android/values/webview_color.xml" target-dir="res/values/" />
         <source-file src="src/android/values/webview_styles.xml" target-dir="res/values/" />
 
@@ -62,10 +84,17 @@
         <source-file src="src/android/drawable-xxxhdpi/icon_share_black.png" target-dir="res/drawable-xxxhdpi/" />
 
     </platform>
+
+    <!-- ios -->
     <platform name="ios">
-        <config-file parent="/*" target="config.xml">
-            <feature name="InAppWebViewPlugin">
-                <param name="ios-package" value="InAppWebViewPlugin" />
+        <js-module src="www/inappbrowser.js" name="inappbrowser">
+            <clobbers target="cordova.InAppBrowser.open" />
+            <clobbers target="window.open" />
+        </js-module>
+        <config-file target="config.xml" parent="/*">
+            <feature name="InAppBrowser">
+                <param name="ios-package" value="CDVWKInAppBrowser" />
+                <param name="onload" value="true" />
             </feature>
         </config-file>
 
@@ -76,23 +105,22 @@
             </array>
         </config-file>
 
-        <source-file src="src/ios/InAppWebViewPlugin.m" />
-        
-        <source-file src="src/ios/WKWebViewController.h" />
-        <source-file src="src/ios/WKWebViewController.m" />
-        
-        <source-file src="src/ios/BlankViewController.h" />
-        <source-file src="src/ios/BlankViewController.m" />
-        
-        <source-file src="src/ios/MyNavigationController.h" />
-        <source-file src="src/ios/MyNavigationController.m" />
-
-        <source-file src="src/ios/CertObj.h" />
-        <source-file src="src/ios/CertObj.m" />
-
-        <source-file src="src/ios/CustomUIAlertController.h" />
-        <source-file src="src/ios/CustomUIAlertController.m" />
-        
+        <header-file src="src/ios/CDVInAppBrowserOptions.h" />
+        <source-file src="src/ios/CDVInAppBrowserOptions.m" />
+        <header-file src="src/ios/CDVInAppBrowserNavigationController.h" />
+        <source-file src="src/ios/CDVInAppBrowserNavigationController.m" />
+	    <header-file src="src/ios/CDVWKInAppBrowser.h" />
+	    <source-file src="src/ios/CDVWKInAppBrowser.m" />
+	    <header-file src="src/ios/CDVWKInAppBrowserUIDelegate.h" />
+	    <source-file src="src/ios/CDVWKInAppBrowserUIDelegate.m" />
+	    <header-file src="src/ios/CDVWKUIAlertController.h" />
+	    <source-file src="src/ios/CDVWKUIAlertController.m" />
+        <!-- views -->
+        <source-file src="src/ios/CDVWKInAppBrowser.xib" />
+
+	    <framework src="CoreGraphics.framework" />
+
+        <!-- images -->
         <source-file src="src/ios/Images/icon_arrow_left_black.png" />
         <source-file src="src/ios/Images/icon_arrow_left_black@2x.png" />
         <source-file src="src/ios/Images/icon_arrow_left_black@3x.png" />
@@ -108,12 +136,9 @@
         <source-file src="src/ios/Images/icon_share_black.png" />
         <source-file src="src/ios/Images/icon_share_black@2x.png" />
         <source-file src="src/ios/Images/icon_share_black@3x.png" />
-        
-        <source-file src="src/ios/WKWebViewController.xib" />
-        <source-file src="src/ios/BlankViewController.xib" />
 
         <!-- 思源宋體字型檔案 -->
         <resource-file src="src/ios/res/NotoSerifTC-Bold.ttf" target="NotoSerifTC-Bold.ttf"/>
-        
     </platform>
+
 </plugin>
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowser.java b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowser.java
new file mode 100644
index 000000000..045c975d0
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowser.java
@@ -0,0 +1,1513 @@
+/*
+       Licensed to the Apache Software Foundation (ASF) under one
+       or more contributor license agreements.  See the NOTICE file
+       distributed with this work for additional information
+       regarding copyright ownership.  The ASF licenses this file
+       to you under the Apache License, Version 2.0 (the
+       "License"); you may not use this file except in compliance
+       with the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+       Unless required by applicable law or agreed to in writing,
+       software distributed under the License is distributed on an
+       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+       KIND, either express or implied.  See the License for the
+       specific language governing permissions and limitations
+       under the License.
+*/
+package org.apache.cordova.inappbrowser;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.os.Parcelable;
+import android.provider.Browser;
+import android.graphics.Bitmap;
+import android.net.http.SslError;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Base64;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.view.WindowManager.LayoutParams;
+import android.view.inputmethod.InputMethodManager;
+import android.webkit.CookieManager;
+import android.webkit.HttpAuthHandler;
+import android.webkit.JavascriptInterface;
+import android.webkit.SslErrorHandler;
+import android.webkit.URLUtil;
+import android.webkit.ValueCallback;
+import android.webkit.WebChromeClient;
+import android.webkit.WebResourceRequest;
+import android.webkit.WebResourceResponse;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import androidx.constraintlayout.widget.ConstraintLayout;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.apache.cordova.CallbackContext;
+import org.apache.cordova.Config;
+import org.apache.cordova.CordovaArgs;
+import org.apache.cordova.CordovaHttpAuthHandler;
+import org.apache.cordova.CordovaPlugin;
+import org.apache.cordova.CordovaWebView;
+import org.apache.cordova.LOG;
+import org.apache.cordova.PluginManager;
+import org.apache.cordova.PluginResult;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.UnsupportedEncodingException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.net.URISyntaxException;
+import java.security.GeneralSecurityException;
+import java.security.NoSuchAlgorithmException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.StringTokenizer;
+import java.util.TimeZone;
+
+import javax.crypto.Cipher;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+
+import tw.com.taishinbank.ccapp.R;
+
+@SuppressLint("SetJavaScriptEnabled")
+public class InAppBrowser extends CordovaPlugin {
+
+    private static final String NULL = "null";
+    protected static final String LOG_TAG = "InAppBrowser";
+    private static final String SELF = "_self";
+    private static final String SYSTEM = "_system";
+    private static final String EXIT_EVENT = "exit";
+    private static final String HIDDEN = "hidden";
+    private static final String LOAD_START_EVENT = "loadstart";
+    private static final String LOAD_STOP_EVENT = "loadstop";
+    private static final String LOAD_ERROR_EVENT = "loaderror";
+    private static final String MESSAGE_EVENT = "message";
+    private static final String CLEAR_ALL_CACHE = "clearcache";
+    private static final String CLEAR_SESSION_CACHE = "clearsessioncache";
+    private static final String HARDWARE_BACK_BUTTON = "hardwareback";
+    private static final String MEDIA_PLAYBACK_REQUIRES_USER_ACTION = "mediaPlaybackRequiresUserAction";
+    private static final String SHOULD_PAUSE = "shouldPauseOnSuspend";
+    private static final Boolean DEFAULT_HARDWARE_BACK = true;
+    private static final String USER_WIDE_VIEW_PORT = "useWideViewPort";
+    private static final String BEFORELOAD = "beforeload";
+    private static final String FULLSCREEN = "fullscreen";
+    private static final String WEBVIEWTITLE = "webtitle";
+    private static final String HIDESHAREBTN = "hidesharebtn";
+    private static final String TOKENID = "tokenid";
+    private static final String TOKENINFO = "tokeninfo";
+    private static final String APPVER = "appver";
+    private static final String ACTION = "action";
+    private static final String CHANNEL = "channel";
+    private static final String USER_AGENT_TYPE = "android_tsbank";
+
+    public static final String JAVASCRIPT_INTERFACE_NAME = "android";
+
+    private InAppBrowserDialog dialog;
+    private WebView inAppWebView;
+    private CallbackContext callbackContext;
+    private boolean openWindowHidden = false;
+    private boolean clearAllCache = false;
+    private boolean clearSessionCache = false;
+    private boolean hadwareBackButton = true;
+    private boolean mediaPlaybackRequiresUserGesture = false;
+    private boolean shouldPauseInAppBrowser = false;
+    private boolean useWideViewPort = true;
+    private ValueCallback<Uri[]> mUploadCallback;
+    private final static int FILECHOOSER_REQUESTCODE = 1;
+    private String beforeload = "";
+    private boolean fullscreen = true;
+    private String[] allowedSchemes;
+    private InAppBrowserClient currentClient;
+    private String webviewtitle= "";
+    private boolean hideShareBtn = false;
+    /**
+     * open Mall parameter
+     */
+    private String tokenid = "";
+    private String channel = "";
+    private String appver = "";
+    private String action = "";
+    private String tokeninfo = "";
+
+    private TextView tvtitle;
+    private ImageView btnBack;
+    private ImageView btnForward;
+
+    private InAppBrowserExitObj exitObj;
+
+    public static String RESULT_ACTION = "resultAction";
+    public static String RESULT_ACTION_DETECTED_URL = "detectedUrl";
+    public static String RESULT_ACTION_NEED_LOGIN = "needLogin";
+    public static String RESULT_ACTION_DEEP_LINK = "deepLink";
+    public static String RESULT_DATA = "resultData";
+
+    private String currentUrl = "";
+
+    private static final String AES_MODE = "AES/CBC/PKCS7Padding";
+    private static final String CHARSET = "UTF-8";
+    private static final String aes_key = "f54d61b111f65f6282f7a868ee8884cb";
+    private static final String aes_iv = "6054670480370677";
+
+    /**
+     * Executes the request and returns PluginResult.
+     *
+     * @param action the action to execute.
+     * @param args JSONArry of arguments for the plugin.
+     * @param callbackContext the callbackContext used when calling back into JavaScript.
+     * @return A PluginResult object with a status and message.
+     */
+    public boolean execute(String action, CordovaArgs args, final CallbackContext callbackContext) throws JSONException {
+        if (action.equals("open")) {
+            this.callbackContext = callbackContext;
+            final String url = args.getString(0);
+            String t = args.optString(1);
+            if (t == null || t.equals("") || t.equals(NULL)) {
+                t = SELF;
+            }
+            final String target = t;
+            final HashMap<String, String> features = parseFeature(args.optString(2));
+
+            LOG.d(LOG_TAG, "target = " + target);
+
+            this.cordova.getActivity().runOnUiThread(() -> {
+                String result = "";
+                // SELF
+                if (SELF.equals(target)) {
+                    LOG.d(LOG_TAG, "in self");
+                    /* This code exists for compatibility between 3.x and 4.x versions of Cordova.
+                     * Previously the Config class had a static method, isUrlWhitelisted(). That
+                     * responsibility has been moved to the plugins, with an aggregating method in
+                     * PluginManager.
+                     */
+                    Boolean shouldAllowNavigation = null;
+                    if (url.startsWith("javascript:")) {
+                        shouldAllowNavigation = true;
+                    }
+                    if (shouldAllowNavigation == null) {
+                        try {
+                            Method iuw = Config.class.getMethod("isUrlWhiteListed", String.class);
+                            shouldAllowNavigation = (Boolean)iuw.invoke(null, url);
+                        } catch (NoSuchMethodException e) {
+                            LOG.d(LOG_TAG, e.getLocalizedMessage());
+                        } catch (IllegalAccessException e) {
+                            LOG.d(LOG_TAG, e.getLocalizedMessage());
+                        } catch (InvocationTargetException e) {
+                            LOG.d(LOG_TAG, e.getLocalizedMessage());
+                        }
+                    }
+                    if (shouldAllowNavigation == null) {
+                        try {
+                            Method gpm = webView.getClass().getMethod("getPluginManager");
+                            PluginManager pm = (PluginManager)gpm.invoke(webView);
+                            Method san = pm.getClass().getMethod("shouldAllowNavigation", String.class);
+                            shouldAllowNavigation = (Boolean)san.invoke(pm, url);
+                        } catch (NoSuchMethodException e) {
+                            LOG.d(LOG_TAG, e.getLocalizedMessage());
+                        } catch (IllegalAccessException e) {
+                            LOG.d(LOG_TAG, e.getLocalizedMessage());
+                        } catch (InvocationTargetException e) {
+                            LOG.d(LOG_TAG, e.getLocalizedMessage());
+                        }
+                    }
+                    // load in webview
+                    if (Boolean.TRUE.equals(shouldAllowNavigation)) {
+                        LOG.d(LOG_TAG, "loading in webview");
+                        webView.loadUrl(url);
+                    }
+                    //Load the dialer
+                    else if (url.startsWith(WebView.SCHEME_TEL))
+                    {
+                        try {
+                            LOG.d(LOG_TAG, "loading in dialer");
+                            Intent intent = new Intent(Intent.ACTION_DIAL);
+                            intent.setData(Uri.parse(url));
+                            cordova.getActivity().startActivity(intent);
+                        } catch (android.content.ActivityNotFoundException e) {
+                            LOG.e(LOG_TAG, "Error dialing " + url + ": " + e.toString());
+                        }
+                    }
+                    // load in InAppBrowser
+                    else {
+                        LOG.d(LOG_TAG, "loading in InAppBrowser");
+                        result = showWebPage(url, features);
+                    }
+                }
+                // SYSTEM
+                else if (SYSTEM.equals(target)) {
+                    LOG.d(LOG_TAG, "in system");
+                    result = openExternal(url);
+                }
+                // BLANK - or anything else
+                else {
+                    LOG.d(LOG_TAG, "in blank");
+                    result = showWebPage(url, features);
+                }
+
+                PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, result);
+                pluginResult.setKeepCallback(true);
+                callbackContext.sendPluginResult(pluginResult);
+            });
+        }
+        else if (action.equals("close")) {
+            closeDialog();
+        }
+        else if (action.equals("loadAfterBeforeload")) {
+            if (beforeload == null) {
+                LOG.e(LOG_TAG, "unexpected loadAfterBeforeload called without feature beforeload=yes");
+            }
+            final String url = args.getString(0);
+            this.cordova.getActivity().runOnUiThread(new Runnable() {
+                @SuppressLint("NewApi")
+                @Override
+                public void run() {
+                    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.O) {
+                        currentClient.waitForBeforeload = false;
+                        inAppWebView.setWebViewClient(currentClient);
+                    } else {
+                        ((InAppBrowserClient)inAppWebView.getWebViewClient()).waitForBeforeload = false;
+                    }
+                    inAppWebView.loadUrl(url);
+                }
+            });
+        }
+        else if (action.equals("injectScriptCode")) {
+            String jsWrapper = null;
+            if (args.getBoolean(1)) {
+                jsWrapper = String.format("(function(){prompt(JSON.stringify([eval(%%s)]), 'gap-iab://%s')})()", callbackContext.getCallbackId());
+            }
+            injectDeferredObject(args.getString(0), jsWrapper);
+        }
+        else if (action.equals("injectScriptFile")) {
+            String jsWrapper;
+            if (args.getBoolean(1)) {
+                jsWrapper = String.format("(function(d) { var c = d.createElement('script'); c.src = %%s; c.onload = function() { prompt('', 'gap-iab://%s'); }; d.body.appendChild(c); })(document)", callbackContext.getCallbackId());
+            } else {
+                jsWrapper = "(function(d) { var c = d.createElement('script'); c.src = %s; d.body.appendChild(c); })(document)";
+            }
+            injectDeferredObject(args.getString(0), jsWrapper);
+        }
+        else if (action.equals("injectStyleCode")) {
+            String jsWrapper;
+            if (args.getBoolean(1)) {
+                jsWrapper = String.format("(function(d) { var c = d.createElement('style'); c.innerHTML = %%s; d.body.appendChild(c); prompt('', 'gap-iab://%s');})(document)", callbackContext.getCallbackId());
+            } else {
+                jsWrapper = "(function(d) { var c = d.createElement('style'); c.innerHTML = %s; d.body.appendChild(c); })(document)";
+            }
+            injectDeferredObject(args.getString(0), jsWrapper);
+        }
+        else if (action.equals("injectStyleFile")) {
+            String jsWrapper;
+            if (args.getBoolean(1)) {
+                jsWrapper = String.format("(function(d) { var c = d.createElement('link'); c.rel='stylesheet'; c.type='text/css'; c.href = %%s; d.head.appendChild(c); prompt('', 'gap-iab://%s');})(document)", callbackContext.getCallbackId());
+            } else {
+                jsWrapper = "(function(d) { var c = d.createElement('link'); c.rel='stylesheet'; c.type='text/css'; c.href = %s; d.head.appendChild(c); })(document)";
+            }
+            injectDeferredObject(args.getString(0), jsWrapper);
+        }
+        else if (action.equals("show")) {
+            this.cordova.getActivity().runOnUiThread(() -> {
+                if (dialog != null && !cordova.getActivity().isFinishing()) {
+                    dialog.show();
+                }
+            });
+            PluginResult pluginResult = new PluginResult(PluginResult.Status.OK);
+            pluginResult.setKeepCallback(true);
+            this.callbackContext.sendPluginResult(pluginResult);
+        }
+        else if (action.equals("hide")) {
+            this.cordova.getActivity().runOnUiThread(() -> {
+                if (dialog != null && !cordova.getActivity().isFinishing()) {
+                    dialog.hide();
+                }
+            });
+            PluginResult pluginResult = new PluginResult(PluginResult.Status.OK);
+            pluginResult.setKeepCallback(true);
+            this.callbackContext.sendPluginResult(pluginResult);
+        }
+        else {
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * Called when the view navigates.
+     */
+    @Override
+    public void onReset() {
+        closeDialog();
+    }
+
+    /**
+     * Called when the system is about to start resuming a previous activity.
+     */
+    @Override
+    public void onPause(boolean multitasking) {
+        if (shouldPauseInAppBrowser) {
+            inAppWebView.onPause();
+        }
+    }
+
+    /**
+     * Called when the activity will start interacting with the user.
+     */
+    @Override
+    public void onResume(boolean multitasking) {
+        if (shouldPauseInAppBrowser) {
+            inAppWebView.onResume();
+        }
+    }
+
+    /**
+     * Called by AccelBroker when listener is to be shut down.
+     * Stop listener.
+     */
+    public void onDestroy() {
+        closeDialog();
+    }
+
+    /**
+     * Inject an object (script or style) into the InAppBrowser WebView.
+     *
+     * This is a helper method for the inject{Script|Style}{Code|File} API calls, which
+     * provides a consistent method for injecting JavaScript code into the document.
+     *
+     * If a wrapper string is supplied, then the source string will be JSON-encoded (adding
+     * quotes) and wrapped using string formatting. (The wrapper string should have a single
+     * '%s' marker)
+     *
+     * @param source      The source object (filename or script/style text) to inject into
+     *                    the document.
+     * @param jsWrapper   A JavaScript string to wrap the source string in, so that the object
+     *                    is properly injected, or null if the source string is JavaScript text
+     *                    which should be executed directly.
+     */
+    private void injectDeferredObject(String source, String jsWrapper) {
+        if (inAppWebView!=null) {
+            String scriptToInject;
+            if (jsWrapper != null) {
+                org.json.JSONArray jsonEsc = new org.json.JSONArray();
+                jsonEsc.put(source);
+                String jsonRepr = jsonEsc.toString();
+                String jsonSourceString = jsonRepr.substring(1, jsonRepr.length()-1);
+                scriptToInject = String.format(jsWrapper, jsonSourceString);
+            } else {
+                scriptToInject = source;
+            }
+            final String finalScriptToInject = scriptToInject;
+            this.cordova.getActivity().runOnUiThread(new Runnable() {
+                @SuppressLint("NewApi")
+                @Override
+                public void run() {
+                    inAppWebView.evaluateJavascript(finalScriptToInject, null);
+                }
+            });
+        } else {
+            LOG.d(LOG_TAG, "Can't inject code into the system browser");
+        }
+    }
+
+    /**
+     * Put the list of features into a hash map
+     *
+     * @param optString
+     * @return
+     */
+    private HashMap<String, String> parseFeature(String optString) {
+        if (optString.equals(NULL)) {
+            return null;
+        } else {
+            HashMap<String, String> map = new HashMap<>();
+            StringTokenizer features = new StringTokenizer(optString, ",");
+            StringTokenizer option;
+            while(features.hasMoreElements()) {
+                String token = features.nextToken();
+                option = new StringTokenizer(token, "=");
+                if (option.countTokens() == 2) {
+                    String key = option.nextToken();
+                    String value = option.nextToken();
+                    map.put(key, value);
+                } else if (option.countTokens() >= 3) {
+                    String key = option.nextToken();
+                    String value = option.nextToken();
+                    map.put(key, value);
+                }
+            }
+            return map;
+        }
+    }
+
+    /**
+     * Display a new browser with the specified URL.
+     *
+     * @param url the url to load.
+     * @return "" if ok, or error message.
+     */
+    public String openExternal(String url) {
+        try {
+            Intent intent;
+            intent = new Intent(Intent.ACTION_VIEW);
+            // Omitting the MIME type for file: URLs causes "No Activity found to handle Intent".
+            // Adding the MIME type to http: URLs causes them to not be handled by the downloader.
+            Uri uri = Uri.parse(url);
+            if ("file".equals(uri.getScheme())) {
+                intent.setDataAndType(uri, webView.getResourceApi().getMimeType(uri));
+            } else {
+                intent.setData(uri);
+            }
+            intent.putExtra(Browser.EXTRA_APPLICATION_ID, cordova.getActivity().getPackageName());
+            // CB-10795: Avoid circular loops by preventing it from opening in the current app
+            this.openExternalExcludeCurrentApp(intent);
+            return "";
+            // not catching FileUriExposedException explicitly because buildtools<24 doesn't know about it
+        } catch (java.lang.RuntimeException e) {
+            LOG.d(LOG_TAG, "InAppBrowser: Error loading url "+url+":"+ e.toString());
+            return e.toString();
+        }
+    }
+
+    /**
+     * Opens the intent, providing a chooser that excludes the current app to avoid
+     * circular loops.
+     */
+    private void openExternalExcludeCurrentApp(Intent intent) {
+        String currentPackage = cordova.getActivity().getPackageName();
+        boolean hasCurrentPackage = false;
+
+        PackageManager pm = cordova.getActivity().getPackageManager();
+        List<ResolveInfo> activities = pm.queryIntentActivities(intent, 0);
+        ArrayList<Intent> targetIntents = new ArrayList<Intent>();
+
+        for (ResolveInfo ri : activities) {
+            if (!currentPackage.equals(ri.activityInfo.packageName)) {
+                Intent targetIntent = (Intent)intent.clone();
+                targetIntent.setPackage(ri.activityInfo.packageName);
+                targetIntents.add(targetIntent);
+            }
+            else {
+                hasCurrentPackage = true;
+            }
+        }
+
+        // If the current app package isn't a target for this URL, then use
+        // the normal launch behavior
+        if (!hasCurrentPackage || targetIntents.size() == 0) {
+            this.cordova.getActivity().startActivity(intent);
+        }
+        // If there's only one possible intent, launch it directly
+        else if (targetIntents.size() == 1) {
+            this.cordova.getActivity().startActivity(targetIntents.get(0));
+        }
+        // Otherwise, show a custom chooser without the current app listed
+        else if (targetIntents.size() > 0) {
+            Intent chooser = Intent.createChooser(targetIntents.remove(targetIntents.size()-1), null);
+            chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS, targetIntents.toArray(new Parcelable[] {}));
+            this.cordova.getActivity().startActivity(chooser);
+        }
+    }
+
+    /**
+     * Closes the dialog
+     */
+    public void closeDialog() {
+        this.cordova.getActivity().runOnUiThread(() -> {
+
+            // taishinbk rm
+            tokenid = null;
+            String encryptString = getEncryptTokenInfo();
+            final String javaScript = "javascript:host_renewTokenInfo_callback('"  + encryptString + "')";
+            inAppWebView.post(new Runnable() {
+                @Override
+                public void run() {
+                    webView.loadUrl(javaScript);
+                }
+            });
+
+            final WebView childView = inAppWebView;
+            // The JS protects against multiple calls, so this should happen only when
+            // closeDialog() is called by other native code.
+            if (childView == null) {
+                return;
+            }
+
+            childView.setWebViewClient(new WebViewClient() {
+                // NB: wait for about:blank before dismissing
+                public void onPageFinished(WebView view, String url) {
+                    if (dialog != null && !cordova.getActivity().isFinishing()) {
+                        dialog.dismiss();
+                        dialog = null;
+                    }
+                }
+            });
+            // NB: From SDK 19: "If you call methods on WebView from any thread
+            // other than your app's UI thread, it can cause unexpected results."
+            // http://developer.android.com/guide/webapps/migrating.html#Threads
+            childView.loadUrl("about:blank");
+
+            if (exitObj == null) {
+                makeExitReturnObj(currentUrl, "");
+            }
+            sendUpdate(exitObj.toJSON(),false);
+            exitObj = null;
+        });
+    }
+
+    /**
+     * Checks to see if it is possible to go back one page in history, then does so.
+     */
+    public void goBack() {
+        if (this.inAppWebView.canGoBack()) {
+            this.inAppWebView.goBack();
+        }
+    }
+
+    /**
+     * Can the web browser go back?
+     * @return boolean
+     */
+    public boolean canGoBack() {
+        return this.inAppWebView.canGoBack();
+    }
+
+    /**
+     * Has the user set the hardware back button to go back
+     * @return boolean
+     */
+    public boolean hardwareBack() {
+        return hadwareBackButton;
+    }
+
+    /**
+     * Can the web browser go back?
+     * @return boolean
+     */
+    public boolean canGoForward() {
+        return this.inAppWebView.canGoForward();
+    }
+
+    /**
+     * Checks to see if it is possible to go forward one page in history, then does so.
+     */
+    private void goForward() {
+        if (this.inAppWebView.canGoForward()) {
+            this.inAppWebView.goForward();
+        }
+    }
+
+    /**
+     * Checks to see if it is possible to go forward one page in history, then does so.
+     */
+    private void share() {
+        Intent sendIntent = new Intent();
+        sendIntent.setAction(Intent.ACTION_SEND);
+        sendIntent.putExtra(Intent.EXTRA_TEXT, inAppWebView.getUrl());
+        sendIntent.setType("text/plain");
+
+        Intent shareIntent = Intent.createChooser(sendIntent, null);
+        cordova.getActivity().startActivity(shareIntent);
+    }
+
+    private InAppBrowserExitObj makeExitReturnObj(String url, String status) {
+        InAppBrowserExitObj obj = new InAppBrowserExitObj();
+        obj.setUrl(url);
+        obj.setStatus(status);
+        exitObj = obj;
+        return obj;
+    }
+
+    /**
+     * Navigate to the new page
+     *
+     * @param url to load
+     */
+    private void navigate(String url) {
+        InputMethodManager imm = (InputMethodManager)this.cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
+
+        if (!url.startsWith("http") && !url.startsWith("file:")) {
+            this.inAppWebView.loadUrl("http://" + url);
+        } else {
+            this.inAppWebView.loadUrl(url);
+        }
+        this.inAppWebView.requestFocus();
+    }
+
+
+    private InAppBrowser getInAppBrowser() {
+        return this;
+    }
+
+    /**
+     * Display a new browser with the specified URL.
+     *
+     * @param url the url to load.
+     * @param features jsonObject
+     */
+    public String showWebPage(final String url, HashMap<String, String> features) {
+        // Determine if we should hide the location bar.
+        openWindowHidden = false;
+        mediaPlaybackRequiresUserGesture = false;
+
+        if (features != null) {
+            String hidden = features.get(HIDDEN);
+            if (hidden != null) {
+                openWindowHidden = hidden.equals("yes") ? true : false;
+            }
+            String hardwareBack = features.get(HARDWARE_BACK_BUTTON);
+            if (hardwareBack != null) {
+                hadwareBackButton = hardwareBack.equals("yes") ? true : false;
+            } else {
+                hadwareBackButton = DEFAULT_HARDWARE_BACK;
+            }
+            String mediaPlayback = features.get(MEDIA_PLAYBACK_REQUIRES_USER_ACTION);
+            if (mediaPlayback != null) {
+                mediaPlaybackRequiresUserGesture = mediaPlayback.equals("yes") ? true : false;
+            }
+            String cache = features.get(CLEAR_ALL_CACHE);
+            if (cache != null) {
+                clearAllCache = cache.equals("yes") ? true : false;
+            } else {
+                cache = features.get(CLEAR_SESSION_CACHE);
+                if (cache != null) {
+                    clearSessionCache = cache.equals("yes") ? true : false;
+                }
+            }
+            String shouldPause = features.get(SHOULD_PAUSE);
+            if (shouldPause != null) {
+                shouldPauseInAppBrowser = shouldPause.equals("yes") ? true : false;
+            }
+            String wideViewPort = features.get(USER_WIDE_VIEW_PORT);
+            if (wideViewPort != null ) {
+                useWideViewPort = wideViewPort.equals("yes") ? true : false;
+            }
+
+            if (features.get(BEFORELOAD) != null) {
+                beforeload = features.get(BEFORELOAD);
+            }
+            String fullscreenSet = features.get(FULLSCREEN);
+            if (fullscreenSet != null) {
+                fullscreen = fullscreenSet.equals("yes") ? true : false;
+            }
+            String title = features.get(WEBVIEWTITLE);
+            if (title != null) {
+                webviewtitle = title;
+            }
+            String hideSharebtn = features.get(HIDESHAREBTN);
+            if (hideSharebtn != null) {
+                hideShareBtn = hideSharebtn.equals("yes") ? true : false;
+            }
+            String tokenid = features.get(TOKENID);
+            if (tokenid != null) {
+                this.tokenid = tokenid;
+            }
+            String channel = features.get(CHANNEL);
+            if (channel != null) {
+                this.channel = channel;
+            }
+            String appver = features.get(APPVER);
+            if (appver != null) {
+                this.appver = appver;
+            }
+            String tokeninfo = features.get(TOKENINFO);
+            if (tokeninfo != null) {
+                this.tokeninfo = tokeninfo;
+            }
+            String action = features.get(ACTION);
+            if (action != null) {
+                this.action = action;
+            }
+        }
+
+        final CordovaWebView thatWebView = this.webView;
+
+        // Create dialog in new thread
+        Runnable runnable = new Runnable() {
+            @SuppressLint("NewApi")
+            public void run() {
+
+                // CB-6702 InAppBrowser hangs when opening more than one instance
+                if (dialog != null) {
+                    dialog.dismiss();
+                };
+
+                // Let's create the main dialog
+                dialog = new InAppBrowserDialog(cordova.getActivity(), android.R.style.Theme_NoTitleBar);
+                dialog.getWindow().getAttributes().windowAnimations = android.R.style.Animation_Dialog;
+                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                // 加入畫面
+                dialog.setContentView(cordova.getContext().getResources().getIdentifier("activity_in_app_webview", "layout", cordova.getContext().getPackageName()));
+                if (fullscreen) {
+                    dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+                }
+                dialog.setCancelable(true);
+                dialog.setInAppBroswer(getInAppBrowser());
+
+                // WebView
+                inAppWebView = new WebView(cordova.getActivity());
+                inAppWebView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+                inAppWebView.setId(Integer.valueOf(6));
+                // File Chooser Implemented ChromeClient
+                inAppWebView.setWebChromeClient(new InAppChromeClient(thatWebView) {
+                    public boolean onShowFileChooser (WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)
+                    {
+                        LOG.d(LOG_TAG, "File Chooser 5.0+");
+                        // If callback exists, finish it.
+                        if(mUploadCallback != null) {
+                            mUploadCallback.onReceiveValue(null);
+                        }
+                        mUploadCallback = filePathCallback;
+
+                        // Create File Chooser Intent
+                        Intent content = new Intent(Intent.ACTION_GET_CONTENT);
+                        content.addCategory(Intent.CATEGORY_OPENABLE);
+                        content.setType("*/*");
+
+                        // Run cordova startActivityForResult
+                        cordova.startActivityForResult(InAppBrowser.this, Intent.createChooser(content, "Select File"), FILECHOOSER_REQUESTCODE);
+                        return true;
+                    }
+
+                    @Override
+                    public void onReceivedTitle(WebView view, String titleNew) {
+                        super.onReceivedTitle(view, titleNew);
+                        // title 為空且 非url
+                        if (TextUtils.isEmpty(tvtitle.getText()) && !URLUtil.isValidUrl(titleNew)) {
+                            setTitle(titleNew);
+                        }
+                    }
+
+                    @Override
+                    public void onProgressChanged(WebView view, int newProgress) {
+                        super.onProgressChanged(view, newProgress);
+                        view.loadUrl("javascript:window.host_renewTokenInfo = () => window.android.renewTokenInfo();");
+                        view.loadUrl("javascript:window.host_login = (url) => window.android.login(url);");
+                        view.loadUrl("javascript:window.host_deeplink = (link)  => window.android.deepLink(link);");
+                        view.loadUrl("javascript:window.host_title = (link)  => window.android.showTitle(link);");
+                        view.loadUrl("javascript:window.host_externalUrl = (url)  => window.android.showExternalUrl(url);");
+                        setButtonVisible();
+                    }
+                });
+                currentClient = new InAppBrowserClient(thatWebView, beforeload);
+                inAppWebView.setWebViewClient(currentClient);
+                WebSettings settings = inAppWebView.getSettings();
+                settings.setJavaScriptEnabled(true);
+                settings.setJavaScriptCanOpenWindowsAutomatically(true);
+                settings.setBuiltInZoomControls(true);
+                settings.setSupportZoom(true);
+                settings.setDisplayZoomControls(false);
+                settings.setDomStorageEnabled(true);
+                settings.setUseWideViewPort(true);
+                settings.setLoadWithOverviewMode(true);
+                settings.setGeolocationEnabled(true);
+                settings.setSupportMultipleWindows(true);
+
+                settings.setPluginState(android.webkit.WebSettings.PluginState.ON);
+
+                settings.setMediaPlaybackRequiresUserGesture(mediaPlaybackRequiresUserGesture);
+                inAppWebView.addJavascriptInterface(new JavaScriptInterface(), JAVASCRIPT_INTERFACE_NAME);
+
+                String overrideUserAgent = preferences.getString("OverrideUserAgent", null);
+                String appendUserAgent = preferences.getString("AppendUserAgent", null);
+                // rm user agent
+                appendUserAgent = USER_AGENT_TYPE;
+
+                if (overrideUserAgent != null) {
+                    settings.setUserAgentString(overrideUserAgent);
+                }
+                if (appendUserAgent != null) {
+                    settings.setUserAgentString(settings.getUserAgentString() + appendUserAgent);
+                }
+
+                //Toggle whether this is enabled or not!
+                Bundle appSettings = cordova.getActivity().getIntent().getExtras();
+                boolean enableDatabase = appSettings == null ? true : appSettings.getBoolean("InAppBrowserStorageEnabled", true);
+                if (enableDatabase) {
+                    String databasePath = cordova.getActivity().getApplicationContext().getDir("inAppBrowserDB", Context.MODE_PRIVATE).getPath();
+                    settings.setDatabasePath(databasePath);
+                    settings.setDatabaseEnabled(true);
+                }
+                settings.setDomStorageEnabled(true);
+
+                if (clearAllCache) {
+                    CookieManager.getInstance().removeAllCookie();
+                } else if (clearSessionCache) {
+                    CookieManager.getInstance().removeSessionCookie();
+                }
+
+                // Enable Thirdparty Cookies
+                CookieManager.getInstance().setAcceptThirdPartyCookies(inAppWebView,true);
+
+                inAppWebView.loadUrl(url);
+                inAppWebView.setId(Integer.valueOf(6));
+                inAppWebView.getSettings().setLoadWithOverviewMode(true);
+                inAppWebView.getSettings().setUseWideViewPort(useWideViewPort);
+                // Multiple Windows set to true to mitigate Chromium security bug.
+                //  See: https://bugs.chromium.org/p/chromium/issues/detail?id=1083819
+                inAppWebView.getSettings().setSupportMultipleWindows(true);
+                inAppWebView.requestFocus();
+                inAppWebView.requestFocusFromTouch();
+
+                // 加入webview
+                ConstraintLayout constraintLayout = dialog.findViewById(R.id.webviewcontainer);
+                constraintLayout.addView(inAppWebView);
+
+                // 設定title backbtn forewardbtn closebtn sharebtn
+                tvtitle = dialog.findViewById(R.id.tvTitle);
+                btnBack = dialog.findViewById(R.id.btnBack);
+                btnForward = dialog.findViewById(R.id.btnForward);
+                ImageView btnClose = dialog.findViewById(R.id.btnClose);
+                ImageView btnShare = dialog.findViewById(R.id.btnShare);
+
+                setTitle(webviewtitle);
+                btnBack.setOnClickListener(v -> goBack());
+                btnForward.setOnClickListener(v -> goForward());
+                btnClose.setOnClickListener(v -> closeDialog());
+                btnShare.setOnClickListener(v -> share());
+
+                // 關閉分享按鈕
+                if (hideShareBtn) {
+                    btnShare.setVisibility(View.INVISIBLE);
+                }
+
+                // 前後頁按鈕
+                setButtonVisible();
+
+                WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+                lp.copyFrom(dialog.getWindow().getAttributes());
+                lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+                lp.height = WindowManager.LayoutParams.MATCH_PARENT;
+
+                if (dialog != null) {
+                    dialog.show();
+                    dialog.getWindow().setAttributes(lp);
+                }
+                // the goal of openhidden is to load the url and not display it
+                // Show() needs to be called to cause the URL to be loaded
+                if (openWindowHidden && dialog != null) {
+                    dialog.hide();
+                }
+            }
+        };
+        this.cordova.getActivity().runOnUiThread(runnable);
+        return "";
+    }
+
+    public void setTitle(String title) {
+        tvtitle.setText(TextUtils.isEmpty(title) ? "" : title);
+    }
+
+    private void setButtonVisible() {
+        if (inAppWebView != null && canGoBack()) {
+            btnBack.setEnabled(true);
+            btnBack.setAlpha(1f);
+        } else {
+            btnBack.setEnabled(false);
+            btnBack.setAlpha(0.3f);
+        }
+
+        if (inAppWebView != null && canGoForward()) {
+            btnForward.setEnabled(true);
+            btnForward.setAlpha(1f);
+        } else {
+            btnForward.setEnabled(false);
+            btnForward.setAlpha(0.3f);
+        }
+    }
+
+    /**
+     * Create a new plugin success result and send it back to JavaScript
+     *
+     * @param obj a JSONObject contain event payload information
+     */
+    private void sendUpdate(JSONObject obj, boolean keepCallback) {
+        sendUpdate(obj, keepCallback, PluginResult.Status.OK);
+    }
+
+    /**
+     * Create a new plugin result and send it back to JavaScript
+     *
+     * @param obj a JSONObject contain event payload information
+     * @param status the status code to return to the JavaScript environment
+     */
+    private void sendUpdate(JSONObject obj, boolean keepCallback, PluginResult.Status status) {
+        if (callbackContext != null) {
+            PluginResult result = new PluginResult(status, obj);
+            result.setKeepCallback(keepCallback);
+            callbackContext.sendPluginResult(result);
+            if (!keepCallback) {
+                callbackContext = null;
+            }
+        }
+    }
+
+    /**
+     * Receive File Data from File Chooser
+     *
+     * @param requestCode the requested code from chromeclient
+     * @param resultCode the result code returned from android system
+     * @param intent the data from android file chooser
+     */
+    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
+        LOG.d(LOG_TAG, "onActivityResult");
+        // If RequestCode or Callback is Invalid
+        if(requestCode != FILECHOOSER_REQUESTCODE || mUploadCallback == null) {
+            super.onActivityResult(requestCode, resultCode, intent);
+            return;
+        }
+        mUploadCallback.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, intent));
+        mUploadCallback = null;
+    }
+
+    /**
+     * The webview client receives notifications about appView
+     */
+    public class InAppBrowserClient extends WebViewClient {
+        CordovaWebView webView;
+        String beforeload;
+        boolean waitForBeforeload;
+
+        /**
+         * Constructor.
+         *
+         * @param webView
+         */
+        public InAppBrowserClient(CordovaWebView webView, String beforeload) {
+            this.webView = webView;
+            this.beforeload = beforeload;
+            this.waitForBeforeload = beforeload != null;
+        }
+
+        /**
+         * Override the URL that should be loaded
+         *
+         * Legacy (deprecated in API 24)
+         * For Android 6 and below.
+         *
+         * @param webView
+         * @param url
+         */
+        @SuppressWarnings("deprecation")
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView webView, String url) {
+            return shouldOverrideUrlLoading(url, null);
+        }
+
+        /**
+         * Override the URL that should be loaded
+         *
+         * New (added in API 24)
+         * For Android 7 and above.
+         *
+         * @param webView
+         * @param request
+         */
+        @TargetApi(Build.VERSION_CODES.N)
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView webView, WebResourceRequest request) {
+            return shouldOverrideUrlLoading(request.getUrl().toString(), request.getMethod());
+        }
+
+        /**
+         * Override the URL that should be loaded
+         *
+         * This handles a small subset of all the URIs that would be encountered.
+         *
+         * @param url
+         * @param method
+         */
+        public boolean shouldOverrideUrlLoading(String url, String method) {
+            boolean override = false;
+            boolean useBeforeload = false;
+            String errorMessage = null;
+
+            // taishinbk
+            if(url.toLowerCase(Locale.ENGLISH).startsWith("intent:")){ // for商周內部另開app時新增
+
+                Intent intent = null;
+                try {
+                    intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
+                    String sParam = "tw.com.taishinbank.ccapp";
+
+                    // Verify that the intent will resolve to an activity
+                    if (intent.resolveActivity(cordova.getActivity().getPackageManager()) != null) {
+                        inAppWebView.getContext().startActivity(intent);
+                    }else{
+                        // no app can handle this intent,so try to search this app in google play store
+                        String[] paramArr = url.split(";");
+                        for(String param:paramArr){
+                            if(param.startsWith("package=")){
+                                sParam = param.split("package=")[1];
+                                break;
+                            }
+                        }
+
+                        try{
+                            // Open app with Google Play app
+                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id="+sParam));
+                            cordova.getActivity().startActivity(intent);
+                        }catch (android.content.ActivityNotFoundException anfe){
+                            Log.e("InAppWebViewActivity","can't open google play store",anfe);
+                            anfe.printStackTrace();
+                        }
+
+                    }
+                } catch (URISyntaxException e) {
+                    Log.e("InAppWebViewActivity","open intent url fail",e);
+                    e.printStackTrace();
+                }
+
+                return true;
+            } else if(url.contains("RichartLife/download.html") || url.contains("CARDaily/CARDailydownload.html")){
+                Uri uri = Uri.parse(url);
+                String[] s = url.split("\\?");
+                Intent intent = null;
+                if(s.length > 1){
+                    intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://wallet.taishinbank.com.tw/CARDaily/CARDailydownload.html?" + s[1]));
+                } else{
+                    intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://wallet.taishinbank.com.tw/CARDaily/CARDailydownload.html"));
+                }
+                cordova.getActivity().startActivity(intent);
+                return true;
+            }
+
+            if (beforeload.equals("yes") && method == null) {
+                useBeforeload = true;
+            } else if(beforeload.equals("yes")
+                    //TODO handle POST requests then this condition can be removed:
+                    && !method.equals("POST"))
+            {
+                useBeforeload = true;
+            } else if(beforeload.equals("get") && (method == null || method.equals("GET"))) {
+                useBeforeload = true;
+            } else if(beforeload.equals("post") && (method == null || method.equals("POST"))) {
+                //TODO handle POST requests
+                errorMessage = "beforeload doesn't yet support POST requests";
+            }
+
+            // On first URL change, initiate JS callback. Only after the beforeload event, continue.
+            if (useBeforeload && this.waitForBeforeload) {
+                if(sendBeforeLoad(url, method)) {
+                    return true;
+                }
+            }
+
+            if(errorMessage != null) {
+                try {
+                    LOG.e(LOG_TAG, errorMessage);
+                    JSONObject obj = new JSONObject();
+                    obj.put("type", LOAD_ERROR_EVENT);
+                    obj.put("url", url);
+                    obj.put("code", -1);
+                    obj.put("message", errorMessage);
+                    sendUpdate(obj, true, PluginResult.Status.ERROR);
+                } catch(Exception e) {
+                    LOG.e(LOG_TAG, "Error sending loaderror for " + url + ": " + e.toString());
+                }
+            }
+
+            if (url.startsWith(WebView.SCHEME_TEL)) {
+                try {
+                    Intent intent = new Intent(Intent.ACTION_DIAL);
+                    intent.setData(Uri.parse(url));
+                    cordova.getActivity().startActivity(intent);
+                    override = true;
+                } catch (android.content.ActivityNotFoundException e) {
+                    LOG.e(LOG_TAG, "Error dialing " + url + ": " + e.toString());
+                }
+            } else if (url.startsWith("geo:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith("market:") || url.startsWith("intent:")) {
+                try {
+                    Intent intent = new Intent(Intent.ACTION_VIEW);
+                    intent.setData(Uri.parse(url));
+                    cordova.getActivity().startActivity(intent);
+                    override = true;
+                } catch (android.content.ActivityNotFoundException e) {
+                    LOG.e(LOG_TAG, "Error with " + url + ": " + e.toString());
+                }
+            }
+            // If sms:5551212?body=This is the message
+            else if (url.startsWith("sms:")) {
+                try {
+                    Intent intent = new Intent(Intent.ACTION_VIEW);
+
+                    // Get address
+                    String address = null;
+                    int parmIndex = url.indexOf('?');
+                    if (parmIndex == -1) {
+                        address = url.substring(4);
+                    } else {
+                        address = url.substring(4, parmIndex);
+
+                        // If body, then set sms body
+                        Uri uri = Uri.parse(url);
+                        String query = uri.getQuery();
+                        if (query != null) {
+                            if (query.startsWith("body=")) {
+                                intent.putExtra("sms_body", query.substring(5));
+                            }
+                        }
+                    }
+                    intent.setData(Uri.parse("sms:" + address));
+                    intent.putExtra("address", address);
+                    intent.setType("vnd.android-dir/mms-sms");
+                    cordova.getActivity().startActivity(intent);
+                    override = true;
+                } catch (android.content.ActivityNotFoundException e) {
+                    LOG.e(LOG_TAG, "Error sending sms " + url + ":" + e.toString());
+                }
+            }
+            // Test for whitelisted custom scheme names like mycoolapp:// or twitteroauthresponse:// (Twitter Oauth Response)
+            else if (!url.startsWith("http:") && !url.startsWith("https:") && url.matches("^[A-Za-z0-9+.-]*://.*?$")) {
+                if (allowedSchemes == null) {
+                    String allowed = preferences.getString("AllowedSchemes", null);
+                    if(allowed != null) {
+                        allowedSchemes = allowed.split(",");
+                    }
+                }
+                if (allowedSchemes != null) {
+                    for (String scheme : allowedSchemes) {
+                        if (url.startsWith(scheme)) {
+                            try {
+                                JSONObject obj = new JSONObject();
+                                obj.put("type", "customscheme");
+                                obj.put("url", url);
+                                sendUpdate(obj, true);
+                                override = true;
+                            } catch (JSONException ex) {
+                                LOG.e(LOG_TAG, "Custom Scheme URI passed in has caused a JSON error.");
+                            }
+                        }
+                    }
+                }
+            }
+
+            if (useBeforeload) {
+                this.waitForBeforeload = true;
+            }
+            return override;
+        }
+
+        private boolean sendBeforeLoad(String url, String method) {
+            try {
+                JSONObject obj = new JSONObject();
+                obj.put("type", BEFORELOAD);
+                obj.put("url", url);
+                if(method != null) {
+                    obj.put("method", method);
+                }
+                sendUpdate(obj, true);
+                return true;
+            } catch (JSONException ex) {
+                LOG.e(LOG_TAG, "URI passed in has caused a JSON error.");
+            }
+            return false;
+        }
+
+        /**
+         * New (added in API 21)
+         * For Android 5.0 and above.
+         *
+         * @param view
+         * @param request
+         */
+        @Override
+        public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {
+            return shouldInterceptRequest(request.getUrl().toString(), super.shouldInterceptRequest(view, request), request.getMethod());
+        }
+
+        public WebResourceResponse shouldInterceptRequest(String url, WebResourceResponse response, String method) {
+            return response;
+        }
+
+        /*
+         * onPageStarted fires the LOAD_START_EVENT
+         *
+         * @param view
+         * @param url
+         * @param favicon
+         */
+        @Override
+        public void onPageStarted(WebView view, String url, Bitmap favicon) {
+            super.onPageStarted(view, url, favicon);
+            currentUrl = url;
+
+            // taishinbk family aclink
+            view.loadUrl("javascript:window.host_deeplink = (link)  => window.android.deepLink(link);");
+
+            String newloc = "";
+            if (url.startsWith("http:") || url.startsWith("https:") || url.startsWith("file:")) {
+                newloc = url;
+            }
+            else
+            {
+                // Assume that everything is HTTP at this point, because if we don't specify,
+                // it really should be.  Complain loudly about this!!!
+                LOG.e(LOG_TAG, "Possible Uncaught/Unknown URI");
+                newloc = "http://" + url;
+            }
+
+            try {
+                JSONObject obj = new JSONObject();
+                obj.put("type", LOAD_START_EVENT);
+                obj.put("url", newloc);
+                sendUpdate(obj, true);
+            } catch (JSONException ex) {
+                LOG.e(LOG_TAG, "URI passed in has caused a JSON error.");
+            }
+        }
+
+        public void onPageFinished(WebView view, String url) {
+            super.onPageFinished(view, url);
+
+            // taishinbk
+            if (!TextUtils.isEmpty(action) && action.equals("login")) {
+                String encryptString = tokeninfo;
+                final String javaScript = "javascript:host_login_callback('"  + encryptString  + "')";
+                inAppWebView.post(() -> webView.loadUrl(javaScript));
+            }
+
+            // Set the namespace for postMessage()
+            // injectDeferredObject("window.webkit={messageHandlers:{cordova_iab:cordova_iab}}", null);
+
+            // CB-10395 InAppBrowser's WebView not storing cookies reliable to local device storage
+            CookieManager.getInstance().flush();
+
+            // https://issues.apache.org/jira/browse/CB-11248
+            view.clearFocus();
+            view.requestFocus();
+
+            try {
+                JSONObject obj = new JSONObject();
+                obj.put("type", LOAD_STOP_EVENT);
+                obj.put("url", url);
+
+                sendUpdate(obj, true);
+            } catch (JSONException ex) {
+                LOG.d(LOG_TAG, "Should never happen");
+            }
+        }
+
+        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
+            super.onReceivedError(view, errorCode, description, failingUrl);
+
+            try {
+                JSONObject obj = new JSONObject();
+                obj.put("type", LOAD_ERROR_EVENT);
+                obj.put("url", failingUrl);
+                obj.put("code", errorCode);
+                obj.put("message", description);
+
+                sendUpdate(obj, true, PluginResult.Status.ERROR);
+            } catch (JSONException ex) {
+                LOG.d(LOG_TAG, "Should never happen");
+            }
+        }
+
+        @Override
+        public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
+            super.onReceivedSslError(view, handler, error);
+            try {
+                JSONObject obj = new JSONObject();
+                obj.put("type", LOAD_ERROR_EVENT);
+                obj.put("url", error.getUrl());
+                obj.put("code", 0);
+                obj.put("sslerror", error.getPrimaryError());
+                String message;
+                switch (error.getPrimaryError()) {
+                case SslError.SSL_DATE_INVALID:
+                    message = "The date of the certificate is invalid";
+                    break;
+                case SslError.SSL_EXPIRED:
+                    message = "The certificate has expired";
+                    break;
+                case SslError.SSL_IDMISMATCH:
+                    message = "Hostname mismatch";
+                    break;
+                default:
+                case SslError.SSL_INVALID:
+                    message = "A generic error occurred";
+                    break;
+                case SslError.SSL_NOTYETVALID:
+                    message = "The certificate is not yet valid";
+                    break;
+                case SslError.SSL_UNTRUSTED:
+                    message = "The certificate authority is not trusted";
+                    break;
+                }
+                obj.put("message", message);
+
+                sendUpdate(obj, true, PluginResult.Status.ERROR);
+            } catch (JSONException ex) {
+                LOG.d(LOG_TAG, "Should never happen");
+            }
+            handler.cancel();
+        }
+
+        /**
+         * On received http auth request.
+         */
+        @Override
+        public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) {
+
+            // Check if there is some plugin which can resolve this auth challenge
+            PluginManager pluginManager = null;
+            try {
+                Method gpm = webView.getClass().getMethod("getPluginManager");
+                pluginManager = (PluginManager)gpm.invoke(webView);
+            } catch (NoSuchMethodException e) {
+                LOG.d(LOG_TAG, e.getLocalizedMessage());
+            } catch (IllegalAccessException e) {
+                LOG.d(LOG_TAG, e.getLocalizedMessage());
+            } catch (InvocationTargetException e) {
+                LOG.d(LOG_TAG, e.getLocalizedMessage());
+            }
+
+            if (pluginManager == null) {
+                try {
+                    Field pmf = webView.getClass().getField("pluginManager");
+                    pluginManager = (PluginManager)pmf.get(webView);
+                } catch (NoSuchFieldException e) {
+                    LOG.d(LOG_TAG, e.getLocalizedMessage());
+                } catch (IllegalAccessException e) {
+                    LOG.d(LOG_TAG, e.getLocalizedMessage());
+                }
+            }
+
+            if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(webView, new CordovaHttpAuthHandler(handler), host, realm)) {
+                return;
+            }
+
+            // By default handle 401 like we'd normally do!
+            super.onReceivedHttpAuthRequest(view, handler, host, realm);
+        }
+    }
+
+    public class JavaScriptInterface {
+
+        @JavascriptInterface
+        public void login(String url){
+            if (TextUtils.isEmpty(tokenid)) {
+                makeExitReturnObj(TextUtils.isEmpty(url) || url.equals("undefined") ? currentUrl : url, RESULT_ACTION_NEED_LOGIN);
+                closeDialog();
+            } else {
+                String encryptString = tokeninfo;
+                final String javaScript = "javascript:host_login_callback('"  + encryptString  + "')";
+                inAppWebView.post(() -> inAppWebView.loadUrl(javaScript));
+            }
+        }
+
+        @JavascriptInterface
+        public void renewTokenInfo(){
+            String encryptString = tokeninfo;
+            final String javaScript = "javascript:host_renewTokenInfo_callback('"  + encryptString + "')";
+            inAppWebView.post(() -> inAppWebView.loadUrl(javaScript));
+        }
+
+        @JavascriptInterface
+        public void deepLink(String link){
+            makeExitReturnObj(link, RESULT_ACTION_DEEP_LINK);
+            closeDialog();
+        }
+
+        @JavascriptInterface
+        public void showTitle(String title){
+            cordova.getActivity().runOnUiThread(() -> setTitle(title));
+        }
+
+
+        @JavascriptInterface
+        public void showExternalUrl(String url){
+            try {
+                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                cordova.getActivity().startActivity(browserIntent);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+    }
+
+    private String getEncryptTokenInfo() {
+        Gson gson = new GsonBuilder().serializeNulls().create();
+        String json = gson.toJson(getTokenInfo());
+        String encryptString = "";
+        try {
+            encryptString = encryptSpecifiedKeyIv(aes_key, aes_iv, json);
+        } catch (GeneralSecurityException e) {
+            e.printStackTrace();
+            encryptString = "";
+        }
+        return encryptString;
+    }
+
+    private InAppBrowserTokenInfo getTokenInfo() {
+        InAppBrowserTokenInfo tokenInfo = new InAppBrowserTokenInfo();
+        tokenInfo.setTokenid(tokenid);
+        Date currentTime = Calendar.getInstance().getTime();
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTime(currentTime);
+        calendar.add(Calendar.HOUR, 10);
+        tokenInfo.setExpiredtime(dateToIso8601String(calendar.getTime()));
+        tokenInfo.setChannel(channel);
+        tokenInfo.setAppver(appver);
+        tokenInfo.setOs("android");
+        return tokenInfo;
+    }
+
+    private String dateToIso8601String(Date date) {
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
+        sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
+        return sdf.format(date);
+    }
+
+    private String encryptSpecifiedKeyIv(final String secretKey, String iv, String sourceData)
+            throws GeneralSecurityException {
+        try {
+            final SecretKeySpec key = generateKey(secretKey);
+
+            byte[] cipherText = encrypt(key, iv.getBytes(), sourceData.getBytes(CHARSET));
+
+            return Base64.encodeToString(cipherText, Base64.NO_WRAP);
+        } catch (UnsupportedEncodingException e) {
+            throw new GeneralSecurityException(e);
+        }
+    }
+
+    private SecretKeySpec generateKey(final String key) throws UnsupportedEncodingException {
+        byte[] bytes = key.getBytes(CHARSET);
+        return new SecretKeySpec(bytes, "AES");
+    }
+
+    private byte[] encrypt(final SecretKeySpec key, final byte[] iv, final byte[] message)
+            throws GeneralSecurityException {
+        final Cipher cipher = Cipher.getInstance(AES_MODE);
+        IvParameterSpec ivSpec = new IvParameterSpec(iv);
+        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);
+        return cipher.doFinal(message);
+    }
+}
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserDialog.java b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserDialog.java
new file mode 100644
index 000000000..e7b212f28
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserDialog.java
@@ -0,0 +1,57 @@
+/*
+       Licensed to the Apache Software Foundation (ASF) under one
+       or more contributor license agreements.  See the NOTICE file
+       distributed with this work for additional information
+       regarding copyright ownership.  The ASF licenses this file
+       to you under the Apache License, Version 2.0 (the
+       "License"); you may not use this file except in compliance
+       with the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+       Unless required by applicable law or agreed to in writing,
+       software distributed under the License is distributed on an
+       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+       KIND, either express or implied.  See the License for the
+       specific language governing permissions and limitations
+       under the License.
+*/
+package org.apache.cordova.inappbrowser;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.Context;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Created by Oliver on 22/11/2013.
+ */
+public class InAppBrowserDialog extends Dialog {
+    Context context;
+    InAppBrowser inAppBrowser = null;
+
+    public InAppBrowserDialog(Context context, int theme) {
+        super(context, theme);
+        this.context = context;
+    }
+
+    public void setInAppBroswer(InAppBrowser browser) {
+        this.inAppBrowser = browser;
+    }
+
+    public void onBackPressed () {
+        if (this.inAppBrowser == null) {
+            this.dismiss();
+        } else {
+            // better to go through the in inAppBrowser
+            // because it does a clean up
+            if (this.inAppBrowser.hardwareBack() && this.inAppBrowser.canGoBack()) {
+                this.inAppBrowser.goBack();
+            }  else {
+                this.inAppBrowser.closeDialog();
+            }
+        }
+    }
+}
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserExitObj.java b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserExitObj.java
new file mode 100644
index 000000000..a23661b33
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserExitObj.java
@@ -0,0 +1,45 @@
+package org.apache.cordova.inappbrowser;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Field;
+
+public class InAppBrowserExitObj {
+    private String type = "exit";
+    private String url;
+    private String status;
+
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public JSONObject toJSON() {
+
+        Field[] fields =  getClass().getDeclaredFields();
+
+        JSONObject jo = new JSONObject();
+        for (Field field : fields) {
+            try {
+                jo.put(field.getName(), field.get(this));
+            } catch (IllegalAccessException | JSONException e) {
+                e.printStackTrace();
+                continue;
+            }
+        }
+        return jo;
+    }
+
+}
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/TokenInfo.java b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserTokenInfo.java
old mode 100755
new mode 100644
similarity index 85%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/TokenInfo.java
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserTokenInfo.java
index 8e4727504..df3973043
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/TokenInfo.java
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppBrowserTokenInfo.java
@@ -1,7 +1,6 @@
-package com.TSBCardApp.InAppWebViewPlugin;
-
-public class TokenInfo {
+package org.apache.cordova.inappbrowser;
 
+public class InAppBrowserTokenInfo {
     String tokenid;
     String expiredtime; //2019/09/17 00:00:00
     String channel;
@@ -48,8 +47,8 @@ public class TokenInfo {
         this.os = os;
     }
 
-    public static TokenInfo toTest() {
-        TokenInfo tokenInfo = new TokenInfo();
+    public static InAppBrowserTokenInfo toTest() {
+        InAppBrowserTokenInfo tokenInfo = new InAppBrowserTokenInfo();
         tokenInfo.setTokenid("c75daf18ad9b4e6ae151b4120d495433283874b58b1fdafb6f858107e753b91");
         tokenInfo.setExpiredtime("2019/09/17 00:00:00");
         tokenInfo.setChannel("a5b4f66a63a34a3faabf771387e4e039");
@@ -57,5 +56,4 @@ public class TokenInfo {
         tokenInfo.setOs("android");
         return tokenInfo;
     }
-
 }
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppChromeClient.java b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppChromeClient.java
new file mode 100644
index 000000000..d73b11d37
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/InAppChromeClient.java
@@ -0,0 +1,182 @@
+/*
+       Licensed to the Apache Software Foundation (ASF) under one
+       or more contributor license agreements.  See the NOTICE file
+       distributed with this work for additional information
+       regarding copyright ownership.  The ASF licenses this file
+       to you under the Apache License, Version 2.0 (the
+       "License"); you may not use this file except in compliance
+       with the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+       Unless required by applicable law or agreed to in writing,
+       software distributed under the License is distributed on an
+       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+       KIND, either express or implied.  See the License for the
+       specific language governing permissions and limitations
+       under the License.
+*/
+package org.apache.cordova.inappbrowser;
+
+import org.apache.cordova.CordovaWebView;
+import org.apache.cordova.LOG;
+import org.apache.cordova.PluginResult;
+import org.json.JSONArray;
+import org.json.JSONException;
+
+import android.annotation.TargetApi;
+import android.os.Build;
+import android.os.Message;
+import android.webkit.JsPromptResult;
+import android.webkit.WebChromeClient;
+import android.webkit.WebResourceRequest;
+import android.webkit.WebStorage;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.webkit.GeolocationPermissions.Callback;
+
+public class InAppChromeClient extends WebChromeClient {
+
+    private CordovaWebView webView;
+    private String LOG_TAG = "InAppChromeClient";
+    private long MAX_QUOTA = 100 * 1024 * 1024;
+
+    public InAppChromeClient(CordovaWebView webView) {
+        super();
+        this.webView = webView;
+    }
+    /**
+     * Handle database quota exceeded notification.
+     *
+     * @param url
+     * @param databaseIdentifier
+     * @param currentQuota
+     * @param estimatedSize
+     * @param totalUsedQuota
+     * @param quotaUpdater
+     */
+    @Override
+    public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize,
+            long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater)
+    {
+        LOG.d(LOG_TAG, "onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d", estimatedSize, currentQuota, totalUsedQuota);
+        quotaUpdater.updateQuota(MAX_QUOTA);
+    }
+
+    /**
+     * Instructs the client to show a prompt to ask the user to set the Geolocation permission state for the specified origin.
+     *
+     * @param origin
+     * @param callback
+     */
+    @Override
+    public void onGeolocationPermissionsShowPrompt(String origin, Callback callback) {
+        super.onGeolocationPermissionsShowPrompt(origin, callback);
+        callback.invoke(origin, true, false);
+    }
+
+    /**
+     * Tell the client to display a prompt dialog to the user.
+     * If the client returns true, WebView will assume that the client will
+     * handle the prompt dialog and call the appropriate JsPromptResult method.
+     *
+     * The prompt bridge provided for the InAppBrowser is capable of executing any
+     * oustanding callback belonging to the InAppBrowser plugin. Care has been
+     * taken that other callbacks cannot be triggered, and that no other code
+     * execution is possible.
+     *
+     * To trigger the bridge, the prompt default value should be of the form:
+     *
+     * gap-iab://<callbackId>
+     *
+     * where <callbackId> is the string id of the callback to trigger (something
+     * like "InAppBrowser0123456789")
+     *
+     * If present, the prompt message is expected to be a JSON-encoded value to
+     * pass to the callback. A JSON_EXCEPTION is returned if the JSON is invalid.
+     *
+     * @param view
+     * @param url
+     * @param message
+     * @param defaultValue
+     * @param result
+     */
+    @Override
+    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
+        // See if the prompt string uses the 'gap-iab' protocol. If so, the remainder should be the id of a callback to execute.
+        if (defaultValue != null && defaultValue.startsWith("gap")) {
+            if(defaultValue.startsWith("gap-iab://")) {
+                PluginResult scriptResult;
+                String scriptCallbackId = defaultValue.substring(10);
+                if (scriptCallbackId.matches("^InAppBrowser[0-9]{1,10}$")) {
+                    if(message == null || message.length() == 0) {
+                        scriptResult = new PluginResult(PluginResult.Status.OK, new JSONArray());
+                    } else {
+                        try {
+                            scriptResult = new PluginResult(PluginResult.Status.OK, new JSONArray(message));
+                        } catch(JSONException e) {
+                            scriptResult = new PluginResult(PluginResult.Status.JSON_EXCEPTION, e.getMessage());
+                        }
+                    }
+                    this.webView.sendPluginResult(scriptResult, scriptCallbackId);
+                    result.confirm("");
+                    return true;
+                }
+                else {
+                    // Anything else that doesn't look like InAppBrowser0123456789 should end up here
+                    LOG.w(LOG_TAG, "InAppBrowser callback called with invalid callbackId : "+ scriptCallbackId);
+                    result.cancel();
+                    return true;
+                }
+            }
+            else {
+                // Anything else with a gap: prefix should get this message
+                LOG.w(LOG_TAG, "InAppBrowser does not support Cordova API calls: " + url + " " + defaultValue); 
+                result.cancel();
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * The InAppWebBrowser WebView is configured to MultipleWindow mode to mitigate a security
+     * bug found in Chromium prior to version 83.0.4103.106.
+     * See https://bugs.chromium.org/p/chromium/issues/detail?id=1083819
+     *
+     * Valid Urls set to open in new window will be routed back to load in the original WebView.
+     *
+     * @param view
+     * @param isDialog
+     * @param isUserGesture
+     * @param resultMsg
+     * @return
+     */
+    @Override
+    public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg) {
+        WebView inAppWebView = view;
+        final WebViewClient webViewClient =
+                new WebViewClient() {
+                    @Override
+                    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
+                        inAppWebView.loadUrl(request.getUrl().toString());
+                        return true;
+                    }
+
+                    @Override
+                    public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                        inAppWebView.loadUrl(url);
+                        return true;
+                    }
+                };
+
+        final WebView newWebView = new WebView(view.getContext());
+        newWebView.setWebViewClient(webViewClient);
+
+        final WebView.WebViewTransport transport = (WebView.WebViewTransport) resultMsg.obj;
+        transport.setWebView(newWebView);
+        resultMsg.sendToTarget();
+
+        return true;
+    }
+}
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_arrow_left_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_arrow_left_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_arrow_left_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_arrow_left_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_arrow_right_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_arrow_right_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_arrow_right_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_arrow_right_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_close_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_close_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_close_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_close_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_share_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_share_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-hdpi/icon_share_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-hdpi/icon_share_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_arrow_left_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_arrow_left_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_arrow_left_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_arrow_left_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_arrow_right_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_arrow_right_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_arrow_right_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_arrow_right_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_close_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_close_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_close_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_close_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_share_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_share_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-mdpi/icon_share_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-mdpi/icon_share_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_arrow_left_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_arrow_left_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_arrow_left_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_arrow_left_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_arrow_right_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_arrow_right_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_arrow_right_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_arrow_right_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_close_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_close_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_close_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_close_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_share_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_share_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xhdpi/icon_share_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xhdpi/icon_share_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_arrow_left_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_arrow_left_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_arrow_left_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_arrow_left_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_arrow_right_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_arrow_right_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_arrow_right_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_arrow_right_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_close_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_close_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_close_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_close_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_share_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_share_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxhdpi/icon_share_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxhdpi/icon_share_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_arrow_left_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_arrow_left_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_arrow_left_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_arrow_left_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_arrow_right_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_arrow_right_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_arrow_right_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_arrow_right_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_close_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_close_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_close_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_close_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_share_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_share_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/drawable-xxxhdpi/icon_share_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/drawable-xxxhdpi/icon_share_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/layout/activity_in_app_webview.xml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/layout/activity_in_app_webview.xml
similarity index 94%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/layout/activity_in_app_webview.xml
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/layout/activity_in_app_webview.xml
index 0d1ef12fe..6acafc1fb 100755
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/layout/activity_in_app_webview.xml
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/layout/activity_in_app_webview.xml
@@ -6,15 +6,6 @@
     android:layout_height="match_parent"
     android:theme="@style/AppTheme.NoActionBar">
 
-    <WebView
-        android:id="@+id/webView"
-        android:layout_width="0dp"
-        android:layout_height="0dp"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/toolbar" />
-
     <androidx.appcompat.widget.Toolbar
         android:id="@+id/toolbar"
         android:layout_width="match_parent"
@@ -111,4 +102,15 @@
 
     </androidx.appcompat.widget.Toolbar>
 
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/webviewcontainer"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/toolbar">
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/values/webview_color.xml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/values/webview_color.xml
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/values/webview_color.xml
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/values/webview_color.xml
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/android/values/webview_styles.xml b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/values/webview_styles.xml
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/android/values/webview_styles.xml
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/android/values/webview_styles.xml
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserNavigationController.h b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserNavigationController.h
new file mode 100644
index 000000000..bd186a2f2
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserNavigationController.h
@@ -0,0 +1,27 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import <Cordova/CDVScreenOrientationDelegate.h>
+
+
+@interface CDVInAppBrowserNavigationController : UINavigationController
+
+@property (nonatomic, weak) id <CDVScreenOrientationDelegate> orientationDelegate;
+
+@end
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserNavigationController.m b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserNavigationController.m
new file mode 100644
index 000000000..3cc9043fa
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserNavigationController.m
@@ -0,0 +1,63 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import "CDVInAppBrowserNavigationController.h"
+
+@implementation CDVInAppBrowserNavigationController : UINavigationController
+
+- (void) dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion {
+    if ( self.presentedViewController) {
+        [super dismissViewControllerAnimated:flag completion:completion];
+    }
+}
+
+- (void) viewDidLoad {
+    [super viewDidLoad];
+}
+
+- (CGRect) invertFrameIfNeeded:(CGRect)rect {
+    if (UIInterfaceOrientationIsLandscape([[UIApplication sharedApplication] statusBarOrientation])) {
+        CGFloat temp = rect.size.width;
+        rect.size.width = rect.size.height;
+        rect.size.height = temp;
+    }
+    rect.origin = CGPointZero;
+    return rect;
+}
+
+#pragma mark CDVScreenOrientationDelegate
+
+- (BOOL)shouldAutorotate
+{
+    if ((self.orientationDelegate != nil) && [self.orientationDelegate respondsToSelector:@selector(shouldAutorotate)]) {
+        return [self.orientationDelegate shouldAutorotate];
+    }
+    return YES;
+}
+
+- (UIInterfaceOrientationMask)supportedInterfaceOrientations
+{
+    if ((self.orientationDelegate != nil) && [self.orientationDelegate respondsToSelector:@selector(supportedInterfaceOrientations)]) {
+        return [self.orientationDelegate supportedInterfaceOrientations];
+    }
+
+    return 1 << UIInterfaceOrientationPortrait;
+}
+
+@end
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserOptions.h b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserOptions.h
new file mode 100644
index 000000000..6694ca006
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserOptions.h
@@ -0,0 +1,49 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+
+@interface CDVInAppBrowserOptions : NSObject {}
+
+@property (nonatomic, assign) BOOL hidenavigationbuttons;
+@property (nonatomic, assign) BOOL cleardata;
+@property (nonatomic, assign) BOOL clearcache;
+@property (nonatomic, assign) BOOL clearsessioncache;
+
+@property (nonatomic, copy) NSString* presentationstyle;
+@property (nonatomic, copy) NSString* transitionstyle;
+
+@property (nonatomic, assign) BOOL enableviewportscale;
+@property (nonatomic, assign) BOOL mediaplaybackrequiresuseraction;
+@property (nonatomic, assign) BOOL allowinlinemediaplayback;
+@property (nonatomic, assign) BOOL hidden;
+@property (nonatomic, assign) BOOL disallowoverscroll;
+@property (nonatomic, copy) NSString* beforeload;
+
+@property (nonatomic, copy) NSString* webtitle;
+@property (nonatomic, assign) BOOL hidesharebtn;
+
+@property (nonatomic, copy) NSString* tokenid;
+@property (nonatomic, copy) NSString* channel;
+@property (nonatomic, copy) NSString* appver;
+@property (nonatomic, copy) NSString* action;
+@property (nonatomic, copy) NSString* tokeninfo;
+
++ (CDVInAppBrowserOptions*)parseOptions:(NSString*)options;
+
+@end
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserOptions.m b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserOptions.m
new file mode 100644
index 000000000..03c5d26ea
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVInAppBrowserOptions.m
@@ -0,0 +1,90 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import "CDVInAppBrowserOptions.h"
+
+@implementation CDVInAppBrowserOptions
+
+- (id)init
+{
+    if (self = [super init]) {
+        // default values
+        self.cleardata = NO;
+        self.clearcache = NO;
+        self.clearsessioncache = NO;
+
+        self.enableviewportscale = NO;
+        self.mediaplaybackrequiresuseraction = NO;
+        self.allowinlinemediaplayback = NO;
+        self.hidden = NO;
+        self.disallowoverscroll = NO;
+        self.hidenavigationbuttons = NO;
+        self.beforeload = @"";
+        self.webtitle = @"";
+        self.hidesharebtn = NO;
+    }
+
+    return self;
+}
+
++ (CDVInAppBrowserOptions*)parseOptions:(NSString*)options
+{
+    CDVInAppBrowserOptions* obj = [[CDVInAppBrowserOptions alloc] init];
+
+    // NOTE: this parsing does not handle quotes within values
+    NSArray* pairs = [options componentsSeparatedByString:@","];
+
+    // parse keys and values, set the properties
+    for (NSString* pair in pairs) {
+        NSArray* keyvalue = [pair componentsSeparatedByString:@"="];
+
+        if ([keyvalue count] == 2) {
+            NSString* key = [[keyvalue objectAtIndex:0] lowercaseString];
+            NSString* value = [keyvalue objectAtIndex:1];
+            NSString* value_lc = [value lowercaseString];
+
+            BOOL isBoolean = [value_lc isEqualToString:@"yes"] || [value_lc isEqualToString:@"no"];
+            NSNumberFormatter* numberFormatter = [[NSNumberFormatter alloc] init];
+            [numberFormatter setAllowsFloats:YES];
+            BOOL isNumber = [numberFormatter numberFromString:value_lc] != nil;
+
+            // set the property according to the key name
+            if ([obj respondsToSelector:NSSelectorFromString(key)]) {
+                if (isNumber) {
+                    [obj setValue:[numberFormatter numberFromString:value_lc] forKey:key];
+                } else if (isBoolean) {
+                    [obj setValue:[NSNumber numberWithBool:[value_lc isEqualToString:@"yes"]] forKey:key];
+                } else {
+                    [obj setValue:value forKey:key];
+                }
+            }
+        // tokenid
+        // 有些參數有＝號
+        } else if ([keyvalue count] >= 3) {
+            NSRange rangeOfSpace = [pair rangeOfString:@"="];
+            NSString* key = [[keyvalue objectAtIndex:0] lowercaseString];
+            NSString* value = [pair substringToIndex: rangeOfSpace.location];
+            [obj setValue:value forKey:key];
+        }
+    }
+
+    return obj;
+}
+
+@end
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.h b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.h
new file mode 100644
index 000000000..deabc1071
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.h
@@ -0,0 +1,91 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import <Cordova/CDVPlugin.h>
+#import <Cordova/CDVInvokedUrlCommand.h>
+#import <Cordova/CDVScreenOrientationDelegate.h>
+#import "CDVWKInAppBrowserUIDelegate.h"
+#import "CDVInAppBrowserOptions.h"
+#import "CDVInAppBrowserNavigationController.h"
+
+@class CDVWKInAppBrowserViewController;
+
+static NSString *RESULT_ACTION = @"resultAction";
+static NSString *RESULT_ACTION_DETECTED_URL = @"detectedUrl";
+static NSString *RESULT_ACTION_NEED_LOGIN = @"needLogin";
+static NSString *RESULT_ACTION_DEEP_LINK = @"deepLink";
+static NSString *RESULT_ACTION_EXIT = @"exit";
+static NSString *RESULT_DATA = @"resultData";
+
+@interface CDVWKInAppBrowser : CDVPlugin {
+    UIWindow * tmpWindow;
+
+    @private
+    NSString* _beforeload;
+    BOOL _waitForBeforeload;
+}
+
+@property (nonatomic, retain) CDVWKInAppBrowser* instance;
+@property (nonatomic, retain) CDVWKInAppBrowserViewController* inAppBrowserViewController;
+@property (nonatomic, copy) NSString* callbackId;
+@property (nonatomic, copy) NSRegularExpression *callbackIdPattern;
+@property (nonatomic) NSDictionary* exitReturn;
+
++ (id) getInstance;
+- (void)open:(CDVInvokedUrlCommand*)command;
+- (void)close:(CDVInvokedUrlCommand*)command;
+- (void)injectScriptCode:(CDVInvokedUrlCommand*)command;
+- (void)show:(CDVInvokedUrlCommand*)command;
+- (void)hide:(CDVInvokedUrlCommand*)command;
+- (void)loadAfterBeforeload:(CDVInvokedUrlCommand*)command;
+- (NSDictionary*) makeExitReturn: (NSString*) status url: (NSString*) url;
+
+@end
+
+@interface CDVWKInAppBrowserViewController : UIViewController <CDVScreenOrientationDelegate,WKNavigationDelegate,WKUIDelegate,WKScriptMessageHandler,UIAdaptivePresentationControllerDelegate>{
+    @private
+    CDVInAppBrowserOptions *_browserOptions;
+    NSDictionary *_settings;
+}
+
+@property (nonatomic, strong) IBOutlet WKWebView* webView;
+@property (nonatomic, strong) IBOutlet WKWebViewConfiguration* configuration;
+@property (nonatomic, strong) IBOutlet UIButton* closeButton;
+@property (nonatomic, strong) IBOutlet UIImageView *closeImageView;
+@property (nonatomic, strong) IBOutlet UIButton* backButton;
+@property (nonatomic, strong) IBOutlet UIImageView *backImageView;
+@property (nonatomic, strong) IBOutlet UIButton* forwardButton;
+@property (nonatomic, strong) IBOutlet UIImageView *forwardImageView;
+@property (nonatomic, strong) IBOutlet UIButton* shareButton;
+@property (nonatomic, strong) IBOutlet UIImageView *shareImageView;
+@property (nonatomic, strong) IBOutlet UILabel* titleLabel;
+
+@property (nonatomic, strong) IBOutlet UIView* webviewContainerView;
+
+@property (nonatomic, strong) IBOutlet CDVWKInAppBrowserUIDelegate* webViewUIDelegate;
+
+@property (nonatomic, weak) id <CDVScreenOrientationDelegate> orientationDelegate;
+@property (nonatomic, weak) CDVWKInAppBrowser* navigationDelegate;
+@property (nonatomic) NSURL* currentURL;
+
+- (void)close;
+- (void)navigateTo:(NSURL*)url;
+- (id)initWithBrowserOptions: (CDVInAppBrowserOptions*) browserOptions andSettings:(NSDictionary*) settings;
+
+@end
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.m b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.m
new file mode 100644
index 000000000..d461bedaf
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.m
@@ -0,0 +1,1258 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+ 
+ http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import "CDVWKInAppBrowser.h"
+
+#if __has_include(<Cordova/CDVWebViewProcessPoolFactory.h>) // Cordova-iOS >=6
+  #import <Cordova/CDVWebViewProcessPoolFactory.h>
+#elif __has_include("CDVWKProcessPoolFactory.h") // Cordova-iOS <6 with WKWebView plugin
+  #import "CDVWKProcessPoolFactory.h"
+#endif
+
+#import <Cordova/CDVPluginResult.h>
+#import <CommonCrypto/CommonCryptor.h>
+#import <CommonCrypto/CommonDigest.h>
+#import "CDVWKUIAlertController.h"
+
+#define    kInAppBrowserTargetSelf @"_self"
+#define    kInAppBrowserTargetSystem @"_system"
+#define    kInAppBrowserTargetBlank @"_blank"
+
+#define    kInAppBrowserToolbarBarPositionBottom @"bottom"
+#define    kInAppBrowserToolbarBarPositionTop @"top"
+
+#define    IAB_BRIDGE_NAME @"cordova_iab"
+
+#define    TOOLBAR_HEIGHT 52.0
+#define    LOCATIONBAR_HEIGHT 0.0
+#define    FOOTER_HEIGHT ((TOOLBAR_HEIGHT) + (LOCATIONBAR_HEIGHT))
+
+#pragma mark CDVWKInAppBrowser
+
+@interface CDVWKInAppBrowser () {
+    NSInteger _previousStatusBarStyle;
+}
+@end
+
+@implementation CDVWKInAppBrowser
+
+static CDVWKInAppBrowser* instance = nil;
+
++ (id) getInstance{
+    return instance;
+}
+
+- (void)pluginInitialize
+{
+    instance = self;
+    _previousStatusBarStyle = -1;
+    _callbackIdPattern = nil;
+    _beforeload = @"";
+    _waitForBeforeload = NO;
+}
+
+- (void)onReset
+{
+    [self close:nil];
+}
+
+- (void)close:(CDVInvokedUrlCommand*)command
+{
+    if (self.inAppBrowserViewController == nil) {
+        NSLog(@"IAB.close() called but it was already closed.");
+        return;
+    }
+    
+    // Things are cleaned up in browserExit.
+    [self.inAppBrowserViewController close];
+}
+
+- (BOOL) isSystemUrl:(NSURL*)url
+{
+    if ([[url host] isEqualToString:@"itunes.apple.com"]) {
+        return YES;
+    }
+    
+    return NO;
+}
+- (void)open:(CDVInvokedUrlCommand*)command
+{
+    CDVPluginResult* pluginResult;
+    
+    NSString* url = [command argumentAtIndex:0];
+    NSString* target = [command argumentAtIndex:1 withDefault:kInAppBrowserTargetSelf];
+    NSString* options = [command argumentAtIndex:2 withDefault:@"" andClass:[NSString class]];
+    
+    self.callbackId = command.callbackId;
+    
+    if (url != nil) {
+        NSURL* baseUrl = [self.webViewEngine URL];
+        NSURL* absoluteUrl = [[NSURL URLWithString:url relativeToURL:baseUrl] absoluteURL];
+        
+        if ([self isSystemUrl:absoluteUrl]) {
+            target = kInAppBrowserTargetSystem;
+        }
+        
+        if ([target isEqualToString:kInAppBrowserTargetSelf]) {
+            [self openInCordovaWebView:absoluteUrl withOptions:options];
+        } else if ([target isEqualToString:kInAppBrowserTargetSystem]) {
+            [self openInSystem:absoluteUrl];
+        } else { // _blank or anything else
+            [self openInInAppBrowser:absoluteUrl withOptions:options];
+        }
+        
+        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];
+    } else {
+        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@"incorrect number of arguments"];
+    }
+    
+    [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
+}
+
+- (void)openInInAppBrowser:(NSURL*)url withOptions:(NSString*)options
+{
+    CDVInAppBrowserOptions* browserOptions = [CDVInAppBrowserOptions parseOptions:options];
+    
+    WKWebsiteDataStore* dataStore = [WKWebsiteDataStore defaultDataStore];
+    if (browserOptions.cleardata) {
+        
+        NSDate* dateFrom = [NSDate dateWithTimeIntervalSince1970:0];
+        [dataStore removeDataOfTypes:[WKWebsiteDataStore allWebsiteDataTypes] modifiedSince:dateFrom completionHandler:^{
+            NSLog(@"Removed all WKWebView data");
+            self.inAppBrowserViewController.webView.configuration.processPool = [[WKProcessPool alloc] init]; // create new process pool to flush all data
+        }];
+    }
+    
+    if (browserOptions.clearcache) {
+        bool isAtLeastiOS11 = false;
+#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000
+        if (@available(iOS 11.0, *)) {
+            isAtLeastiOS11 = true;
+        }
+#endif
+            
+        if(isAtLeastiOS11){
+#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000
+            // Deletes all cookies
+            WKHTTPCookieStore* cookieStore = dataStore.httpCookieStore;
+            [cookieStore getAllCookies:^(NSArray* cookies) {
+                NSHTTPCookie* cookie;
+                for(cookie in cookies){
+                    [cookieStore deleteCookie:cookie completionHandler:nil];
+                }
+            }];
+#endif
+        }else{
+            // https://stackoverflow.com/a/31803708/777265
+            // Only deletes domain cookies (not session cookies)
+            [dataStore fetchDataRecordsOfTypes:[WKWebsiteDataStore allWebsiteDataTypes]
+             completionHandler:^(NSArray<WKWebsiteDataRecord *> * __nonnull records) {
+                 for (WKWebsiteDataRecord *record  in records){
+                     NSSet<NSString*>* dataTypes = record.dataTypes;
+                     if([dataTypes containsObject:WKWebsiteDataTypeCookies]){
+                         [[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:record.dataTypes
+                               forDataRecords:@[record]
+                               completionHandler:^{}];
+                     }
+                 }
+             }];
+        }
+    }
+    
+    if (browserOptions.clearsessioncache) {
+        bool isAtLeastiOS11 = false;
+#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000
+        if (@available(iOS 11.0, *)) {
+            isAtLeastiOS11 = true;
+        }
+#endif
+        if (isAtLeastiOS11) {
+#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000
+            // Deletes session cookies
+            WKHTTPCookieStore* cookieStore = dataStore.httpCookieStore;
+            [cookieStore getAllCookies:^(NSArray* cookies) {
+                NSHTTPCookie* cookie;
+                for(cookie in cookies){
+                    if(cookie.sessionOnly){
+                        [cookieStore deleteCookie:cookie completionHandler:nil];
+                    }
+                }
+            }];
+#endif
+        }else{
+            NSLog(@"clearsessioncache not available below iOS 11.0");
+        }
+    }
+
+    if (self.inAppBrowserViewController == nil) {
+        self.inAppBrowserViewController = [[CDVWKInAppBrowserViewController alloc] initWithBrowserOptions: browserOptions andSettings:self.commandDelegate.settings];
+        self.inAppBrowserViewController.navigationDelegate = self;
+        self.inAppBrowserViewController.currentURL = url;
+        if ([self.viewController conformsToProtocol:@protocol(CDVScreenOrientationDelegate)]) {
+            self.inAppBrowserViewController.orientationDelegate = (UIViewController <CDVScreenOrientationDelegate>*)self.viewController;
+        }
+    }
+
+    // Set Presentation Style
+    UIModalPresentationStyle presentationStyle = UIModalPresentationFullScreen; // default
+    if (browserOptions.presentationstyle != nil) {
+        if ([[browserOptions.presentationstyle lowercaseString] isEqualToString:@"pagesheet"]) {
+            presentationStyle = UIModalPresentationPageSheet;
+        } else if ([[browserOptions.presentationstyle lowercaseString] isEqualToString:@"formsheet"]) {
+            presentationStyle = UIModalPresentationFormSheet;
+        }
+    }
+    self.inAppBrowserViewController.modalPresentationStyle = presentationStyle;
+    
+    // Set Transition Style
+    UIModalTransitionStyle transitionStyle = UIModalTransitionStyleCoverVertical; // default
+    if (browserOptions.transitionstyle != nil) {
+        if ([[browserOptions.transitionstyle lowercaseString] isEqualToString:@"fliphorizontal"]) {
+            transitionStyle = UIModalTransitionStyleFlipHorizontal;
+        } else if ([[browserOptions.transitionstyle lowercaseString] isEqualToString:@"crossdissolve"]) {
+            transitionStyle = UIModalTransitionStyleCrossDissolve;
+        }
+    }
+    self.inAppBrowserViewController.modalTransitionStyle = transitionStyle;
+    
+    //prevent webView from bouncing
+    if (browserOptions.disallowoverscroll) {
+        if ([self.inAppBrowserViewController.webView respondsToSelector:@selector(scrollView)]) {
+            ((UIScrollView*)[self.inAppBrowserViewController.webView scrollView]).bounces = NO;
+        } else {
+            for (id subview in self.inAppBrowserViewController.webView.subviews) {
+                if ([[subview class] isSubclassOfClass:[UIScrollView class]]) {
+                    ((UIScrollView*)subview).bounces = NO;
+                }
+            }
+        }
+    }
+    
+    // use of beforeload event
+    if([browserOptions.beforeload isKindOfClass:[NSString class]]){
+        _beforeload = browserOptions.beforeload;
+    }else{
+        _beforeload = @"yes";
+    }
+    _waitForBeforeload = ![_beforeload isEqualToString:@""];
+    
+    //[self.inAppBrowserViewController navigateTo:url];
+    if (!browserOptions.hidden) {
+        [self show:nil withNoAnimate:browserOptions.hidden];
+    }
+}
+
+- (void)show:(CDVInvokedUrlCommand*)command{
+    [self show:command withNoAnimate:NO];
+}
+
+- (void)show:(CDVInvokedUrlCommand*)command withNoAnimate:(BOOL)noAnimate
+{
+    BOOL initHidden = NO;
+    if(command == nil && noAnimate == YES){
+        initHidden = YES;
+    }
+    
+    if (self.inAppBrowserViewController == nil) {
+        NSLog(@"Tried to show IAB after it was closed.");
+        return;
+    }
+    if (_previousStatusBarStyle != -1) {
+        NSLog(@"Tried to show IAB while already shown");
+        return;
+    }
+    
+    if(!initHidden){
+        _previousStatusBarStyle = [UIApplication sharedApplication].statusBarStyle;
+    }
+    
+    __block CDVInAppBrowserNavigationController* nav = [[CDVInAppBrowserNavigationController alloc]
+                                                        initWithRootViewController:self.inAppBrowserViewController];
+    nav.orientationDelegate = self.inAppBrowserViewController;
+    nav.navigationBarHidden = YES;
+    nav.modalPresentationStyle = self.inAppBrowserViewController.modalPresentationStyle;
+    nav.presentationController.delegate = self.inAppBrowserViewController;
+    
+    __weak CDVWKInAppBrowser* weakSelf = self;
+    
+    // Run later to avoid the "took a long time" log message.
+    dispatch_async(dispatch_get_main_queue(), ^{
+        if (weakSelf.inAppBrowserViewController != nil) {
+            float osVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
+            __strong __typeof(weakSelf) strongSelf = weakSelf;
+            if (!strongSelf->tmpWindow) {
+                CGRect frame = [[UIScreen mainScreen] bounds];
+                if(initHidden && osVersion < 11){
+                   frame.origin.x = -10000;
+                }
+                strongSelf->tmpWindow = [[UIWindow alloc] initWithFrame:frame];
+            }
+            UIViewController *tmpController = [[UIViewController alloc] init];
+            [strongSelf->tmpWindow setRootViewController:tmpController];
+            [strongSelf->tmpWindow setWindowLevel:UIWindowLevelNormal];
+
+            if(!initHidden || osVersion < 11){
+                [self->tmpWindow makeKeyAndVisible];
+            }
+            [tmpController presentViewController:nav animated:!noAnimate completion:nil];
+        }
+    });
+}
+
+- (void)hide:(CDVInvokedUrlCommand*)command
+{
+    // Set tmpWindow to hidden to make main webview responsive to touch again
+    // https://stackoverflow.com/questions/4544489/how-to-remove-a-uiwindow
+    self->tmpWindow.hidden = YES;
+    self->tmpWindow = nil;
+
+    if (self.inAppBrowserViewController == nil) {
+        NSLog(@"Tried to hide IAB after it was closed.");
+        return;
+        
+        
+    }
+    if (_previousStatusBarStyle == -1) {
+        NSLog(@"Tried to hide IAB while already hidden");
+        return;
+    }
+    
+    _previousStatusBarStyle = [UIApplication sharedApplication].statusBarStyle;
+    
+    // Run later to avoid the "took a long time" log message.
+    dispatch_async(dispatch_get_main_queue(), ^{
+        if (self.inAppBrowserViewController != nil) {
+            _previousStatusBarStyle = -1;
+            [self.inAppBrowserViewController.presentingViewController dismissViewControllerAnimated:YES completion:nil];
+        }
+    });
+}
+
+- (void)openInCordovaWebView:(NSURL*)url withOptions:(NSString*)options
+{
+    NSURLRequest* request = [NSURLRequest requestWithURL:url];
+    // the webview engine itself will filter for this according to <allow-navigation> policy
+    // in config.xml for cordova-ios-4.0
+    [self.webViewEngine loadRequest:request];
+}
+
+- (void)openInSystem:(NSURL*)url
+{
+    if ([[UIApplication sharedApplication] openURL:url] == NO) {
+        [[NSNotificationCenter defaultCenter] postNotification:[NSNotification notificationWithName:CDVPluginHandleOpenURLNotification object:url]];
+        [[UIApplication sharedApplication] openURL:url];
+    }
+}
+
+- (void)loadAfterBeforeload:(CDVInvokedUrlCommand*)command
+{
+    NSString* urlStr = [command argumentAtIndex:0];
+
+    if ([_beforeload isEqualToString:@""]) {
+        NSLog(@"unexpected loadAfterBeforeload called without feature beforeload=get|post");
+    }
+    if (self.inAppBrowserViewController == nil) {
+        NSLog(@"Tried to invoke loadAfterBeforeload on IAB after it was closed.");
+        return;
+    }
+    if (urlStr == nil) {
+        NSLog(@"loadAfterBeforeload called with nil argument, ignoring.");
+        return;
+    }
+
+    NSURL* url = [NSURL URLWithString:urlStr];
+    //_beforeload = @"";
+    _waitForBeforeload = NO;
+    [self.inAppBrowserViewController navigateTo:url];
+}
+
+// This is a helper method for the inject{Script|Style}{Code|File} API calls, which
+// provides a consistent method for injecting JavaScript code into the document.
+//
+// If a wrapper string is supplied, then the source string will be JSON-encoded (adding
+// quotes) and wrapped using string formatting. (The wrapper string should have a single
+// '%@' marker).
+//
+// If no wrapper is supplied, then the source string is executed directly.
+
+- (void)injectDeferredObject:(NSString*)source withWrapper:(NSString*)jsWrapper
+{
+    // Ensure a message handler bridge is created to communicate with the CDVWKInAppBrowserViewController
+    [self evaluateJavaScript: [NSString stringWithFormat:@"(function(w){if(!w._cdvMessageHandler) {w._cdvMessageHandler = function(id,d){w.webkit.messageHandlers.%@.postMessage({d:d, id:id});}}})(window)", IAB_BRIDGE_NAME]];
+    
+    if (jsWrapper != nil) {
+        NSData* jsonData = [NSJSONSerialization dataWithJSONObject:@[source] options:0 error:nil];
+        NSString* sourceArrayString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
+        if (sourceArrayString) {
+            NSString* sourceString = [sourceArrayString substringWithRange:NSMakeRange(1, [sourceArrayString length] - 2)];
+            NSString* jsToInject = [NSString stringWithFormat:jsWrapper, sourceString];
+            [self evaluateJavaScript:jsToInject];
+        }
+    } else {
+        [self evaluateJavaScript:source];
+    }
+}
+
+
+//Synchronus helper for javascript evaluation
+- (void)evaluateJavaScript:(NSString *)script {
+    __block NSString* _script = script;
+    [self.inAppBrowserViewController.webView evaluateJavaScript:script completionHandler:^(id result, NSError *error) {
+        if (error == nil) {
+            if (result != nil) {
+                NSLog(@"%@", result);
+            }
+        } else {
+            NSLog(@"evaluateJavaScript error : %@ : %@", error.localizedDescription, _script);
+        }
+    }];
+}
+
+- (void)injectScriptCode:(CDVInvokedUrlCommand*)command
+{
+    NSString* jsWrapper = nil;
+    
+    if ((command.callbackId != nil) && ![command.callbackId isEqualToString:@"INVALID"]) {
+        jsWrapper = [NSString stringWithFormat:@"_cdvMessageHandler('%@',JSON.stringify([eval(%%@)]));", command.callbackId];
+    }
+    [self injectDeferredObject:[command argumentAtIndex:0] withWrapper:jsWrapper];
+}
+
+- (void)injectScriptFile:(CDVInvokedUrlCommand*)command
+{
+    NSString* jsWrapper;
+    
+    if ((command.callbackId != nil) && ![command.callbackId isEqualToString:@"INVALID"]) {
+        jsWrapper = [NSString stringWithFormat:@"(function(d) { var c = d.createElement('script'); c.src = %%@; c.onload = function() { _cdvMessageHandler('%@'); }; d.body.appendChild(c); })(document)", command.callbackId];
+    } else {
+        jsWrapper = @"(function(d) { var c = d.createElement('script'); c.src = %@; d.body.appendChild(c); })(document)";
+    }
+    [self injectDeferredObject:[command argumentAtIndex:0] withWrapper:jsWrapper];
+}
+
+- (void)injectStyleCode:(CDVInvokedUrlCommand*)command
+{
+    NSString* jsWrapper;
+    
+    if ((command.callbackId != nil) && ![command.callbackId isEqualToString:@"INVALID"]) {
+        jsWrapper = [NSString stringWithFormat:@"(function(d) { var c = d.createElement('style'); c.innerHTML = %%@; c.onload = function() { _cdvMessageHandler('%@'); }; d.body.appendChild(c); })(document)", command.callbackId];
+    } else {
+        jsWrapper = @"(function(d) { var c = d.createElement('style'); c.innerHTML = %@; d.body.appendChild(c); })(document)";
+    }
+    [self injectDeferredObject:[command argumentAtIndex:0] withWrapper:jsWrapper];
+}
+
+- (void)injectStyleFile:(CDVInvokedUrlCommand*)command
+{
+    NSString* jsWrapper;
+    
+    if ((command.callbackId != nil) && ![command.callbackId isEqualToString:@"INVALID"]) {
+        jsWrapper = [NSString stringWithFormat:@"(function(d) { var c = d.createElement('link'); c.rel='stylesheet'; c.type='text/css'; c.href = %%@; c.onload = function() { _cdvMessageHandler('%@'); }; d.body.appendChild(c); })(document)", command.callbackId];
+    } else {
+        jsWrapper = @"(function(d) { var c = d.createElement('link'); c.rel='stylesheet', c.type='text/css'; c.href = %@; d.body.appendChild(c); })(document)";
+    }
+    [self injectDeferredObject:[command argumentAtIndex:0] withWrapper:jsWrapper];
+}
+
+- (BOOL)isValidCallbackId:(NSString *)callbackId
+{
+    NSError *err = nil;
+    // Initialize on first use
+    if (self.callbackIdPattern == nil) {
+        self.callbackIdPattern = [NSRegularExpression regularExpressionWithPattern:@"^InAppBrowser[0-9]{1,10}$" options:0 error:&err];
+        if (err != nil) {
+            // Couldn't initialize Regex; No is safer than Yes.
+            return NO;
+        }
+    }
+    if ([self.callbackIdPattern firstMatchInString:callbackId options:0 range:NSMakeRange(0, [callbackId length])]) {
+        return YES;
+    }
+    return NO;
+}
+
+/**
+ * The message handler bridge provided for the InAppBrowser is capable of executing any oustanding callback belonging
+ * to the InAppBrowser plugin. Care has been taken that other callbacks cannot be triggered, and that no
+ * other code execution is possible.
+ */
+- (void)webView:(WKWebView *)theWebView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler {
+    
+    NSURL* url = navigationAction.request.URL;
+    NSURL* mainDocumentURL = navigationAction.request.mainDocumentURL;
+    BOOL isTopLevelNavigation = [url isEqual:mainDocumentURL];
+    BOOL shouldStart = YES;
+    BOOL useBeforeLoad = NO;
+    NSString* httpMethod = navigationAction.request.HTTPMethod;
+    NSString* errorMessage = nil;
+    
+    if([_beforeload isEqualToString:@"post"]){
+        //TODO handle POST requests by preserving POST data then remove this condition
+        errorMessage = @"beforeload doesn't yet support POST requests";
+    }
+    else if(isTopLevelNavigation && (
+           [_beforeload isEqualToString:@"yes"]
+       || ([_beforeload isEqualToString:@"get"] && [httpMethod isEqualToString:@"GET"])
+    // TODO comment in when POST requests are handled
+    // || ([_beforeload isEqualToString:@"post"] && [httpMethod isEqualToString:@"POST"])
+    )){
+        useBeforeLoad = YES;
+    }
+
+    // When beforeload, on first URL change, initiate JS callback. Only after the beforeload event, continue.
+    if (_waitForBeforeload && useBeforeLoad) {
+        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
+                                                      messageAsDictionary:@{@"type":@"beforeload", @"url":[url absoluteString]}];
+        [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+        
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+        decisionHandler(WKNavigationActionPolicyCancel);
+        return;
+    }
+    
+    if(errorMessage != nil){
+        NSLog(errorMessage);
+        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR
+                                                      messageAsDictionary:@{@"type":@"loaderror", @"url":[url absoluteString], @"code": @"-1", @"message": errorMessage}];
+        [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+    }
+    
+    //if is an app store link, let the system handle it, otherwise it fails to load it
+    if ([[ url scheme] isEqualToString:@"itms-appss"] || [[ url scheme] isEqualToString:@"itms-apps"]) {
+        [theWebView stopLoading];
+        [self openInSystem:url];
+        shouldStart = NO;
+    }
+    else if ((self.callbackId != nil) && isTopLevelNavigation) {
+        // Send a loadstart event for each top-level navigation (includes redirects).
+        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
+                                                      messageAsDictionary:@{@"type":@"loadstart", @"url":[url absoluteString]}];
+        [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+        
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+    }
+
+    if (useBeforeLoad) {
+        _waitForBeforeload = YES;
+    }
+    
+    if(shouldStart){
+        // Fix GH-417 & GH-424: Handle non-default target attribute
+        // Based on https://stackoverflow.com/a/25713070/777265
+        if (!navigationAction.targetFrame){
+            [theWebView loadRequest:navigationAction.request];
+            decisionHandler(WKNavigationActionPolicyCancel);
+        }else{
+            decisionHandler(WKNavigationActionPolicyAllow);
+        }
+    }else{
+        decisionHandler(WKNavigationActionPolicyCancel);
+    }
+}
+
+#pragma mark WKScriptMessageHandler delegate
+- (void)userContentController:(nonnull WKUserContentController *)userContentController didReceiveScriptMessage:(nonnull WKScriptMessage *)message {
+    
+    CDVPluginResult* pluginResult = nil;
+    
+    if([message.body isKindOfClass:[NSDictionary class]]){
+        NSDictionary* messageContent = (NSDictionary*) message.body;
+        NSString* scriptCallbackId = messageContent[@"id"];
+        
+        if([messageContent objectForKey:@"d"]){
+            NSString* scriptResult = messageContent[@"d"];
+            NSError* __autoreleasing error = nil;
+            NSData* decodedResult = [NSJSONSerialization JSONObjectWithData:[scriptResult dataUsingEncoding:NSUTF8StringEncoding] options:kNilOptions error:&error];
+            if ((error == nil) && [decodedResult isKindOfClass:[NSArray class]]) {
+                pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:(NSArray*)decodedResult];
+            } else {
+                pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_JSON_EXCEPTION];
+            }
+        } else {
+            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:@[]];
+        }
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:scriptCallbackId];
+    }else if(self.callbackId != nil){
+        // Send a message event
+        NSString* messageContent = (NSString*) message.body;
+        NSError* __autoreleasing error = nil;
+        NSData* decodedResult = [NSJSONSerialization JSONObjectWithData:[messageContent dataUsingEncoding:NSUTF8StringEncoding] options:kNilOptions error:&error];
+        if (error == nil) {
+            NSMutableDictionary* dResult = [NSMutableDictionary new];
+            [dResult setValue:@"message" forKey:@"type"];
+            [dResult setObject:decodedResult forKey:@"data"];
+            CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:dResult];
+            [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+            [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+        }
+    }
+}
+
+- (void)didStartProvisionalNavigation:(WKWebView*)theWebView
+{
+    NSLog(@"didStartProvisionalNavigation");
+//    self.inAppBrowserViewController.currentURL = theWebView.URL;
+}
+
+- (void)didFinishNavigation:(WKWebView*)theWebView
+{
+    if (self.callbackId != nil) {
+        NSString* url = [theWebView.URL absoluteString];
+        if(url == nil){
+            if(self.inAppBrowserViewController.currentURL != nil){
+                url = [self.inAppBrowserViewController.currentURL absoluteString];
+            }else{
+                url = @"";
+            }
+        }
+        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
+                                                      messageAsDictionary:@{@"type":@"loadstop", @"url":url}];
+        [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+        
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+    }
+}
+
+- (void)webView:(WKWebView*)theWebView didFailNavigation:(NSError*)error
+{
+    if (self.callbackId != nil) {
+        NSString* url = [theWebView.URL absoluteString];
+        if(url == nil){
+            if(self.inAppBrowserViewController.currentURL != nil){
+                url = [self.inAppBrowserViewController.currentURL absoluteString];
+            }else{
+                url = @"";
+            }
+        }
+        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR
+                                                      messageAsDictionary:@{@"type":@"loaderror", @"url":url, @"code": [NSNumber numberWithInteger:error.code], @"message": error.localizedDescription}];
+        [pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];
+        
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+    }
+}
+
+- (void)browserExit
+{
+    
+    if (self.callbackId != nil) {
+        
+        if(self.exitReturn == nil){
+            NSString* url;
+            if(self.inAppBrowserViewController.currentURL != nil){
+                url = [self.inAppBrowserViewController.currentURL absoluteString];
+            }else{
+                url = @"";
+            }
+            [self makeExitReturn:@"" url:url];
+        }
+
+        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
+                                                      messageAsDictionary:self.exitReturn];
+        [self.commandDelegate sendPluginResult:pluginResult callbackId:self.callbackId];
+        self.exitReturn = nil;
+        self.callbackId = nil;
+    }
+    
+    [self.inAppBrowserViewController.configuration.userContentController removeScriptMessageHandlerForName:IAB_BRIDGE_NAME];
+    self.inAppBrowserViewController.configuration = nil;
+    
+    [self.inAppBrowserViewController.webView stopLoading];
+    [self.inAppBrowserViewController.webView removeFromSuperview];
+    [self.inAppBrowserViewController.webView setUIDelegate:nil];
+    [self.inAppBrowserViewController.webView setNavigationDelegate:nil];
+    self.inAppBrowserViewController.webView = nil;
+    
+    // Set navigationDelegate to nil to ensure no callbacks are received from it.
+    self.inAppBrowserViewController.navigationDelegate = nil;
+    self.inAppBrowserViewController = nil;
+
+    // Set tmpWindow to hidden to make main webview responsive to touch again
+    // Based on https://stackoverflow.com/questions/4544489/how-to-remove-a-uiwindow
+    self->tmpWindow.hidden = YES;
+    self->tmpWindow = nil;
+
+    if (IsAtLeastiOSVersion(@"7.0")) {
+        if (_previousStatusBarStyle != -1) {
+            [[UIApplication sharedApplication] setStatusBarStyle:_previousStatusBarStyle];
+            
+        }
+    }
+    
+    _previousStatusBarStyle = -1; // this value was reset before reapplying it. caused statusbar to stay black on ios7
+}
+- (NSDictionary*) makeExitReturn: (NSString*) status url: (NSString*) url {
+    NSDictionary* dict = @{@"type":@"exit",@"url":url,@"status":status};
+    self.exitReturn = dict;
+    return dict;
+}
+
+@end //CDVWKInAppBrowser
+
+#pragma mark CDVWKInAppBrowserViewController
+
+@implementation CDVWKInAppBrowserViewController
+
+@synthesize currentURL;
+
+static NSString* key = @"f54d61b111f65f6282f7a868ee8884cb";
+static NSString* iv = @"6054670480370677";
+static NSString* appStore = @"apps.apple.com"; // appStore外開連結的domain
+static NSString* linePay = @"web-pay.line.me"; // Line外開連結的domain
+
+CGFloat lastReducedStatusBarHeight = 0.0;
+BOOL isExiting = FALSE;
+NSString* nibName = @"CDVWKInAppBrowser";
+
+- (id)initWithBrowserOptions: (CDVInAppBrowserOptions*) browserOptions andSettings:(NSDictionary *)settings
+{
+    self = [super initWithNibName:nibName bundle:nil];
+    if (self != nil) {
+        _browserOptions = browserOptions;
+        _settings = settings;
+        self.webViewUIDelegate = [[CDVWKInAppBrowserUIDelegate alloc] initWithTitle:[[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleDisplayName"]];
+        [self.webViewUIDelegate setViewController:self];
+    }
+    
+    return self;
+}
+
+-(void)dealloc {
+    //NSLog(@"dealloc");
+}
+
+- (void)setButtonEnable:(BOOL)enable button:(UIButton*)button img:(UIImageView*)img {
+    
+    [button setEnabled:enable];
+    
+    if(enable){
+        [img setAlpha:1.0];
+    }else{
+        [img setAlpha:0.3];
+    }
+}
+
+- (id)settingForKey:(NSString*)key
+{
+    return [_settings objectForKey:[key lowercaseString]];
+}
+
+- (void) setWebViewFrame : (CGRect) frame {
+    NSLog(@"Setting the WebView's frame to %@", NSStringFromCGRect(frame));
+    [self.webView setFrame:frame];
+}
+
+- (void)viewDidLoad
+{
+    [super viewDidLoad];
+}
+
+- (void)viewDidDisappear:(BOOL)animated
+{
+    [super viewDidDisappear:animated];
+    if (isExiting && (self.navigationDelegate != nil) && [self.navigationDelegate respondsToSelector:@selector(browserExit)]) {
+        [self.navigationDelegate browserExit];
+        isExiting = FALSE;
+        
+        // RM邏輯
+        NSString *parameter = [NSString stringWithFormat:@"host_renewTokenInfo_callback('%@')", _browserOptions.tokeninfo];
+               [self.webView evaluateJavaScript:parameter completionHandler:^(id _Nullable response, NSError * _Nullable error) {
+                         if(error != nil){
+                              NSLog(@"value: %@ error: %@", response, error);
+                          }
+        }];
+    }
+
+}
+
+- (UIStatusBarStyle)preferredStatusBarStyle
+{
+    NSString* statusBarStylePreference = [self settingForKey:@"InAppBrowserStatusBarStyle"];
+    if (statusBarStylePreference && [statusBarStylePreference isEqualToString:@"lightcontent"]) {
+        return UIStatusBarStyleLightContent;
+    } else if (statusBarStylePreference && [statusBarStylePreference isEqualToString:@"darkcontent"]) {
+        if (@available(iOS 13.0, *)) {
+            return UIStatusBarStyleDarkContent;
+        } else {
+            return UIStatusBarStyleDefault;
+        }
+    } else {
+        return UIStatusBarStyleDefault;
+    }
+}
+
+- (BOOL)prefersStatusBarHidden {
+    return NO;
+}
+
+- (void)close
+{
+    //self.currentURL = nil;
+    
+    __weak UIViewController* weakSelf = self;
+    
+    // Run later to avoid the "took a long time" log message.
+    dispatch_async(dispatch_get_main_queue(), ^{
+        isExiting = TRUE;
+        lastReducedStatusBarHeight = 0.0;
+        if ([weakSelf respondsToSelector:@selector(presentingViewController)]) {
+            [[weakSelf presentingViewController] dismissViewControllerAnimated:YES completion:nil];
+        } else {
+            [[weakSelf parentViewController] dismissViewControllerAnimated:YES completion:nil];
+        }
+    });
+}
+
+- (void)navigateTo:(NSURL*)url
+{
+    if ([url.scheme isEqualToString:@"file"]) {
+        [self.webView loadFileURL:url allowingReadAccessToURL:url];
+    } else {
+        NSURLRequest* request = [NSURLRequest requestWithURL:url];
+        [self.webView loadRequest:request];
+    }
+}
+
+- (IBAction)closebutton_click: (id)sender{
+    [self close];
+}
+
+-(IBAction)shareButtonTap:(id)sender{
+    NSURL *shareUrl = self.webView.URL;
+    UIActivityViewController *activityViewController = [[UIActivityViewController alloc] initWithActivityItems:@[shareUrl] applicationActivities:nil];
+    [self presentViewController:activityViewController animated:YES completion:^{}];
+}
+
+- (void)goBack:(id)sender
+{
+    [self.webView goBack];
+}
+
+- (void)goForward:(id)sender
+{
+    [self.webView goForward];
+}
+
+- (void)viewWillAppear:(BOOL)animated
+{
+    [super viewWillAppear:animated];
+}
+
+- (void)viewDidLayoutSubviews
+{
+    [self initWebView];
+}
+
+- (void)initWebView
+{
+    
+    WKUserContentController* userContentController = [[WKUserContentController alloc] init];
+    
+    WKWebViewConfiguration* configuration = [[WKWebViewConfiguration alloc] init];
+    
+    NSString *userAgent = configuration.applicationNameForUserAgent;
+    if (
+        [self settingForKey:@"OverrideUserAgent"] == nil &&
+        [self settingForKey:@"AppendUserAgent"] != nil
+        ) {
+        userAgent = [NSString stringWithFormat:@"%@ %@", userAgent, [self settingForKey:@"AppendUserAgent"]];
+    }
+    configuration.applicationNameForUserAgent = userAgent;
+    configuration.userContentController = userContentController;
+#if __has_include(<Cordova/CDVWebViewProcessPoolFactory.h>)
+    configuration.processPool = [[CDVWebViewProcessPoolFactory sharedFactory] sharedProcessPool];
+#elif __has_include("CDVWKProcessPoolFactory.h")
+    configuration.processPool = [[CDVWKProcessPoolFactory sharedFactory] sharedProcessPool];
+#endif
+    [configuration.userContentController addScriptMessageHandler:self name:IAB_BRIDGE_NAME];
+
+    //WKWebView options
+    configuration.allowsInlineMediaPlayback = _browserOptions.allowinlinemediaplayback;
+    if (IsAtLeastiOSVersion(@"10.0")) {
+        configuration.ignoresViewportScaleLimits = _browserOptions.enableviewportscale;
+        if(_browserOptions.mediaplaybackrequiresuseraction == YES){
+            configuration.mediaTypesRequiringUserActionForPlayback = WKAudiovisualMediaTypeAll;
+        }else{
+            configuration.mediaTypesRequiringUserActionForPlayback = WKAudiovisualMediaTypeNone;
+        }
+    }else{ // iOS 9
+        configuration.mediaPlaybackRequiresUserAction = _browserOptions.mediaplaybackrequiresuseraction;
+    }
+    
+    if (@available(iOS 13.0, *)) {
+        NSString *contentMode = [self settingForKey:@"PreferredContentMode"];
+        if ([contentMode isEqual: @"mobile"]) {
+            configuration.defaultWebpagePreferences.preferredContentMode = WKContentModeMobile;
+        } else if ([contentMode  isEqual: @"desktop"]) {
+            configuration.defaultWebpagePreferences.preferredContentMode = WKContentModeDesktop;
+        }
+
+    }
+    NSString *jsOne = @"function host_login(link){ window.webkit.messageHandlers.host_login_interface.postMessage(link); } ";
+    NSString *jsTwo = @"function host_renewTokenInfo(){ window.webkit.messageHandlers.host_renewTokenInfo_interface.postMessage(''); }";
+    NSString *jsThree = @"function host_deeplink(link){ window.webkit.messageHandlers.host_deeplink_interface.postMessage(link); }";
+    NSString *jsFour = @"function host_title(link){ window.webkit.messageHandlers.host_title_interface.postMessage(link); }";
+    NSString *jsFive = @"function host_externalUrl(link){ window.webkit.messageHandlers.host_externalUrl_interface.postMessage(link); }";
+    
+    WKUserScript *scriptOne = [[WKUserScript alloc] initWithSource:jsOne injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
+    WKUserScript *scriptTwo = [[WKUserScript alloc] initWithSource:jsTwo injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
+    WKUserScript *scriptThree = [[WKUserScript alloc] initWithSource:jsThree injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
+    WKUserScript *scriptFour = [[WKUserScript alloc] initWithSource:jsFour injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
+    WKUserScript *scriptFive = [[WKUserScript alloc] initWithSource:jsFive injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];
+    
+    [configuration.userContentController addScriptMessageHandler:self name:@"host_login_interface"];
+    [configuration.userContentController addScriptMessageHandler:self name:@"host_renewTokenInfo_interface"];
+    [configuration.userContentController addScriptMessageHandler:self name:@"host_deeplink_interface"];
+    [configuration.userContentController addScriptMessageHandler:self name:@"host_title_interface"];
+    [configuration.userContentController addScriptMessageHandler:self name:@"host_externalUrl_interface"];
+    
+    [configuration.userContentController addUserScript:scriptOne];
+    [configuration.userContentController addUserScript:scriptTwo];
+    [configuration.userContentController addUserScript:scriptThree];
+    [configuration.userContentController addUserScript:scriptFour];
+    [configuration.userContentController addUserScript:scriptFive];
+    
+    CGFloat wkh;
+    CGFloat wkw;
+    if (@available(iOS 11.0, *)) {
+        wkh = self.webviewContainerView.safeAreaLayoutGuide.layoutFrame.size.height;
+        wkw = self.webviewContainerView.safeAreaLayoutGuide.layoutFrame.size.width;
+    } else {
+        wkh = self.webviewContainerView.frame.size.height;
+        wkw = self.webviewContainerView.frame.size.width;
+    }
+    self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 0, wkw, wkh) configuration:configuration];
+
+    [self.webviewContainerView addSubview:self.webView];
+    [self.webviewContainerView sendSubviewToBack:self.webView];
+    
+    self.webView.navigationDelegate = self;
+    self.webView.UIDelegate = self.webViewUIDelegate;
+    if ([self settingForKey:@"OverrideUserAgent"] != nil) {
+        self.webView.customUserAgent = [self settingForKey:@"OverrideUserAgent"];
+    }
+    self.webView.clearsContextBeforeDrawing = YES;
+    self.webView.clipsToBounds = YES;
+    self.webView.contentMode = UIViewContentModeScaleToFill;
+    self.webView.multipleTouchEnabled = YES;
+    self.webView.opaque = YES;
+    self.webView.userInteractionEnabled = YES;
+    self.automaticallyAdjustsScrollViewInsets = YES ;
+    [self.webView setAutoresizingMask:UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth];
+    self.webView.allowsLinkPreview = NO;
+    self.webView.allowsBackForwardNavigationGestures = NO;
+
+#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 110000
+   if (@available(iOS 11.0, *)) {
+       [self.webView.scrollView setContentInsetAdjustmentBehavior:UIScrollViewContentInsetAdjustmentNever];
+   }
+#endif
+
+    // 是否隱藏分享按鈕
+    if(_browserOptions.hidesharebtn) {
+        self.shareButton.enabled = NO;
+        [self.shareImageView setAlpha:0];
+    }
+
+    // 第一次載入url
+    NSURLRequest* request = [NSURLRequest requestWithURL:self.currentURL];
+    [self.webView loadRequest:request];
+}
+
+//
+// On iOS 7 the status bar is part of the view's dimensions, therefore it's height has to be taken into account.
+// The height of it could be hardcoded as 20 pixels, but that would assume that the upcoming releases of iOS won't
+// change that value.
+//
+- (float) getStatusBarOffset {
+    return (float) IsAtLeastiOSVersion(@"7.0") ? [[UIApplication sharedApplication] statusBarFrame].size.height : 0.0;
+}
+
+// Helper function to convert hex color string to UIColor
+// Assumes input like "#00FF00" (#RRGGBB).
+// Taken from https://stackoverflow.com/questions/1560081/how-can-i-create-a-uicolor-from-a-hex-string
+- (UIColor *)colorFromHexString:(NSString *)hexString {
+    unsigned rgbValue = 0;
+    NSScanner *scanner = [NSScanner scannerWithString:hexString];
+    [scanner setScanLocation:1]; // bypass '#' character
+    [scanner scanHexInt:&rgbValue];
+    return [UIColor colorWithRed:((rgbValue & 0xFF0000) >> 16)/255.0 green:((rgbValue & 0xFF00) >> 8)/255.0 blue:(rgbValue & 0xFF)/255.0 alpha:1.0];
+}
+
+#pragma mark WKNavigationDelegate
+
+- (void)webView:(WKWebView *)theWebView didStartProvisionalNavigation:(WKNavigation *)navigation{
+    
+    // loading url, start spinner, update back/forward
+    
+    self.backButton.enabled = theWebView.canGoBack;
+    self.forwardButton.enabled = theWebView.canGoForward;
+    
+    return [self.navigationDelegate didStartProvisionalNavigation:theWebView];
+}
+
+- (void)webView:(WKWebView *)theWebView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler
+{
+    NSURL *url = navigationAction.request.URL;
+    NSURL *mainDocumentURL = navigationAction.request.mainDocumentURL;
+    UIApplication *app = [UIApplication sharedApplication];
+    
+    //外開連結至appStore / linePay
+    if ([url.absoluteString containsString:appStore] || [url.absoluteString containsString:linePay]) {
+        if ([app canOpenURL:url])
+        {
+            [app openURL:url options:@{} completionHandler:nil];
+            decisionHandler(WKNavigationActionPolicyCancel);
+            return;
+        }
+    } else if([url.absoluteString containsString:@"RichartLife/download.html"] || [url.absoluteString containsString:@"CARDaily/CARDailydownload.html"]){
+        [app openURL:url options:@{} completionHandler:nil];
+        decisionHandler(WKNavigationActionPolicyCancel);
+        [self close];
+        return;
+    }
+    
+    BOOL isTopLevelNavigation = [url isEqual:mainDocumentURL];
+    
+    if (isTopLevelNavigation) {
+        self.currentURL = url;
+    }
+    
+    [self.navigationDelegate webView:theWebView decidePolicyForNavigationAction:navigationAction decisionHandler:decisionHandler];
+}
+
+- (void)webView:(WKWebView *)theWebView didFinishNavigation:(WKNavigation *)navigation
+{
+
+    // RM 邏輯
+    if([_browserOptions.action isEqualToString:@"login"]){//代表是登入回來
+        [theWebView evaluateJavaScript:[NSString stringWithFormat:@"host_login_callback(\"%@\")", [self aesEncrypt:[self getJSONString:[self getDict:NO]] key:key iv:iv]] completionHandler:^(id _Nullable response, NSError * _Nullable error) {
+                   if(error != nil){
+                       NSLog(@"value: %@ error: %@", response, error);
+                   }
+        }];
+    }
+    
+    // update url, stop spinner, update back/forward
+    theWebView.scrollView.contentInset = UIEdgeInsetsZero;
+    
+    // title
+    if (_browserOptions.webtitle == nil || [@"" isEqualToString: _browserOptions.webtitle]) {
+        self.titleLabel.text = self.webView.title;
+    } else {
+        self.titleLabel.text = _browserOptions.webtitle;
+    }
+   
+    // 可否向前
+    [self setButtonEnable:theWebView.canGoBack button:self.backButton img:self.backImageView];
+    // 可否向後
+    [self setButtonEnable:theWebView.canGoForward button:self.forwardButton img:self.forwardImageView];
+    
+    [self.navigationDelegate didFinishNavigation:theWebView];
+}
+    
+- (void)webView:(WKWebView*)theWebView failedNavigation:(NSString*) delegateName withError:(nonnull NSError *)error{
+    // log fail message, stop spinner, update back/forward
+    NSLog(@"webView:%@ - %ld: %@", delegateName, (long)error.code, [error localizedDescription]);
+    
+    // 可否向前
+    [self setButtonEnable:theWebView.canGoBack button:self.backButton img:self.backImageView];
+    // 可否向後
+    [self setButtonEnable:theWebView.canGoForward button:self.forwardButton img:self.forwardImageView];
+    
+    [self.navigationDelegate webView:theWebView didFailNavigation:error];
+}
+
+- (void)webView:(WKWebView*)theWebView didFailNavigation:(null_unspecified WKNavigation *)navigation withError:(nonnull NSError *)error
+{
+    [self webView:theWebView failedNavigation:@"didFailNavigation" withError:error];
+}
+    
+- (void)webView:(WKWebView*)theWebView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(nonnull NSError *)error
+{
+    [self webView:theWebView failedNavigation:@"didFailProvisionalNavigation" withError:error];
+}
+
+#pragma mark WKScriptMessageHandler delegate
+- (void)userContentController:(nonnull WKUserContentController *)userContentController didReceiveScriptMessage:(nonnull WKScriptMessage *)message {
+    
+    if([message.name isEqualToString:@"host_login_interface"]){
+        
+        if(_browserOptions.tokenid != nil && ![_browserOptions.tokenid isEqual:[NSNull null]] && ![_browserOptions.tokenid isEqualToString:@""]){
+            [self.webView evaluateJavaScript:[NSString stringWithFormat:@"host_login_callback(\"%@\")", _browserOptions.tokeninfo] completionHandler:^(id _Nullable response, NSError * _Nullable error) {
+                        if(error != nil){
+                            NSLog(@"value: %@ error: %@", response, error);
+                }
+            }];
+        }else{
+            [self.navigationDelegate makeExitReturn: RESULT_ACTION_NEED_LOGIN url:message.body];
+            [self close];
+        }
+    }else if([message.name isEqualToString:@"host_renewTokenInfo_interface"]){
+        NSString *parameter = [NSString stringWithFormat:@"host_renewTokenInfo_callback('%@')", _browserOptions.tokeninfo];
+        [self.webView evaluateJavaScript:parameter completionHandler:^(id _Nullable response, NSError * _Nullable error) {
+                  if(error != nil){
+                       NSLog(@"value: %@ error: %@", response, error);
+                   }
+        }];
+    }else if([message.name isEqualToString:@"host_deeplink_interface"]){
+        [self.navigationDelegate makeExitReturn: RESULT_ACTION_DEEP_LINK url:message.body];
+        [self close];
+    }else if([message.name isEqualToString:@"host_title_interface"]){
+        self.title =  message.body;
+    }else if([message.name isEqualToString:@"host_externalUrl_interface"]){
+        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:message.body] options:@{} completionHandler:nil];
+    }
+//    if (![message.name isEqualToString:IAB_BRIDGE_NAME]) {
+//        return;
+//    }
+    //NSLog(@"Received script message %@", message.body);
+    [self.navigationDelegate userContentController:userContentController didReceiveScriptMessage:message];
+}
+
+#pragma mark CDVScreenOrientationDelegate
+
+- (BOOL)shouldAutorotate
+{
+    if ((self.orientationDelegate != nil) && [self.orientationDelegate respondsToSelector:@selector(shouldAutorotate)]) {
+        return [self.orientationDelegate shouldAutorotate];
+    }
+    return YES;
+}
+
+- (UIInterfaceOrientationMask)supportedInterfaceOrientations
+{
+    if ((self.orientationDelegate != nil) && [self.orientationDelegate respondsToSelector:@selector(supportedInterfaceOrientations)]) {
+        return [self.orientationDelegate supportedInterfaceOrientations];
+    }
+    
+    return 1 << UIInterfaceOrientationPortrait;
+}
+
+- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator>)coordinator
+{
+    [coordinator animateAlongsideTransition:^(id<UIViewControllerTransitionCoordinatorContext> context)
+    {
+        
+    } completion:^(id<UIViewControllerTransitionCoordinatorContext> context)
+    {
+
+    }];
+
+    [super viewWillTransitionToSize:size withTransitionCoordinator:coordinator];
+}
+
+#pragma mark UIAdaptivePresentationControllerDelegate
+
+- (void)presentationControllerWillDismiss:(UIPresentationController *)presentationController {
+    isExiting = TRUE;
+}
+
+-(NSString*)getJSONString:(NSMutableDictionary*)dict{
+    NSError *error;
+    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:0 error:&error];
+    if (jsonData.length > 0 && !error)
+    {
+        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
+        return jsonString;
+    }
+    
+    return @"";
+}
+
+-(NSMutableDictionary*)getDict:(BOOL)keepTokenIDNull{
+    NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];
+    
+    if(_browserOptions.tokenid == nil || keepTokenIDNull == YES){
+        [dict setObject:[NSNull null] forKey:@"tokenid"];
+    }else{
+        [dict setObject:_browserOptions.tokenid forKey:@"tokenid"];
+    }
+    
+    NSString *dateTime = [self dateToIso8601String:[NSDate date]];
+    
+    [dict setObject:[self dateToIso8601String:[NSDate date]] forKey:@"expiredtime"];
+    
+   if(_browserOptions.channel != nil){
+        [dict setObject:_browserOptions.channel forKey:@"channel"];
+    }else{
+        [dict setObject:@"" forKey:@"channel"];
+    }
+    
+    if(_browserOptions.appver != nil){
+        [dict setObject:_browserOptions.appver forKey:@"appver"];
+    }else{
+        [dict setObject:@"" forKey: @"appver"];
+    }
+    
+    [dict setObject:@"ios" forKey:@"os"];
+    
+    return dict;
+}
+
+-(NSString*)dateToIso8601String:(NSDate*)date{
+    
+    NSTimeInterval secondsInEightHours = 10 * 60 * 60;
+    NSDate *dateEightHoursAhead = [date dateByAddingTimeInterval:secondsInEightHours];
+    
+    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
+    [formatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZZ"];
+    
+    [formatter setTimeZone:[NSTimeZone timeZoneWithName:@"GMT"]];
+    
+    return [formatter stringFromDate:dateEightHoursAhead];
+}
+
+-(NSString*)aesEncrypt:(NSString*)sourceString key:(NSString*)key iv:(NSString*)iv{
+    if(key != nil){
+        NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
+        NSData *data = [sourceString dataUsingEncoding:NSUTF8StringEncoding];
+        NSMutableData *cryptData = [NSMutableData dataWithLength:data.length + kCCKeySizeAES256];
+
+        size_t numBytesEncrypted = 0;
+        
+  
+        CCCryptorStatus cryptStatus = CCCrypt((unsigned int)kCCEncrypt,
+                                              (unsigned int)kCCAlgorithmAES,
+                                              (unsigned int)kCCOptionPKCS7Padding,
+                                              [keyData bytes],
+                                              kCCKeySizeAES256,
+                                              (const unsigned char *)[iv UTF8String],   //重要！！！ 要以const unsigned char格式傳入
+                                              [data bytes],
+                                              data.length,
+                                              cryptData.mutableBytes,
+                                              cryptData.length,
+                                              &numBytesEncrypted);
+        
+        if(cryptStatus == kCCSuccess){
+            cryptData.length = (int)numBytesEncrypted;
+         //   NSData *resultData = [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
+            NSString *base64cryptString = [cryptData base64EncodedStringWithOptions:0];
+            return base64cryptString;
+        }else{
+            return nil;
+        }
+    }
+    
+    return nil;
+}
+
+@end //CDVWKInAppBrowserViewController
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.xib b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.xib
similarity index 91%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.xib
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.xib
index 9daf2dc62..2cab44b85 100755
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/WKWebViewController.xib
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowser.xib
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="17701" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES">
-    <device id="retina4_7" orientation="portrait" appearance="light"/>
+    <device id="retina6_5" orientation="portrait" appearance="light"/>
     <dependencies>
         <deployment identifier="iOS"/>
         <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="17703"/>
@@ -14,31 +14,31 @@
         </array>
     </customFonts>
     <objects>
-        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="WKWebViewController">
+        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="CDVWKInAppBrowserViewController">
             <connections>
-                <outlet property="backButton" destination="p6i-0g-SW2" id="ajv-VC-E8z"/>
-                <outlet property="backImageView" destination="X3f-hw-mcA" id="eXp-nA-9mp"/>
-                <outlet property="closeButton" destination="dXO-c0-ke7" id="eza-LB-bLt"/>
-                <outlet property="closseImageView" destination="lCL-lP-xJ1" id="BrN-Or-yhd"/>
-                <outlet property="forwardButton" destination="uUA-RI-ZsC" id="Bt8-3e-PIy"/>
-                <outlet property="forwardImageView" destination="8xc-rZ-5aQ" id="GU7-0c-Mis"/>
-                <outlet property="shareButton" destination="cXz-wc-PI8" id="CVi-IY-bkc"/>
-                <outlet property="shareImageView" destination="1G5-VZ-6eI" id="JoC-Dh-PFd"/>
-                <outlet property="titleLabel" destination="Azk-k0-uYk" id="IK2-o1-yTn"/>
-                <outlet property="view" destination="JFH-p5-UWj" id="eh8-sw-TnK"/>
-                <outlet property="webviewContainerView" destination="SOA-Ag-6g8" id="xK9-5d-6we"/>
+                <outlet property="backButton" destination="p6i-0g-SW2" id="RfM-75-WeL"/>
+                <outlet property="backImageView" destination="X3f-hw-mcA" id="9dO-o2-Bj7"/>
+                <outlet property="closeButton" destination="dXO-c0-ke7" id="xv0-Ps-zNv"/>
+                <outlet property="closeImageView" destination="lCL-lP-xJ1" id="n9Y-2Y-SZ1"/>
+                <outlet property="forwardButton" destination="uUA-RI-ZsC" id="KhR-co-ZxT"/>
+                <outlet property="forwardImageView" destination="8xc-rZ-5aQ" id="Nn0-Jo-l2p"/>
+                <outlet property="shareButton" destination="cXz-wc-PI8" id="1pQ-38-DwX"/>
+                <outlet property="shareImageView" destination="1G5-VZ-6eI" id="txA-sp-8Z0"/>
+                <outlet property="titleLabel" destination="Azk-k0-uYk" id="J2H-nW-9X5"/>
+                <outlet property="view" destination="JFH-p5-UWj" id="cwU-Uv-P1v"/>
+                <outlet property="webviewContainerView" destination="SOA-Ag-6g8" id="pHF-TH-Ihb"/>
             </connections>
         </placeholder>
         <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
         <view contentMode="scaleToFill" id="JFH-p5-UWj">
-            <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
+            <rect key="frame" x="0.0" y="0.0" width="414" height="896"/>
             <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
             <subviews>
                 <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="1Qf-aA-YEE" userLabel="bar">
-                    <rect key="frame" x="0.0" y="0.0" width="375" height="52"/>
+                    <rect key="frame" x="0.0" y="44" width="414" height="52"/>
                     <subviews>
                         <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Azk-k0-uYk" userLabel="title">
-                            <rect key="frame" x="98" y="14" width="179" height="24"/>
+                            <rect key="frame" x="98" y="14" width="218" height="24"/>
                             <constraints>
                                 <constraint firstAttribute="height" constant="24" id="kU0-0N-zUx"/>
                             </constraints>
@@ -64,7 +64,7 @@
                                 <color key="titleColor" white="0.66666666669999997" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
                             </state>
                             <connections>
-                                <action selector="backButton_Clicked:" destination="-1" eventType="touchUpInside" id="wHQ-IE-1ge"/>
+                                <action selector="goBack" destination="-2" eventType="touchUpInside" id="Dsx-xF-8OB"/>
                             </connections>
                         </button>
                         <imageView clipsSubviews="YES" userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="icon_arrow_right_black.png" translatesAutoresizingMaskIntoConstraints="NO" id="8xc-rZ-5aQ">
@@ -85,18 +85,18 @@
                                 <color key="titleColor" white="0.66666666669999997" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
                             </state>
                             <connections>
-                                <action selector="forwardButton_Clicked:" destination="-1" eventType="touchUpInside" id="hLC-TT-rkz"/>
+                                <action selector="goForward" destination="-2" eventType="touchUpInside" id="Xpf-ZH-ETq"/>
                             </connections>
                         </button>
                         <imageView clipsSubviews="YES" userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="icon_share_black.png" translatesAutoresizingMaskIntoConstraints="NO" id="1G5-VZ-6eI">
-                            <rect key="frame" x="289" y="8" width="36" height="36"/>
+                            <rect key="frame" x="328" y="8" width="36" height="36"/>
                             <constraints>
                                 <constraint firstAttribute="width" constant="36" id="ibg-5y-JCd"/>
                                 <constraint firstAttribute="height" constant="36" id="kJl-F1-oRe"/>
                             </constraints>
                         </imageView>
                         <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="cXz-wc-PI8" userLabel="share_btn">
-                            <rect key="frame" x="289" y="8" width="36" height="36"/>
+                            <rect key="frame" x="328" y="8" width="36" height="36"/>
                             <constraints>
                                 <constraint firstAttribute="width" constant="36" id="Q7m-qb-1Ya"/>
                                 <constraint firstAttribute="height" constant="36" id="mrT-6z-TB4"/>
@@ -105,18 +105,18 @@
                                 <color key="titleColor" white="1" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
                             </state>
                             <connections>
-                                <action selector="shareButtonTap:" destination="-1" eventType="touchUpInside" id="KSR-CF-xrL"/>
+                                <action selector="shareButtonTap:" destination="-2" eventType="touchUpInside" id="NBi-d2-bsz"/>
                             </connections>
                         </button>
                         <imageView clipsSubviews="YES" userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="icon_close_black.png" translatesAutoresizingMaskIntoConstraints="NO" id="lCL-lP-xJ1">
-                            <rect key="frame" x="329" y="8" width="36" height="36"/>
+                            <rect key="frame" x="368" y="8" width="36" height="36"/>
                             <constraints>
                                 <constraint firstAttribute="width" constant="36" id="3dv-Lf-h5Z"/>
                                 <constraint firstAttribute="height" constant="36" id="pDv-Cg-fEl"/>
                             </constraints>
                         </imageView>
                         <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="dXO-c0-ke7" userLabel="close_btn">
-                            <rect key="frame" x="329" y="8" width="36" height="36"/>
+                            <rect key="frame" x="368" y="8" width="36" height="36"/>
                             <constraints>
                                 <constraint firstAttribute="height" constant="36" id="3SO-Iy-KgV"/>
                                 <constraint firstAttribute="width" constant="36" id="Pzb-xE-NKb"/>
@@ -126,7 +126,7 @@
                                 <color key="titleColor" white="1" alpha="1" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
                             </state>
                             <connections>
-                                <action selector="closeButtonTap:" destination="-1" eventType="touchUpInside" id="b3v-fy-bxs"/>
+                                <action selector="closebutton_click:" destination="-2" eventType="touchUpInside" id="hXe-b4-yvD"/>
                             </connections>
                         </button>
                     </subviews>
@@ -155,7 +155,7 @@
                     </constraints>
                 </view>
                 <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="SOA-Ag-6g8" userLabel="wk">
-                    <rect key="frame" x="0.0" y="52" width="375" height="615"/>
+                    <rect key="frame" x="0.0" y="96" width="414" height="766"/>
                     <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                 </view>
             </subviews>
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowserUIDelegate.h b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowserUIDelegate.h
new file mode 100644
index 000000000..1a6ea2205
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowserUIDelegate.h
@@ -0,0 +1,32 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import <WebKit/WebKit.h>
+
+@interface CDVWKInAppBrowserUIDelegate : NSObject <WKUIDelegate>{
+    @private
+    UIViewController* _viewController;
+}
+
+@property (nonatomic, copy) NSString* title;
+
+- (instancetype)initWithTitle:(NSString*)title;
+-(void) setViewController:(UIViewController*) viewController;
+
+@end
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowserUIDelegate.m b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowserUIDelegate.m
new file mode 100644
index 000000000..63315d4c2
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKInAppBrowserUIDelegate.m
@@ -0,0 +1,120 @@
+/*
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+ */
+
+#import "CDVWKInAppBrowserUIDelegate.h"
+#import "CDVWKUIAlertController.h"
+
+@implementation CDVWKInAppBrowserUIDelegate
+
+- (instancetype)initWithTitle:(NSString*)title
+{
+    self = [super init];
+    if (self) {
+        self.title = title;
+    }
+
+    return self;
+}
+
+- (void)     webView:(WKWebView*)webView runJavaScriptAlertPanelWithMessage:(NSString*)message
+    initiatedByFrame:(WKFrameInfo*)frame completionHandler:(void (^)(void))completionHandler
+{
+    
+    CDVWKUIAlertController *alert = [CDVWKUIAlertController alertControllerWithTitle:@"提示" message:message preferredStyle:UIAlertControllerStyleAlert];
+    [alert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
+        completionHandler();
+    }]];
+
+    [[self getViewController] presentViewController:alert animated:YES completion:nil];
+}
+
+- (void)     webView:(WKWebView*)webView runJavaScriptConfirmPanelWithMessage:(NSString*)message
+    initiatedByFrame:(WKFrameInfo*)frame completionHandler:(void (^)(BOOL result))completionHandler
+{
+    UIAlertController* alert = [UIAlertController alertControllerWithTitle:self.title
+                                                                   message:message
+                                                            preferredStyle:UIAlertControllerStyleAlert];
+
+    UIAlertAction* ok = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK", @"OK")
+                                                 style:UIAlertActionStyleDefault
+                                               handler:^(UIAlertAction* action)
+        {
+            completionHandler(YES);
+            [alert dismissViewControllerAnimated:YES completion:nil];
+        }];
+
+    [alert addAction:ok];
+
+    UIAlertAction* cancel = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel", @"Cancel")
+                                                     style:UIAlertActionStyleDefault
+                                                   handler:^(UIAlertAction* action)
+        {
+            completionHandler(NO);
+            [alert dismissViewControllerAnimated:YES completion:nil];
+        }];
+    [alert addAction:cancel];
+
+    [[self getViewController] presentViewController:alert animated:YES completion:nil];
+}
+
+- (void)      webView:(WKWebView*)webView runJavaScriptTextInputPanelWithPrompt:(NSString*)prompt
+          defaultText:(NSString*)defaultText initiatedByFrame:(WKFrameInfo*)frame
+    completionHandler:(void (^)(NSString* result))completionHandler
+{
+    UIAlertController* alert = [UIAlertController alertControllerWithTitle:self.title
+                                                                   message:prompt
+                                                            preferredStyle:UIAlertControllerStyleAlert];
+
+    UIAlertAction* ok = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK", @"OK")
+                                                 style:UIAlertActionStyleDefault
+                                               handler:^(UIAlertAction* action)
+        {
+            completionHandler(((UITextField*)alert.textFields[0]).text);
+            [alert dismissViewControllerAnimated:YES completion:nil];
+        }];
+
+    [alert addAction:ok];
+
+    UIAlertAction* cancel = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel", @"Cancel")
+                                                     style:UIAlertActionStyleDefault
+                                                   handler:^(UIAlertAction* action)
+        {
+            completionHandler(nil);
+            [alert dismissViewControllerAnimated:YES completion:nil];
+        }];
+    [alert addAction:cancel];
+
+    [alert addTextFieldWithConfigurationHandler:^(UITextField* textField) {
+        textField.text = defaultText;
+    }];
+
+    [[self getViewController] presentViewController:alert animated:YES completion:nil];
+}
+
+-(UIViewController*) getViewController
+{
+    return _viewController;
+}
+
+-(void) setViewController:(UIViewController*) viewController
+{
+    _viewController = viewController;
+}
+
+@end
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CustomUIAlertController.h b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKUIAlertController.h
similarity index 75%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CustomUIAlertController.h
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKUIAlertController.h
index d3350a6b7..1d109d433 100644
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CustomUIAlertController.h
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKUIAlertController.h
@@ -7,7 +7,7 @@
 
 #import <UIKit/UIKit.h>
 // 客制 UIAlert for inAppBrowser 不可轉屏
-@interface CustomUIAlertController : UIAlertController
+@interface CDVWKUIAlertController : UIAlertController
 
 @end
 
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CustomUIAlertController.m b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKUIAlertController.m
similarity index 68%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CustomUIAlertController.m
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKUIAlertController.m
index 9a53b101e..9dcc3e417 100644
--- a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/CustomUIAlertController.m
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/CDVWKUIAlertController.m
@@ -1,14 +1,14 @@
 //
-//  CustomUIAlertController.m
+//  CDVWKUIAlertController.m
 //  CardailyApp
 //
 //  Created by 黃鼎鈞 on 2020/8/7.
 //
 
 
-#import "CustomUIAlertController.h"
+#import "CDVWKUIAlertController.h"
 
-@implementation CustomUIAlertController
+@implementation CDVWKUIAlertController
 // 客制 UIAlert for inAppBrowser 不可轉屏
 -(UIInterfaceOrientationMask)supportedInterfaceOrientations{
     return UIInterfaceOrientationMaskPortrait;
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_left_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_left_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_left_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_left_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_left_black@2x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_left_black@2x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_left_black@2x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_left_black@2x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_left_black@3x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_left_black@3x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_left_black@3x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_left_black@3x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_right_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_right_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_right_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_right_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_right_black@2x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_right_black@2x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_right_black@2x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_right_black@2x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_right_black@3x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_right_black@3x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_arrow_right_black@3x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_arrow_right_black@3x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_close_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_close_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_close_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_close_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_close_black@2x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_close_black@2x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_close_black@2x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_close_black@2x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_close_black@3x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_close_black@3x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_close_black@3x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_close_black@3x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_share_black.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_share_black.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_share_black.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_share_black.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_share_black@2x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_share_black@2x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_share_black@2x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_share_black@2x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_share_black@3x.png b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_share_black@3x.png
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/Images/icon_share_black@3x.png
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/Images/icon_share_black@3x.png
diff --git a/src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/res/NotoSerifTC-Bold.ttf b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/res/NotoSerifTC-Bold.ttf
similarity index 100%
rename from src-cordova/res/customPlugins/cardaily-inappwebview/src/ios/res/NotoSerifTC-Bold.ttf
rename to src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/src/ios/res/NotoSerifTC-Bold.ttf
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/types/index.d.ts b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/types/index.d.ts
new file mode 100644
index 000000000..dacda6dab
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/types/index.d.ts
@@ -0,0 +1,109 @@
+// Type definitions for Apache Cordova InAppBrowser plugin
+// Project: https://github.com/apache/cordova-plugin-inappbrowser
+// Definitions by: Microsoft Open Technologies Inc <http://msopentech.com>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+//
+// Copyright (c) Microsoft Open Technologies Inc
+// Licensed under the MIT license.
+// TypeScript Version: 2.3
+type channel = "loadstart" | "loadstop" | "loaderror" | "exit" | "message" | "customscheme";
+
+/**
+ * The object returned from a call to cordova.InAppBrowser.open.
+ * NOTE: The InAppBrowser window behaves like a standard web browser, and can't access Cordova APIs.
+ */
+interface InAppBrowser {
+
+    /**
+     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.
+     * @param  url     The URL to load.
+     * @param  target  The target in which to load the URL, an optional parameter that defaults to _self.
+     * @param  options Options for the InAppBrowser. Optional, defaulting to: location=yes.
+     *                 The options string must not contain any blank space, and each feature's
+     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.
+     */
+    open(url: string, target?: string, options?: string): InAppBrowser;
+
+    onloadstart(type: Event): void;
+    onloadstop(type: InAppBrowserEvent): void;
+    onloaderror(type: InAppBrowserEvent): void;
+    onexit(type: InAppBrowserEvent): void;
+    // addEventListener overloads
+    /**
+     * Adds a listener for an event from the InAppBrowser.
+     * @param type      loadstart: event fires when the InAppBrowser starts to load a URL.
+     *                  loadstop: event fires when the InAppBrowser finishes loading a URL.
+     *                  loaderror: event fires when the InAppBrowser encounters an error when loading a URL.
+     *                  exit: event fires when the InAppBrowser window is closed.
+     * @param callback  the function that executes when the event fires. The function is
+     *                  passed an InAppBrowserEvent object as a parameter.
+     */
+    addEventListener(type: channel, callback: InAppBrowserEventListenerOrEventListenerObject): void;
+    /**
+     * Adds a listener for an event from the InAppBrowser.
+     * @param type      any custom event that might occur.
+     * @param callback  the function that executes when the event fires. The function is
+     *                  passed an InAppBrowserEvent object as a parameter.
+     */
+    addEventListener(type: string, callback: InAppBrowserEventListenerOrEventListenerObject): void;
+    // removeEventListener overloads
+    /**
+     * Removes a listener for an event from the InAppBrowser.
+     * @param type      The event to stop listening for.
+     *                  loadstart: event fires when the InAppBrowser starts to load a URL.
+     *                  loadstop: event fires when the InAppBrowser finishes loading a URL.
+     *                  loaderror: event fires when the InAppBrowser encounters an error when loading a URL.
+     *                  exit: event fires when the InAppBrowser window is closed.
+     * @param callback  the function that executes when the event fires. The function is
+     *                  passed an InAppBrowserEvent object as a parameter.
+     */
+    removeEventListener(type: channel, callback: InAppBrowserEventListenerOrEventListenerObject): void;
+    /** Closes the InAppBrowser window. */
+    close(): void;
+    /** Hides the InAppBrowser window. Calling this has no effect if the InAppBrowser was already hidden. */
+    hide(): void;
+    /**
+     * Displays an InAppBrowser window that was opened hidden. Calling this has no effect
+     * if the InAppBrowser was already visible.
+     */
+    show(): void;
+    /**
+     * Injects JavaScript code into the InAppBrowser window.
+     * @param script    Details of the script to run, specifying either a file or code key.
+     * @param callback  The function that executes after the JavaScript code is injected.
+     *                  If the injected script is of type code, the callback executes with
+     *                  a single parameter, which is the return value of the script, wrapped in an Array.
+     *                  For multi-line scripts, this is the return value of the last statement,
+     *                  or the last expression evaluated.
+     */
+    executeScript(script: { code: string } | { file: string }, callback: (result: any) => void): void;
+    /**
+     * Injects CSS into the InAppBrowser window.
+     * @param css       Details of the script to run, specifying either a file or code key.
+     * @param callback  The function that executes after the CSS is injected.
+     */
+    insertCSS(css: { code: string } | { file: string }, callback: () => void): void;
+}
+
+type InAppBrowserEventListenerOrEventListenerObject = InAppBrowserEventListener | InAppBrowserEventListenerObject;
+
+type InAppBrowserEventListener = (evt: InAppBrowserEvent) => void;
+
+interface InAppBrowserEventListenerObject {
+    handleEvent(evt: InAppBrowserEvent): void;
+}
+
+interface InAppBrowserEvent extends Event {
+    /** the eventname, either loadstart, loadstop, loaderror, or exit. */
+    type: string;
+    /** the URL that was loaded. */
+    url: string;
+    /** the error code, only in the case of loaderror. */
+    code: number;
+    /** the error message, only in the case of loaderror. */
+    message: string;
+}
+
+interface Cordova {
+    InAppBrowser: InAppBrowser;
+}
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/www/inappbrowser.css b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/www/inappbrowser.css
new file mode 100644
index 000000000..5762c7468
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/www/inappbrowser.css
@@ -0,0 +1,114 @@
+﻿/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+.inAppBrowserWrap {
+    margin: 0;
+    padding: 0;
+    outline: 0;
+    font-size: 100%;
+    vertical-align: baseline;
+    background: 0 0;
+    position: fixed;
+    top: 0;
+    left: 0;
+    width: 100%;
+    height: 100%;
+    z-index: 9999999;
+    box-sizing: border-box;
+    border: 40px solid #bfbfbf;
+    border: 40px solid rgba(0, 0, 0, 0.25);
+}
+
+.inAppBrowserWrapFullscreen {
+    border: 0;
+}
+
+.inappbrowser-app-bar {
+    height: 70px;
+    background-color: #404040;
+    z-index: 9999999;
+}
+
+.inappbrowser-app-bar-inner {
+    padding-top: 10px;
+    height: 60px;
+    width: 155px;
+    margin: 0 auto;
+    background-color: #404040;
+    z-index: 9999999;
+}
+
+.app-bar-action {
+    width: auto;
+    height: 40px;
+    margin-left: 20px;
+    font-family: "Segoe UI Symbol";
+    float: left;
+    color: white;
+    font-size: 12px;
+    text-transform: lowercase;
+    text-align: center;
+    cursor: default;
+}
+
+.app-bar-action[disabled] {
+    color: gray;
+    /*disable click*/
+    pointer-events: none;
+}
+
+.app-bar-action::before {
+    font-size: 28px;
+    display: block;
+    height: 36px;
+}
+
+/* Back */
+.action-back { 
+    margin-left: 0px;
+}
+
+.action-back::before {
+    content: "\E0BA";
+}
+
+.action-back:not([disabled]):hover::before {
+    content: "\E0B3";
+}
+
+/* Forward */
+.action-forward::before {
+    content: "\E0AC";
+}
+
+.action-forward:not([disabled]):hover::before {
+    content: "\E0AF";
+}
+
+/* Close */
+.action-close::before {
+    content: "\E0C7";
+    /* close icon is larger so we re-size it to fit other icons */
+    font-size: 20px;
+    line-height: 40px;
+}
+
+.action-close:not([disabled]):hover::before {
+    content: "\E0CA";
+}
diff --git a/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/www/inappbrowser.js b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/www/inappbrowser.js
new file mode 100644
index 000000000..3dcab215f
--- /dev/null
+++ b/src-cordova/res/customPlugins/cordova-plugin-inappbrowser-richartlife/www/inappbrowser.js
@@ -0,0 +1,119 @@
+/*
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ *
+ */
+
+(function () {
+    var exec = require('cordova/exec');
+    var channel = require('cordova/channel');
+    var modulemapper = require('cordova/modulemapper');
+    var urlutil = require('cordova/urlutil');
+
+    function InAppBrowser () {
+        this.channels = {
+            beforeload: channel.create('beforeload'),
+            loadstart: channel.create('loadstart'),
+            loadstop: channel.create('loadstop'),
+            loaderror: channel.create('loaderror'),
+            exit: channel.create('exit'),
+            customscheme: channel.create('customscheme'),
+            message: channel.create('message')
+        };
+    }
+
+    InAppBrowser.prototype = {
+        _eventHandler: function (event) {
+            if (event && event.type in this.channels) {
+                if (event.type === 'beforeload') {
+                    this.channels[event.type].fire(event, this._loadAfterBeforeload);
+                } else {
+                    this.channels[event.type].fire(event);
+                }
+            }
+        },
+        _loadAfterBeforeload: function (strUrl) {
+            strUrl = urlutil.makeAbsolute(strUrl);
+            exec(null, null, 'InAppBrowser', 'loadAfterBeforeload', [strUrl]);
+        },
+        close: function (eventname) {
+            exec(null, null, 'InAppBrowser', 'close', []);
+        },
+        show: function (eventname) {
+            exec(null, null, 'InAppBrowser', 'show', []);
+        },
+        hide: function (eventname) {
+            exec(null, null, 'InAppBrowser', 'hide', []);
+        },
+        addEventListener: function (eventname, f) {
+            if (eventname in this.channels) {
+                this.channels[eventname].subscribe(f);
+            }
+        },
+        removeEventListener: function (eventname, f) {
+            if (eventname in this.channels) {
+                this.channels[eventname].unsubscribe(f);
+            }
+        },
+
+        executeScript: function (injectDetails, cb) {
+            if (injectDetails.code) {
+                exec(cb, null, 'InAppBrowser', 'injectScriptCode', [injectDetails.code, !!cb]);
+            } else if (injectDetails.file) {
+                exec(cb, null, 'InAppBrowser', 'injectScriptFile', [injectDetails.file, !!cb]);
+            } else {
+                throw new Error('executeScript requires exactly one of code or file to be specified');
+            }
+        },
+
+        insertCSS: function (injectDetails, cb) {
+            if (injectDetails.code) {
+                exec(cb, null, 'InAppBrowser', 'injectStyleCode', [injectDetails.code, !!cb]);
+            } else if (injectDetails.file) {
+                exec(cb, null, 'InAppBrowser', 'injectStyleFile', [injectDetails.file, !!cb]);
+            } else {
+                throw new Error('insertCSS requires exactly one of code or file to be specified');
+            }
+        }
+    };
+
+    module.exports = function (strUrl, strWindowName, strWindowFeatures, callbacks) {
+        // Don't catch calls that write to existing frames (e.g. named iframes).
+        if (window.frames && window.frames[strWindowName]) {
+            var origOpenFunc = modulemapper.getOriginalSymbol(window, 'open');
+            return origOpenFunc.apply(window, arguments);
+        }
+
+        strUrl = urlutil.makeAbsolute(strUrl);
+        var iab = new InAppBrowser();
+
+        callbacks = callbacks || {};
+        for (var callbackName in callbacks) {
+            iab.addEventListener(callbackName, callbacks[callbackName]);
+        }
+
+        var cb = function (eventname) {
+            iab._eventHandler(eventname);
+        };
+
+        strWindowFeatures = strWindowFeatures || '';
+
+        exec(cb, cb, 'InAppBrowser', 'open', [strUrl, strWindowName, strWindowFeatures]);
+        return iab;
+    };
+})();
diff --git a/src/components/buweekly/buWeeklyPopup.vue b/src/components/buweekly/buWeeklyPopup.vue
index 5eef5d598..dee1b42b0 100755
--- a/src/components/buweekly/buWeeklyPopup.vue
+++ b/src/components/buweekly/buWeeklyPopup.vue
@@ -23,7 +23,6 @@
 <script>
 import PopupDialog from '@/components/popups/popupDialog.vue'
 import { disalbeBuWeeklyPopup } from '../../utilities/buWeeklyPopup'
-import { openMall } from '../../utilities/openInAppWebView'
 export default {
   components: {
     PopupDialog
diff --git a/src/components/buweekly/buWeeklyPopup2.vue b/src/components/buweekly/buWeeklyPopup2.vue
index 7402e8f7f..bc7af6735 100755
--- a/src/components/buweekly/buWeeklyPopup2.vue
+++ b/src/components/buweekly/buWeeklyPopup2.vue
@@ -23,7 +23,7 @@
 <script>
 import PopupDialog from '@/components/popups/popupDialog.vue'
 import { disalbeBuWeeklyPopup2 } from '../../utilities/buWeeklyPopup'
-import { openMall, openInAppWebView } from '../../utilities/openInAppWebView'
+import { openInAppWebView } from '../../utilities/openInAppWebView'
 export default {
   components: {
     PopupDialog
diff --git a/src/components/buweekly/businessWeekly.vue b/src/components/buweekly/businessWeekly.vue
index 46e05aa82..430859f2e 100644
--- a/src/components/buweekly/businessWeekly.vue
+++ b/src/components/buweekly/businessWeekly.vue
@@ -160,8 +160,6 @@ export default {
             url,
             null,
             null,
-            [],
-            e => { console.error(`open ${url} failed`, e) },
             true)
           },
         toPopupCb2() {
diff --git a/src/components/pointCarousel.vue b/src/components/pointCarousel.vue
index 8547eb86b..3f8951344 100755
--- a/src/components/pointCarousel.vue
+++ b/src/components/pointCarousel.vue
@@ -160,9 +160,7 @@
 <script>
 import { mapState, mapActions, mapGetters, mapMutations } from 'vuex'
 import api from '@/apis'
-import { openInAppWebView } from '@/utilities/openInAppWebView'
 import { iBuyConfig } from '../apis/ibuy'
-import { openMall } from '../utilities/openInAppWebView'
 import '@/assets/styles/notosanstc.css'
 import { getEncryptedTokenInfo } from '@/utilities/iBuyUtils'
 import CryptoJS from 'crypto-js'
diff --git a/src/components/popups/stopAlertPopup.vue b/src/components/popups/stopAlertPopup.vue
index 8005cf30c..4b8862cce 100755
--- a/src/components/popups/stopAlertPopup.vue
+++ b/src/components/popups/stopAlertPopup.vue
@@ -19,7 +19,6 @@
 
 <script>
 import PopupDialog from '@/components/popups/popupDialog.vue'
-import { openMall } from '../../utilities/openInAppWebView'
 export default {
   components: {
     PopupDialog
diff --git a/src/utilities/openInAppWebView.js b/src/utilities/openInAppWebView.js
index 6da94a06c..cb0f67244 100755
--- a/src/utilities/openInAppWebView.js
+++ b/src/utilities/openInAppWebView.js
@@ -6,144 +6,114 @@ import api from '@/apis'
 import Vue from 'vue'
 
 export function openInAppWebView (
-  title,
+  title = '',
   url,
   type = null,
   token = null,
-  keys = [],
-  onError = e => {
-    console.error(`open ${url} failed`, e)
-  },
-  showSharing = false
+  hidesharebtn = false
 ) {
-  cordova.plugins.InAppWebViewPlugin.openUrl((payload) => {
+  var optionsObj = {
+    webtitle: title,
+    hidesharebtn: hidesharebtn ? 'yes' : 'no'
+  }
+
+  var inAppBrowserRef = cordova.InAppBrowser.open(url, '_blank', toOptionsString(optionsObj))
+  inAppBrowserRef.addEventListener('exit', function (event) {
     if (type === 'trp') {
       // trp 關掉需登出
       try {
+        console.log('trp back: ' + event.url)
         api('CCA130108', { TOKEN: token })
       } catch (error) {
         console.error(error)
       }
+      store._mutations['m_setIsInAppWebViewClosed'][0](
+        !!event
+      )
     }
-    store._mutations['m_setIsInAppWebViewClosed'][0](
-      !!payload
-    )
-  }, onError, {
-    title,
-    url,
-    keys,
-    showSharing
   })
 }
-export function openFamilyWebView (
-  title,
-  url,
-  keys = [],
-  onError = e => {
-    console.error(`open ${url} failed`, e)
+
+export function openFamilyWebView (title, url) {
+  var optionsObj = {
+    webtitle: title
   }
-) {
-  cordova.plugins.InAppWebViewPlugin.openFamilyUrl(
-    payload => {
-      // deeplink from 商城
-      if(payload.url) {
-        const successPage = payload.url.indexOf('V014001_001')
-        const failPage = payload.url.indexOf('V014001_002')
-        if (successPage >= 0) {
-          var params = checkParams(payload.url)
-          if (params) {
-            router.replace({
-              name:'memberBindedSuccess',
-              params: params
-            })
-          } else {
-            router.replace({
-              name:'memberBindedSuccess'
-            })
-          }
-
-        } else if (failPage >= 0) {
-          var params = checkParams(payload.url)
-          if (params) {
-            router.replace({
-              name:'memberBindedFail',
-              params: params
-            })
-          } else {
-            router.replace({
-              name:'memberBindedFail'
-            })
-          }
-        }
+
+  var inAppBrowserRef = cordova.InAppBrowser.open(url, '_blank', toOptionsString(optionsObj))
+  inAppBrowserRef.addEventListener('exit', function (event) {
+    const successPage = event.url.indexOf('V014001_001')
+    const failPage = event.url.indexOf('V014001_002')
+    if (successPage >= 0) {
+      let params = checkParams(event.url)
+      if (params) {
+        router.replace({
+          name: 'memberBindedSuccess',
+          params: params
+        })
+      } else {
+        router.replace({
+          name: 'memberBindedSuccess'
+        })
+      }
+    } else if (failPage >= 0) {
+      let params = checkParams(event.url)
+      if (params) {
+        router.replace({
+          name: 'memberBindedFail',
+          params: params
+        })
+      } else {
+        router.replace({
+          name: 'memberBindedFail'
+        })
       }
-      store._mutations['m_setIsInAppWebViewClosed'][0](
-        !!payload
-      )
-    },
-    onError, {
-      title,
-      url,
-      keys
     }
-  )
+    store._mutations['m_setIsInAppWebViewClosed'][0](
+      !!event
+    )
+  })
 }
 
-export function openAcLinkWebView (
-  title,
-  url,
-  backToEC=false,
-  keys = [],
-  onError = e => {
-    console.error(`open ${url} failed`, e)
+export function openAcLinkWebView (title, url, backToEC) {
+  var optionsObj = {
+    webtitle: title
   }
-) {
-  cordova.plugins.InAppWebViewPlugin.openAcLinkWebView(
-    payload => {
-      // deeplink from 商城
-      if(payload.url) {
-        console.log("openAcLinkWebView backToEC=",backToEC)
-        const successPage = payload.url.indexOf('F001011_002')
-        const failPage = payload.url.indexOf('F001011_003')
-        if (successPage >= 0) {
-
-            router.push({
-              name:'bindTsAccountSuccess',
-              params:{backToEC}
-            })
-
-        } else if (failPage >= 0) {
-          var params = checkParams(payload.url)
-          if (params) {
-            router.push({
-              name:'bindTsAccountFail',
-              params: params
-            })
-          } else {
-            router.push({
-              name:'bindTsAccountFail'
-            })
-          }
+
+  var inAppBrowserRef = cordova.InAppBrowser.open(url, '_blank', toOptionsString(optionsObj))
+  inAppBrowserRef.addEventListener('exit', function (event) {
+    if (event.url) {
+      console.log('openAcLinkWebView backToEC=', backToEC)
+      const successPage = event.url.indexOf('F001011_002')
+      const failPage = event.url.indexOf('F001011_003')
+      if (successPage >= 0) {
+        router.push({
+          name: 'bindTsAccountSuccess',
+          params: { backToEC }
+        })
+      } else if (failPage >= 0) {
+        var params = checkParams(event.url)
+        if (params) {
+          router.push({
+            name: 'bindTsAccountFail',
+            params: params
+          })
+        } else {
+          router.push({
+            name: 'bindTsAccountFail'
+          })
         }
       }
-      store._mutations['m_setIsInAppWebViewClosed'][0](
-        !!payload
-      )
-    },
-    onError, {
-      title,
-      url,
-      keys
     }
-  )
+    store._mutations['m_setIsInAppWebViewClosed'][0](
+      !!event
+    )
+  })
 }
 
 export async function openMall (
-  title,
+  title = '',
   url,
-  action = '',
-  onError = e => {
-    console.error(`openMall ${url} failed`, e)
-  }
+  action = ''
 ) {
   const loggedIn = store.getters.isLoggedIn
   const sha256 = s => {
@@ -155,9 +125,9 @@ export async function openMall (
 
   // PR20040007-712【RM】固定Richart Mart頁面TITLE (RM行動商城)，勿隨畫面調動
   title = 'Richart Mart行動商城'
-  let res = null;
+  let res = null
   try {
-    res = await api('CCA130401', { 
+    res = await api('CCA130401', {
       CUST_ID: tokenid,
       CHANNEL: iBuyConfig.TOKEN_CHANNEL,
       APP_VERSION: BuildInfo.version,
@@ -168,60 +138,61 @@ export async function openMall (
     Vue.bus.emit('callSysMessager', {
       title: '系統訊息',
       message:
-        '系統錯誤，請稍候再試',
-    });
-    return;
+        '系統錯誤，請稍候再試'
+    })
+    return
   }
-  
-  if(!res || !res.BODY.TOKEN_INFO){
+
+  if (!res || !res.BODY.TOKEN_INFO) {
     Vue.bus.emit('callSysMessager', {
       title: '系統訊息',
       message:
-        '系統錯誤',
-    });
-    return;
-  }  
-
-  const req = {
-    title,
-    url,
-    tokenid,
+        '系統錯誤'
+    })
+    return
+  }
+
+  // 關閉分享按鈕
+  var optionsObj = {
+    webtitle: title,
+    tokenid: tokenid,
     channel: iBuyConfig.TOKEN_CHANNEL,
-    // eslint-disable-next-line no-undef
     appver: BuildInfo.version,
-    action,
-    tokenInfo: res.BODY.TOKEN_INFO
+    action: action,
+    tokeninfo: res.BODY.TOKEN_INFO,
+    hidesharebtn: 'yes'
   }
 
-  cordova.plugins.InAppWebViewPlugin.openMall(
-    payload => {
-      // deeplink from 商城
-      if (payload.url) {
-        const fromECtrade = payload.url.indexOf('tsbank://letspay')
-        const mallCommand = payload.url.indexOf('cardaily://command/')
-        if (fromECtrade >= 0) {
-          let tsbURL = payload.url
-          router.push({ name: 'ecTrade' })
-          window.HandleAppLinkRequest(tsbURL)
-        } else if (mallCommand >= 0) {
-          let taget = payload.url.split('//command/')[1]
-          router.push({ name: taget })
-        }
-      }
-      if (payload.action === 'needLogin') {
-        router.push({ name: 'login', query: { openMallUrl: payload.url } })
-      }
-      store._mutations['m_setIsInAppWebViewClosed'][0](
-        !!payload
-      )
-    },
-    onError,
-    req
+  var inAppBrowserRef = cordova.InAppBrowser.open(url, '_blank', toOptionsString(optionsObj))
+  inAppBrowserRef.addEventListener('exit', function (event) {
+    onMallCallback(event.url, event.status)
+  })
+}
+
+function onMallCallback (url, status) {
+  // deeplink from 商城
+  if (url) {
+    const fromECtrade = url.indexOf('tsbank://letspay')
+    const mallCommand = url.indexOf('cardaily://command/')
+    if (fromECtrade >= 0) {
+      let tsbURL = url
+      router.push({ name: 'ecTrade' })
+      window.HandleAppLinkRequest(tsbURL)
+    } else if (mallCommand >= 0) {
+      let taget = url.split('//command/')[1]
+      router.push({ name: taget })
+    }
+  }
+  if (status === 'needLogin') {
+    router.push({ name: 'login', query: { openMallUrl: url } })
+  }
+  store._mutations['m_setIsInAppWebViewClosed'][0](
+    !!url
   )
 }
 
-function checkParams(url) {
-  var params;
+function checkParams (url) {
+  var params
   if (url.indexOf('?') >= 0) {
     params = {}
     var paramsArray = url.split('?')[1].split('&')
@@ -236,3 +207,16 @@ function checkParams(url) {
 
   return params
 }
+
+function toOptionsString (obj) {
+  var str = ''
+  for (var propName in obj) {
+    if (obj[propName] === null || obj[propName] === undefined || obj[propName] === '') {
+      delete obj[propName]
+    } else {
+      str += propName + '=' + obj[propName] + ','
+    }
+  }
+  return str
+}
+
diff --git a/src/views/letspay/bindPaymentTool/_bindTsAccount.vue b/src/views/letspay/bindPaymentTool/_bindTsAccount.vue
index ba409462c..3bb784943 100755
--- a/src/views/letspay/bindPaymentTool/_bindTsAccount.vue
+++ b/src/views/letspay/bindPaymentTool/_bindTsAccount.vue
@@ -29,7 +29,6 @@ import utilCrypto from '@/utilities/crypto.js'
 import bindCardBlock from '@/components/bindCardBlock.vue'
 import api from '@/apis'
 import { mapState, mapMutations, mapActions } from 'vuex'
-import { openAcLinkWebView } from '@/utilities/openInAppWebView'
 
 const UNBIND_FLOW_MAP = {
   NO_FACEID_NO_ONLY_NO_DEFAULT: 'NO_FACEID_NO_ONLY_NO_DEFAULT',
